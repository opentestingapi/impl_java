package org.opentesting.util;

import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

import java.time.Duration;
import java.time.Instant;

@Aspect
@Component
@Slf4j
public class LogExecutionTimeImpl {

    private static final String EXECUTEDIN = " executed in ";

    private OpenTestingConfig config;

    public LogExecutionTimeImpl(ApplicationContextProvider applicationContextProvider) {
        config = applicationContextProvider.getBean(OpenTestingConfig.class);
    }    

    @Around("@annotation(LogExecutionTime)")
    public Object logExecutionTime(ProceedingJoinPoint joinPoint) throws Throwable {

        Instant m1 = Instant.now();

        final Object proceed = joinPoint.proceed();

        Instant m2 = Instant.now();

        if (Duration.between(m1, m2).toMillis() < 1)
            log.debug(joinPoint.toShortString()  + EXECUTEDIN +  String.valueOf(Duration.between(m1, m2).toNanos()) + "ns ");
        else
            log.debug(joinPoint.toShortString() + EXECUTEDIN +  String.valueOf(Duration.between(m1, m2).toMillis()) + "ms ");

        if (Duration.between(m1, m2).toSeconds() > config.getLongrunningwarn())
            log.warn("long running method: "+joinPoint.toShortString()  + EXECUTEDIN +  Duration.between(m1, m2).toSeconds() + "s ");

        return proceed;
    }
}
