package org.opentesting.dto.api1;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDataExtractionDTO;
import org.opentesting.dto.TestCaseServiceDTO;
import org.opentesting.dto.TestCaseValidationDTO;
import org.opentesting.dto.migration.MigrationHelper;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Setter
@NoArgsConstructor
public class TestCaseCheckDTOapi1 extends TestCaseInstance implements TestCaseCheckDTO {
       
    //API should never use null as default
    @Getter
    private String checkid = ""; 

    @Getter
    private String description = ""; 
    
    @Getter
    private TestCaseServiceDTOapi1 service = new TestCaseServiceDTOapi1();

    private List<TestCaseValidationDTOapi1> validations = new ArrayList<>();   
    
    @Getter
    private String maxwaittime = "1h";

    @Getter
    private boolean active = true;

    //API extensions
    @Getter
    private boolean mandatory = true;

    @Getter
    private List<String> injects = new ArrayList<>();

    @Getter
    private List<String> checks = new ArrayList<>();

    /**
     * get json fields that should be stored to random data pool
     * @deprecated
     * This method is no longer acceptable as it makes no difference between payload and header.
     * <p> Use {@link #getDataextraction()} instead.
     *
     * @return result2random list
     */
    @Deprecated
    private List<String> result2random = new ArrayList<>();

    private List<TestCaseDataExtractionDTOapi1> dataextraction = new ArrayList<>();   

    //extensions should have default null
    @Getter
    private String testid = null;    

    @Getter
    private LocalDateTime targetts = null;

    @Getter
    private Boolean success = null;  
    
    @Getter
    private LocalDateTime resultts = null;

    @Getter
    private LocalDateTime lock = null; 

    @Override
    public String getVersion() {
        return this.getClass().getSimpleName();
    }

    @Override
    public List<TestCaseValidationDTO> getValidations() {
        List<TestCaseValidationDTO> result = new ArrayList<>();        
        for (TestCaseValidationDTOapi1 val : validations) result.add(val);
        return result;
    }

    @Override
    public void setService(TestCaseServiceDTO service) {
        this.service = (TestCaseServiceDTOapi1) service;
    }

    @Override
    public List<TestCaseDataExtractionDTO> getDataextraction() {
        return MigrationHelper.mergeDataExtraction(checkid, dataextraction, result2random);
    }

    @Override
    public void addDataextraction(TestCaseDataExtractionDTOapi1 de) {
        dataextraction.add(de);
    }
    
}