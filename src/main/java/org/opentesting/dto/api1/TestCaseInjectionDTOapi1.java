package org.opentesting.dto.api1;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.opentesting.dto.TestCaseDataExtractionDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.TestCaseReplacementDTO;
import org.opentesting.dto.migration.MigrationHelper;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Setter
@NoArgsConstructor
public class TestCaseInjectionDTOapi1 extends TestCaseInstance implements TestCaseInjectionDTO {

    //API should never use null as default
    @Getter
    private String injectid = "";   

    @Getter
    private String description = ""; 
    
    @Getter
    private List<String> cron = new ArrayList<>();  
    
    @Getter
    private TestCaseServiceDTOapi1 service = new TestCaseServiceDTOapi1();

    @Getter
    private String timetolive = "1d"; //default only one day

    @Getter
    private String sourcefile = "";

    @Getter
    private List<String> checks = new ArrayList<>();

    private List<TestCaseReplacementDTOapi1> replacements = new ArrayList<>();

    @Getter
    private boolean active = true;

    /**
     * get json fields that should be stored to random data pool
     * @deprecated
     * This method is no longer acceptable as it makes no difference between payload and header.
     * <p> Use {@link #getDataextraction()} instead.
     *
     * @return result2random list
     */
    @Deprecated(since = "API version 1.1")
    private List<String> result2random = new ArrayList<>();

    private List<TestCaseDataExtractionDTOapi1> dataextraction = new ArrayList<>();   

    //extensions should have default null
    @Getter
    private String timerid = null; //required to "disable" outdated timers - because they will stay active

    @Getter
    private LocalDateTime schedulets = null;

    @Override
    public String getVersion() {
        return this.getClass().getSimpleName();
    }

    @Override
    public List<TestCaseReplacementDTO> getReplacements() {
        List<TestCaseReplacementDTO> result = new ArrayList<>();        
        for (TestCaseReplacementDTOapi1 rep : replacements) result.add(rep);
        return result;
    }

    @Override
    public List<TestCaseDataExtractionDTO> getDataextraction() {
        return MigrationHelper.mergeDataExtraction(injectid, dataextraction, result2random); //NOSONAR - we will keep the deprecated config for a while
    }

    @Override
    public void addDataextraction(TestCaseDataExtractionDTOapi1 de) {
        dataextraction.add(de);
    }

}