package org.opentesting.dto.migration;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;

import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.api0dot1.TestCaseCheckDTOapi0dot1;
import org.opentesting.dto.api0dot1.TestCaseDTOapi0dot1;
import org.opentesting.dto.api0dot1.TestCaseInjectionDTOapi0dot1;
import org.opentesting.dto.api1dot0.TestCaseCheckDTOapi1dot0;
import org.opentesting.dto.api1dot0.TestCaseDTOapi1dot0;
import org.opentesting.dto.api1dot0.TestCaseInjectionDTOapi1dot0;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.exceptions.MigrationException;
import org.opentesting.util.exceptions.ValidationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class TestCaseDTOMigration {

    @SuppressWarnings("rawtypes")
    public static final Class LATEST = TestCaseDTOapi1dot0.class;

    @Autowired
    private OpenTestingConversion e2EConversion;

    @Autowired
    private TestCaseCheckDTOMigration testCaseCheckDTOMigration;

    @Autowired
    private TestCaseInjectionDTOMigration testCaseInjectionDTOMigration;

    @SuppressWarnings("rawtypes")
    private Class[] versions = {TestCaseDTOapi0dot1.class, LATEST};

    @SuppressWarnings("unchecked")
    public TestCaseDTO toLatest(String version, String json) throws JsonProcessingException, MigrationException, ValidationException {

        if (json == null || json.isEmpty()) return null;

        if (version.equals(versions[versions.length - 1].getSimpleName())) 
            return (TestCaseDTO) e2EConversion.json2object(json, versions[versions.length - 1]);

        //migration to next version
        if (version.equals(TestCaseDTOapi0dot1.class.getSimpleName())) {
            String newVersion = TestCaseDTOapi1dot0.class.getSimpleName();
            TestCaseDTOapi1dot0 newObj = api0dot1to1dot0(e2EConversion.json2object(json, TestCaseDTOapi0dot1.class));
            log.info("converted 0.1 to 1.0");
            return toLatest(newVersion, e2EConversion.object2json(newObj));
        }

        throw new MigrationException("unknown conversion: "+version);
    } 
    
    @SuppressWarnings("rawtypes")
    public TestCaseDTO toLatest(Class version, String json) throws JsonProcessingException, MigrationException, ValidationException {
        return toLatest(version.getSimpleName(), json);
    } 
    
    /**
     * migrate from 0.1 to 1.0 (uploads only, no instance/database migration required)
     * @throws ValidationException
     */
    TestCaseDTOapi1dot0 api0dot1to1dot0(TestCaseDTOapi0dot1 input) throws JsonProcessingException, ValidationException {

        TestCaseDTOapi1dot0 result = new TestCaseDTOapi1dot0();       

        result.setActive(input.isActivation());

        //checks (no stream as we want to have all exceptions in 1 thread)
        List<TestCaseCheckDTOapi1dot0> newChecks = new ArrayList<>();
        for (TestCaseCheckDTOapi0dot1 check : input.getChecks()) {
            newChecks.add(testCaseCheckDTOMigration.api0dot1to1dot0(check));
        }        
        result.setChecks(newChecks);

        result.setDescription(input.getDescription());
        result.setId(input.getTestid());

        //injects (no stream as we want to have all exceptions in 1 thread)
        List<TestCaseInjectionDTOapi1dot0> newInjects = new ArrayList<>();
        for (TestCaseInjectionDTOapi0dot1 inject : input.getInjections()) {
            newInjects.add(testCaseInjectionDTOMigration.api0dot1to1dot0(inject, input.getInjections()));
        }        
        result.setInjections(newInjects);

        result.setLabels(input.getLabels());      
        result.setTestapi("1.0"); //fix        
   
        return result;
    }    
    
}