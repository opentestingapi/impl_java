package org.opentesting.dto.migration;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;

import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.api0dot1.TestCaseInjectionDTOapi0dot1;
import org.opentesting.dto.api0dot1.TestCaseReplacementDTOapi0dot1;
import org.opentesting.dto.api1dot0.TestCaseInjectionDTOapi1dot0;
import org.opentesting.dto.api1dot0.TestCaseReplacementDTOapi1dot0;
import org.opentesting.dto.api1dot0.TestCaseServiceDTOapi1dot0;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.exceptions.MigrationException;
import org.opentesting.util.exceptions.ValidationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class TestCaseInjectionDTOMigration {

    @Autowired
    private OpenTestingConversion e2EConversion;

    @Autowired
    private TestCaseReplacementDTOMigration testCaseReplacementDTOMigration;

    @SuppressWarnings("rawtypes")
    private Class[] versions = {TestCaseInjectionDTOapi0dot1.class, TestCaseInjectionDTOapi1dot0.class};

    @SuppressWarnings("unchecked")
    public TestCaseInjectionDTO toLatest(String version, String json) throws JsonProcessingException, MigrationException, ValidationException {

        if (json == null || json.isEmpty()) return null;

        if (version.equals(versions[versions.length - 1].getSimpleName())) 
            return (TestCaseInjectionDTO) e2EConversion.json2object(json, versions[versions.length - 1]);

        //migration to next version
        if (version.equals(TestCaseInjectionDTOapi0dot1.class.getSimpleName())) {
            String newVersion = TestCaseInjectionDTOapi1dot0.class.getSimpleName();
            TestCaseInjectionDTOapi1dot0 newObj = api0dot1to1dot0(e2EConversion.json2object(json, TestCaseInjectionDTOapi0dot1.class), null);
            log.info("converted 0.1 to 1.0");
            return toLatest(newVersion, e2EConversion.object2json(newObj));
        }

        throw new MigrationException("unknown conversion: "+version);
    } 
    
    @SuppressWarnings("rawtypes")
    public TestCaseInjectionDTO toLatest(Class version, String json) throws JsonProcessingException, MigrationException, ValidationException {
        return toLatest(version.getSimpleName(), json);
    } 
    
    /**
     * migrate from 0.1 to 1.0 (uploads only, no instance/database migration required)
     * @throws ValidationException
     */
    TestCaseInjectionDTOapi1dot0 api0dot1to1dot0(TestCaseInjectionDTOapi0dot1 input, List<TestCaseInjectionDTOapi0dot1> otherInjects) throws JsonProcessingException, ValidationException {

        TestCaseInjectionDTOapi1dot0 result = new TestCaseInjectionDTOapi1dot0();

        result.setActive(input.isActivation());
        result.setChecks(input.getChecks());
        result.setCron(input.getTriggercron());
        result.setInjectid(input.getInjectid());

        //replacements
        if (input.getRandomgenerator() != null && input.getRandomgenerator().getReplacements() != null) {
            List<TestCaseReplacementDTOapi0dot1> oldreplacements = input.getRandomgenerator().getReplacements();
            if (input.getRandomgenerator().getInheritfrom() != null && !input.getRandomgenerator().getInheritfrom().isEmpty()) {
                if (otherInjects == null) otherInjects = new ArrayList<>(); 
                for (TestCaseInjectionDTOapi0dot1 inj : otherInjects) {
                    if (inj.getInjectid().equalsIgnoreCase(input.getRandomgenerator().getInheritfrom())) {
                        oldreplacements = inj.getRandomgenerator().getReplacements();
                    }
                }            
            }
            result.setReplacements(api0dot1to1dot0Replacements(oldreplacements));
        }

        result.setSchedulets(input.getCreatets());

        //service   
        result.setService(api0dot1to1dot0Service(input));

        result.setSourcefile(input.getSourcefile());    
        result.setTimerid(input.getTimerid());
        result.setTimetolive(input.getTimetolive());
        
        return result;
    }

    private List<TestCaseReplacementDTOapi1dot0> api0dot1to1dot0Replacements(List<TestCaseReplacementDTOapi0dot1> oldreplacements) throws JsonProcessingException {        
        List<TestCaseReplacementDTOapi1dot0> replacements = new ArrayList<>();
        for (TestCaseReplacementDTOapi0dot1 rep : oldreplacements) {            
            replacements.add(testCaseReplacementDTOMigration.api0dot1to1dot0(rep));     
        }
        return replacements;
    }

    private TestCaseServiceDTOapi1dot0 api0dot1to1dot0Service(TestCaseInjectionDTOapi0dot1 input) throws ValidationException {
        return MigrationHelper.api0dot1to1dot0Service(input.getService(), input.getConnectstring(), input.getConnectuser(), 
            input.getConnectpassword(), input.getJwtuser(), input.getJwtpassword(), input.getServiceparam());
    }
    
}