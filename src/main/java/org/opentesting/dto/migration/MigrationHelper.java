package org.opentesting.dto.migration;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.opentesting.dto.api1.TestCaseCustomParameterDTOapi1;
import org.opentesting.dto.api1.TestCaseServiceDTOapi1;
import org.opentesting.util.exceptions.ValidationException;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class MigrationHelper {

    private MigrationHelper() {}

    /**
     * "a=1,b=2"
     * @param input see above
     * @param delimiter example ,
     * @return map with key/value
     * @throws ValidationException
     */
    public static Map<String,String> parameterToMap(String input, String delimiter) throws ValidationException {
        Map<String,String> res = new HashMap<>();
        if (input == null) return res;
        for (String s : input.split(delimiter)) {
            if (s != null && !s.isEmpty()) {
                if (s.contains("=")) {
                    try {
                        int eq = s.indexOf("=", 0);
                        res.put(s.substring(0, eq), s.substring(eq+1));
                        log.debug(s.substring(0, eq)+" -> "+s.substring(eq+1));
                    } catch (Exception e) {
                        log.error(e.getMessage(), e);
                        throw new ValidationException("cannot parse parameter: "+s);
                    }
                } else {
                    log.info(s+" ignored!");
                }
            }
        }
        return res;
    }

    /**
     * create service object from parameter map
     * @param type service type
     * @param connectstring connectstring
     * @param connectuser connectuser
     * @param connectpassword connectpassword
     * @param jwtuser jwtuser
     * @param jwtpassword jwtpassword
     * @param inputval parameter map
     * @return service object
     * @throws ValidationException
     */
    public static TestCaseServiceDTOapi1 api0dot1to1Service(String type, String connectstring, String connectuser, String connectpassword,
            String jwtuser, String jwtpassword, String serviceparam) throws ValidationException {

        TestCaseServiceDTOapi1 service = new TestCaseServiceDTOapi1();    
        
        Map<String,String> inputval = new HashMap<>();
        inputval.putAll(MigrationHelper.parameterToMap(serviceparam, ";"));
        inputval.putAll(MigrationHelper.parameterToMap(connectstring, ";"));

        service.setConnectstring(connectstring);
        if (inputval.get("broker") != null) {
            service.setConnectstring(inputval.get("broker"));
        }
        if (inputval.get("url") != null) {
            service.setConnectstring(inputval.get("url"));
        }

        List<TestCaseCustomParameterDTOapi1> custom = new ArrayList<>();
        if (jwtuser !=null && !jwtuser.isEmpty()) custom.add(new TestCaseCustomParameterDTOapi1("jwtuser", jwtuser));
        if (jwtpassword !=null && !jwtpassword.isEmpty()) custom.add(new TestCaseCustomParameterDTOapi1("jwtpassword", jwtpassword));
        for (Map.Entry<String,String> entry : inputval.entrySet()) {
            if (!"broker,url,sql,cql,payload".contains(entry.getKey()))
                custom.add(new TestCaseCustomParameterDTOapi1(entry.getKey().replace("-", ""), entry.getValue()));
        }
        service.setCustom(custom);   

        service.setPassword(connectpassword);
        service.setType(type);
        service.setUsername(connectuser);

        return service;
    }
    
}