package org.opentesting.dto.migration;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;

import org.opentesting.dto.api1dot0.TestCaseCustomParameterDTOapi1dot0;
import org.opentesting.dto.api1dot0.TestCaseServiceDTOapi1dot0;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class MigrationHelper {

    private MigrationHelper() {}

    /**
     * "a=1,b=2"
     * @param input see above
     * @param delimiter example ,
     * @return map with key/value
     */
    public static Map<String,String> parameterToMap(String input, String delimiter) {
        Map<String,String> res = new HashMap<>();
        for (String s : input.split(delimiter)) {
            int eq = s.indexOf("=", 0);
            res.put(s.substring(0, eq), s.substring(eq+1));
            log.info(s.substring(0, eq)+" -> "+s.substring(eq+1));
        }
        return res;
    }

    /**
     * create service object from parameter map
     * @param type service type
     * @param connectstring connectstring
     * @param connectuser connectuser
     * @param connectpassword connectpassword
     * @param jwtuser jwtuser
     * @param jwtpassword jwtpassword
     * @param inputval parameter map
     * @return service object
     */
    public static TestCaseServiceDTOapi1dot0 api0dot1to1dot0Service(String type, String connectstring, String connectuser, String connectpassword,
            String jwtuser, String jwtpassword, String serviceparam) throws JsonProcessingException {

        TestCaseServiceDTOapi1dot0 service = new TestCaseServiceDTOapi1dot0();    
        
        Map<String,String> inputval = new HashMap<>();
        inputval.putAll(MigrationHelper.parameterToMap(serviceparam, ";"));
        inputval.putAll(MigrationHelper.parameterToMap(connectstring, ";"));

        service.setConnectstring(connectstring);
        if (type.equalsIgnoreCase("kafka")) {
            service.setConnectstring(inputval.get("broker"));
        }
        if (type.equalsIgnoreCase("rest")) {
            service.setConnectstring(inputval.get("url"));
        }

        List<TestCaseCustomParameterDTOapi1dot0> custom = new ArrayList<>();
        custom.add(new TestCaseCustomParameterDTOapi1dot0("jwtuser", jwtuser));
        custom.add(new TestCaseCustomParameterDTOapi1dot0("jwtpassword", jwtpassword));
        for (Map.Entry<String,String> entry : inputval.entrySet()) {
            custom.add(new TestCaseCustomParameterDTOapi1dot0(entry.getKey().replace("-", ""), entry.getValue()));
        }
        service.setCustom(custom);   

        service.setPassword(connectpassword);
        service.setType(type);
        service.setUsername(connectuser);

        return service;
    }
    
}