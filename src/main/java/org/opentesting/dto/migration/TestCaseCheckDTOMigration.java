package org.opentesting.dto.migration;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDataExtractionDTO;
import org.opentesting.dto.api0dot1.TestCaseCheckDTOapi0dot1;
import org.opentesting.dto.api1.TestCaseCheckDTOapi1;
import org.opentesting.dto.api1.TestCaseDataExtractionDTOapi1;
import org.opentesting.dto.api1.TestCaseServiceDTOapi1;
import org.opentesting.dto.api1.TestCaseValidationDTOapi1;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.exceptions.MigrationException;
import org.opentesting.util.exceptions.ValidationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class TestCaseCheckDTOMigration {

    @Autowired
    private OpenTestingConversion e2EConversion;

    @SuppressWarnings("rawtypes")
    private Class[] versions = {TestCaseCheckDTOapi0dot1.class, TestCaseCheckDTOapi1.class};

    @SuppressWarnings("unchecked")
    public TestCaseCheckDTO toLatest(String version, String json) throws JsonProcessingException, MigrationException, ValidationException {

        if (json == null || json.isEmpty()) return null;

        if (version.equals(versions[versions.length - 1].getSimpleName())) 
            return (TestCaseCheckDTO) e2EConversion.json2object(json, versions[versions.length - 1]);

        //migration to next version
        if (version.equals(TestCaseCheckDTOapi0dot1.class.getSimpleName())) {
            String newVersion = TestCaseCheckDTOapi1.class.getSimpleName();
            TestCaseCheckDTOapi1 newObj = api0dot1to1(e2EConversion.json2object(json, TestCaseCheckDTOapi0dot1.class));
            log.info("converted 0.1 to 1.x");
            return toLatest(newVersion, e2EConversion.object2json(newObj));
        }

        throw new MigrationException("unknown conversion: "+version);
    }  

    @SuppressWarnings("rawtypes")
    public TestCaseCheckDTO toLatest(Class version, String json) throws JsonProcessingException, MigrationException, ValidationException {
        return toLatest(version.getSimpleName(), json);
    } 
    
    /**
     * migrate from 0.1 to 1.0 (uploads only, no instance/database migration required)
     * @throws ValidationException
     */
    TestCaseCheckDTOapi1 api0dot1to1(TestCaseCheckDTOapi0dot1 input) throws ValidationException {
        TestCaseCheckDTOapi1 result = new TestCaseCheckDTOapi1();
        
        result.setActive(input.isActivation());
        result.setCheckid(input.getCheckid());
        result.setChecks(input.getChecks());
        result.setInjects(input.getInjects());
        result.setMandatory(input.isMandatory());
        result.setMaxwaittime(input.getMaxwaittime());

        List<TestCaseDataExtractionDTOapi1> extracts = new ArrayList<>();
        for (String r2random : input.getResult2random()) {
            TestCaseDataExtractionDTOapi1 de = new TestCaseDataExtractionDTOapi1();
            de.setSource(TestCaseDataExtractionDTO.SOURCE_PAYLOAD);
            de.setAttribute(r2random);  
            de.setTarget("#" + input.getCheckid() + "." + r2random + "#");
            extracts.add(de); 
        }
        result.setDataextraction(extracts);

        //service
        result.setService(api0dot1to1Service(input));

        //validation
        Map<String,String> inputval = new HashMap<>();
        inputval.putAll(MigrationHelper.parameterToMap(input.getServiceparam(), ";"));
        List<TestCaseValidationDTOapi1> validations = new ArrayList<>();
        TestCaseValidationDTOapi1 val = new TestCaseValidationDTOapi1();
        val.setOrder(1);
        if (inputval.get("cql") != null) val.setRequest(inputval.get("cql"));
        if (inputval.get("sql") != null) val.setRequest(inputval.get("sql"));
        if (inputval.get("payload") != null) val.setRequest(inputval.get("payload"));
        val.setResponse(List.of(input.getExpectedfile()));
        val.setType(input.getExpectedtype());
        validations.add(val);
        result.setValidations(validations);

        return result;
    }

    private TestCaseServiceDTOapi1 api0dot1to1Service(TestCaseCheckDTOapi0dot1 input) throws ValidationException {     
        return MigrationHelper.api0dot1to1Service(input.getService(), input.getConnectstring(), input.getConnectuser(), 
            input.getConnectpassword(), input.getJwtuser(), input.getJwtpassword(), input.getServiceparam());
    }
    
}