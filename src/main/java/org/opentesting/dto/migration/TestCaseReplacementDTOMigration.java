package org.opentesting.dto.migration;

import com.fasterxml.jackson.core.JsonProcessingException;

import org.opentesting.dto.TestCaseReplacementDTO;
import org.opentesting.dto.api0_1.TestCaseReplacementDTOapi0_1;
import org.opentesting.dto.api1_0.TestCaseReplacementDTOapi1_0;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.exceptions.MigrationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class TestCaseReplacementDTOMigration {

    @Autowired
    private OpenTestingConversion e2EConversion;

    @SuppressWarnings("rawtypes")
    private Class[] versions = {TestCaseReplacementDTOapi0_1.class, TestCaseReplacementDTOapi1_0.class};

    @SuppressWarnings("unchecked")
    public TestCaseReplacementDTO toLatest(String version, String json) throws JsonProcessingException, MigrationException {

        if (version.equals(versions[versions.length - 1].getSimpleName())) 
            return (TestCaseReplacementDTO) e2EConversion.json2object(json, versions[versions.length - 1]);

        //migration to next version
        if (version.equals(TestCaseReplacementDTOapi0_1.class.getSimpleName())) {
            String newVersion = TestCaseReplacementDTOapi1_0.class.getSimpleName();
            TestCaseReplacementDTOapi1_0 newObj = api0_1to1_0((TestCaseReplacementDTOapi0_1) e2EConversion.json2object(json, TestCaseReplacementDTOapi0_1.class));
            log.info("converted 0.1 to 1.0");
            return toLatest(newVersion, e2EConversion.object2json(newObj));
        }

        throw new MigrationException("unknown conversion: "+version);
    }  

    @SuppressWarnings("rawtypes")
    public TestCaseReplacementDTO toLatest(Class version, String json) throws JsonProcessingException, MigrationException {
        return toLatest(version.getSimpleName(), json);
    }
    
    private TestCaseReplacementDTOapi1_0 api0_1to1_0(TestCaseReplacementDTOapi0_1 input) throws JsonProcessingException {
        TestCaseReplacementDTOapi1_0 result = new TestCaseReplacementDTOapi1_0();
        //TODO
        return result;
    }
    
}