package org.opentesting.dto.migration;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;

import org.opentesting.dto.TestCaseReplacementDTO;
import org.opentesting.dto.api0dot1.TestCaseReplacementDTOapi0dot1;
import org.opentesting.dto.api1.TestCaseReplacementDTOapi1;
import org.opentesting.dto.api1.TestCaseReplacementValueDTOapi1;
import org.opentesting.util.ApplicationContextProvider;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.exceptions.MigrationException;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class TestCaseReplacementDTOMigration {

    private static final String REGEX = "regex";

    private OpenTestingConversion e2EConversion;

    public TestCaseReplacementDTOMigration(ApplicationContextProvider applicationContextProvider) {
        e2EConversion = applicationContextProvider.getBean(OpenTestingConversion.class);
    }

    @SuppressWarnings("rawtypes")
    private Class[] versions = { TestCaseReplacementDTOapi0dot1.class, TestCaseReplacementDTOapi1.class };

    @SuppressWarnings("unchecked")
    public TestCaseReplacementDTO toLatest(String version, String json)
            throws JsonProcessingException, MigrationException {

        if (json == null || json.isEmpty()) return null;

        if (version.equals(versions[versions.length - 1].getSimpleName()))
            return (TestCaseReplacementDTO) e2EConversion.json2object(json, versions[versions.length - 1]);

        // migration to next version
        if (version.equals(TestCaseReplacementDTOapi0dot1.class.getSimpleName())) {
            String newVersion = TestCaseReplacementDTOapi1.class.getSimpleName();
            TestCaseReplacementDTOapi1 newObj = api0dot1to1(e2EConversion.json2object(json, TestCaseReplacementDTOapi0dot1.class));
            log.info("converted 0.1 to 1.0");
            return toLatest(newVersion, e2EConversion.object2json(newObj));
        }

        throw new MigrationException("unknown conversion: " + version);
    }

    @SuppressWarnings("rawtypes")
    public TestCaseReplacementDTO toLatest(Class version, String json)
            throws JsonProcessingException, MigrationException {
        return toLatest(version.getSimpleName(), json);
    }

    TestCaseReplacementDTOapi1 api0dot1to1(TestCaseReplacementDTOapi0dot1 rep) {

        TestCaseReplacementDTOapi1 newrep = new TestCaseReplacementDTOapi1();
        newrep.setKey(rep.getReplacement());
        List<TestCaseReplacementValueDTOapi1> newvalue = new ArrayList<>();

        if (rep.getOptionlist() != null && !rep.getOptionlist().isEmpty()) {
            TestCaseReplacementValueDTOapi1 newval = new TestCaseReplacementValueDTOapi1();
            newval.setOrder(1);
            newval.setType("list");
            newval.setValue(OpenTestingConversion.toString(rep.getOptionlist(), "|"));
            newvalue.add(newval);
        }
        if (rep.isUseuuid()) {
            TestCaseReplacementValueDTOapi1 newval = new TestCaseReplacementValueDTOapi1();
            newval.setOrder(1);
            newval.setType(REGEX);
            newval.setValue("[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}");
            newvalue.add(newval);
        }
        if (rep.getCustom() != null && rep.getCustom().length() > 0) {
            TestCaseReplacementValueDTOapi1 newval = new TestCaseReplacementValueDTOapi1();
            newval.setOrder(1);
            newval.setType(REGEX);
            newval.setValue("[" + rep.getCustom() + "]{" + rep.getCustomlength() + "}"); // special signs might fail...
            newvalue.add(newval);
        }
        if (rep.getDateformat() != null && rep.getDateformat().length() > 0) {
            TestCaseReplacementValueDTOapi1 newval = new TestCaseReplacementValueDTOapi1();
            newval.setOrder(1);
            newval.setType("now");
            newval.setValue(rep.getDateformat());
            newval.setParam(rep.getDateaddition());
            newvalue.add(newval);
        }
        if (rep.isSuffixactualms()) { // only the make it unique, we can use something else instead
            TestCaseReplacementValueDTOapi1 newval = new TestCaseReplacementValueDTOapi1();
            newval.setOrder(2);
            newval.setType(REGEX);
            newval.setValue("[0-9]{" + rep.getSuffixlength() + "}");
            newvalue.add(newval);
        }

        newrep.setValue(newvalue);
        return newrep;
    }

}