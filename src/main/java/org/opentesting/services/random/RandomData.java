package org.opentesting.services.random;

import java.util.Map.Entry;

import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.TestCaseRandomDataDTO;
import org.opentesting.dto.TestCaseRandomGeneratorDTO;
import org.opentesting.persistence.TestCaseFileRepository;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.LogExecutionTime;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * random data managment
 */
@Component
public class RandomData {

    private static final String TESTCASERANDOMDATASTORAGE = "internal_e2e_testcase_randomdata_store_###.json";

    @Autowired
    private TestCaseFileRepository testCaseFileRepository;

    @Autowired
    private RandomGenerator randomGenerator;

    @Autowired
    private OpenTestingConversion e2EConversion;

    /**
     * read or create random data
     */
    @LogExecutionTime
    public TestCaseRandomDataDTO getRandomData(String testid, TestCaseInjectionDTO inject) throws JsonMappingException, JsonProcessingException {

        TestCaseRandomGeneratorDTO randomgenerator = inject.getRandomgenerator();

        //check null
        if (randomgenerator == null) return null;

        TestCaseRandomDataDTO randomdata = null;

        //inherit or create new one
        if (randomgenerator.getInheritfrom() != null && randomgenerator.getInheritfrom().length() > 0) {

            //read existing random data
            String randomdatastr = testCaseFileRepository.select(testid, TESTCASERANDOMDATASTORAGE.replace("###", randomgenerator.getInheritfrom()));
            if (randomdatastr != null && randomdatastr.length() > 0) 
                randomdata = e2EConversion.json2object(randomdatastr, TestCaseRandomDataDTO.class);
        } else {

            //create random data and store
            randomdata = randomGenerator.create(randomgenerator);
            this.storeRandomData(testid, inject.getInjectid(), randomdata);
        }

        return randomdata;
    }

    /**
     * store random data in database
     * @param testid Test ID
     * @param injectid Inject ID
     * @param randomdata Random Data
     * @return
     */
    private TestCaseRandomDataDTO storeRandomData(String testid, String injectid, TestCaseRandomDataDTO randomdata) throws JsonProcessingException {

        //store in database
        testCaseFileRepository.insert(testid, TESTCASERANDOMDATASTORAGE.replace("###", injectid),
                e2EConversion.object2json(randomdata));

        return randomdata;
    }

    /**
     * replace placeholders with random data
     * @param content file content
     * @param randomdata random data store
     * @return replaced file content
     */
    @LogExecutionTime
    public String addRandomData(String content, TestCaseRandomDataDTO randomdata) {
        if (randomdata != null && randomdata.getRandomdata() != null) {
            for (Entry<String,String> repl : randomdata.getRandomdata().entrySet()) {
                content = content.replaceAll(repl.getKey(), repl.getValue());
            }
        }
        return content;
    }
    
}
