package org.opentesting.services.trace;

import org.opentesting.dto.TraceDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import brave.ScopedSpan;
import brave.Span;
import brave.Tracer;
import brave.internal.codec.HexCodec;
import brave.propagation.TraceContext;
import brave.propagation.TraceContext.Builder;

@Component
public class OpentestingTraceContext {

    @Autowired
    private Tracer tracer;

    /**
     * create trace context
     * @param trace trace information
     * @return trace context object
     */
    private TraceContext createTraceContext(TraceDTO trace) {
        
        //validate Trace        
        if (!trace.isInitialized()) {
            Span initspan = tracer.currentSpan();
            if (initspan == null) initspan = tracer.nextSpan();
            trace.setTraceId(initspan.context().traceIdString());
            trace.setSpanId(initspan.context().spanIdString());
            trace.setParentSpanId(initspan.context().parentIdString());
            trace.setSampled(initspan.context().sampled()); 
        }

        //create builder
        Builder b = TraceContext.newBuilder()
                    .traceId(HexCodec.lowerHexToUnsignedLong(trace.getTraceId()))
                    .sampled(trace.getSampled());
        
        //we might miss spanId and parentSpanId
        if (trace.getSpanId() != null && !trace.getSpanId().isEmpty()) b.spanId(HexCodec.lowerHexToUnsignedLong(trace.getSpanId()));
        if (trace.getParentSpanId() != null && !trace.getParentSpanId().isEmpty()) b.parentId(HexCodec.lowerHexToUnsignedLong(trace.getParentSpanId()));
                            
        return b.build();        
    }

    /**
     * start a new span from existing trace information
     * @param name new span name
     * @param trace existing trace info
     * @return scoped span
     */
    public ScopedSpan startScopedSpanWithParent(String name, TraceDTO trace) {
        //create scoped span with custom trace context
        return tracer.startScopedSpanWithParent(name, createTraceContext(trace));
    }
    
}
