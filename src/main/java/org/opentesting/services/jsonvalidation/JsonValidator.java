package org.opentesting.services.jsonvalidation;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.databind.JsonNode;
import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.ValidationMessage;
import com.networknt.schema.SpecVersionDetector;

import org.opentesting.util.ApplicationContextProvider;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.exceptions.ValidationException;
import org.springframework.core.io.DefaultResourceLoader;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

/**
 * validate json with json schema
 */
@Component
@Slf4j
public class JsonValidator {

    private OpenTestingConversion openTestingConversion;

    public JsonValidator(ApplicationContextProvider applicationContextProvider) {
        openTestingConversion = applicationContextProvider.getBean(OpenTestingConversion.class);
    }    

    /**
     * validate JSON schema
     * @throws ValidationException
     */
    public List<String> validateSchema(String json, String schema, boolean fileFromClasspath) throws ValidationException {
        try {              
            //create schema object
            JsonNode schemaNode;
            if (fileFromClasspath) {
                //from classpath
                ResourceLoader resourceLoader = new DefaultResourceLoader();
                Resource schemaContent = resourceLoader.getResource("classpath:templates/"+schema);
                schemaNode = openTestingConversion.json2JsonNode(schemaContent.getInputStream());
            } else {
                //direct usage
                schemaNode = openTestingConversion.json2JsonNode(schema);
            }            
            JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersionDetector.detect(schemaNode));
            JsonSchema jsonSchema = factory.getSchema(schemaNode);

            //create node object
            JsonNode jsonNode = openTestingConversion.json2JsonNode(json);

            //validate
            List<String> result = new ArrayList<>();
            for (ValidationMessage validations : jsonSchema.validate(jsonNode)){
                String message = validations.getCode() + " - " + validations.getMessage();
                log.error(message);
                result.add(message);
            }
            return result;
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw new ValidationException(e.getMessage());
        }
    }    
    
}