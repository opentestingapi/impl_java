package org.opentesting.services.encryption;

import org.opentesting.util.OpenTestingConfig;
import org.opentesting.util.LogExecutionTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.util.Base64;

/**
 * we do need password decryption, so we need to use a custom one - otherwise only "match" would be available (one-way)
 */
@Component
public class Encryption {

    @Autowired
    private OpenTestingConfig config;

    /**
     * encrypt password
     */
    @LogExecutionTime
    public String encrypt(String password) {
        if (password == null) return null;
        String secret = createSecret(password);
        return "ENC("+Base64.getEncoder().encodeToString(secret.getBytes(StandardCharsets.UTF_8))+")";
    }

    /**
     * decrypt password
     */
    @LogExecutionTime
    public String decrypt(String encodedSecret) {
        if (encodedSecret == null) return null;
        if (!encodedSecret.startsWith("ENC(")) return encodedSecret;
        encodedSecret = encodedSecret.substring(4,encodedSecret.length()-1);
        String decodedSecret = new String(Base64.getDecoder().decode(encodedSecret), StandardCharsets.UTF_8);
        return getPasswordfromSecret(decodedSecret);
    }

    /**
     *
     */
    private String createSecret(String password) {

        String salt = config.getSalt();

        StringBuilder buf = new StringBuilder();
        for (int i = 0; i < password.length(); i++) {
            int sum = password.charAt(i) + salt.charAt(i);
            buf.append((char)sum);
        }

        return buf.toString();
    }

    /**
     * get original password
     */
    private String getPasswordfromSecret(String decodedSecret) {

        String salt = config.getSalt();

        StringBuilder buf = new StringBuilder();
        for (int i = 0; i < decodedSecret.length(); i++) {
            int orig = decodedSecret.charAt(i) - salt.charAt(i);
            buf.append((char)orig);
        }

        return buf.toString();
    }

}