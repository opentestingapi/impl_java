package org.opentesting.services.rest;

import java.io.IOException;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.opentesting.services.rest.dto.TestDO;
import org.opentesting.util.ApplicationContextProvider;
import org.opentesting.util.OpenTestingConversion;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;

import io.swagger.v3.oas.annotations.Operation;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/dummy")
@Slf4j
public class DummyController {

    private OpenTestingConversion openTestingConversion;

    public DummyController(ApplicationContextProvider applicationContextProvider) {
        openTestingConversion = applicationContextProvider.getBean(OpenTestingConversion.class);
    }

    @Operation(summary = "get json")
    @GetMapping(value = "/get", produces = MediaType.APPLICATION_JSON_VALUE)
    public TestDO get(@RequestHeader Map<String, String> headers, HttpServletResponse response) {      
        printHeaders(headers);
        //required for system tests
        if (response != null) response.addHeader("testheader", "hallo");
        return new TestDO("test","test2");
    }

    @Operation(summary = "post json")
    @PostMapping(value = "/post", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public TestDO post(@RequestHeader Map<String, String> headers, @RequestBody TestDO testcase, HttpServletResponse response) throws JsonProcessingException {
        printHeaders(headers);
        log.debug("/dummy/post "+openTestingConversion.object2json(testcase));
        //required for system tests
        return new TestDO(testcase.getTest(),testcase.getTest2());
    }

    @Operation(summary = "unauthorized check")
    @PostMapping(value = "/unauthorized", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public TestDO unauthorized(@RequestHeader Map<String, String> headers, @RequestBody String testcaseStr, HttpServletResponse response) throws IOException {
        // 401
        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Authentication Failed");
        return null;
    }    

    private void printHeaders(Map<String, String> headers) {
        if (headers == null) return;
        headers.forEach((key, value) -> 
            log.debug(String.format("Header '%s' = %s", key, value))
        );
    }
    
}