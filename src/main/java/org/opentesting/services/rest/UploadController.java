package org.opentesting.services.rest;

import javax.servlet.http.HttpServletResponse;

import org.opentesting.dto.TestCaseDTO;
import org.opentesting.services.execution.TestManager;
import org.opentesting.services.execution.TestScheduler;
import org.opentesting.services.file.FileManager;
import org.opentesting.util.OpenTestingConversion;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;

@Api(description = "endpoint to upload new files and test cases")
@RestController
@Slf4j
@RequestMapping("/upload")
public class UploadController {

    @Autowired
    private TestManager testManager;

    @Autowired
    private FileManager fileManager;

    @Autowired
    private TestScheduler testScheduler;

    @Autowired
    private OpenTestingConversion conversion;

    @ApiOperation(value = "upload test case (please upload required files first)")
    @PostMapping(value = "/test", consumes = MediaType.ALL_VALUE)
    public ResponseEntity<String> testupload(@RequestBody String testcaseStr, HttpServletResponse response) {
        try {
            //create DTO
            TestCaseDTO testcase = conversion.json2object(testcaseStr, TestCaseDTO.class);

            //schedule
            String result = testScheduler.scheduleTest(testcase);
            log.info("##### upload ##### test case "+testcase.getTestid()+" planned: "+result);

            return new ResponseEntity<String>(result, HttpStatus.OK);
        } catch (Exception e) {
            log.error("upload test case failed", e);
            return new ResponseEntity<String>(e.getClass().getName()+": "+e.getMessage(), HttpStatus.resolve(500));
        }
    }

    @ApiOperation(value = "upload file for a test case")
    @PostMapping(value = "/file/{testid}/{filename}", consumes = MediaType.ALL_VALUE)
    public ResponseEntity<String> fileupload(@RequestBody String content,
            @ApiParam(value = "testid ID test case") @PathVariable String testid,
            @ApiParam(value = "filename name of the file") @PathVariable String filename,
            HttpServletResponse response) {

        try {    
            //store    
            String result = fileManager.storeFile(testid, filename, content);
            log.info("##### upload ##### file "+testid+"/"+filename+" stored: "+result);

            return new ResponseEntity<String>(result, HttpStatus.OK);
        } catch (Exception e) {
            log.error("upload test case failed", e);
            return new ResponseEntity<String>(e.getClass().getName()+": "+e.getMessage(), HttpStatus.resolve(500));
        }
    }

    @ApiOperation(value = "remove test case")
    @DeleteMapping(value = "/test/{testid}", consumes = MediaType.ALL_VALUE)
    public ResponseEntity<String> testremoval(@ApiParam(value = "testid ID test case") @PathVariable String testid,
            HttpServletResponse response) {
        try {

            //remove
            String result = testManager.removeTest(testid);
            log.info("##### upload ##### test case "+testid+" removed: "+result);

            return new ResponseEntity<String>(result, HttpStatus.OK);
        } catch (Exception e) {
            log.error("remove test case failed", e);
            return new ResponseEntity<String>(e.getClass().getName()+": "+e.getMessage(), HttpStatus.resolve(500));
        }
    }

}