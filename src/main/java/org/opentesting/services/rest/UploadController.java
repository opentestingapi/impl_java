package org.opentesting.services.rest;

import java.time.LocalDateTime;
import java.util.List;

import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.api0dot1.TestCaseDTOapi0dot1;
import org.opentesting.dto.api1.TestCaseDTOapi1;
import org.opentesting.dto.migration.TestCaseDTOMigration;
import org.opentesting.services.execution.TestManager;
import org.opentesting.services.execution.TestScheduler;
import org.opentesting.services.jsonvalidation.JsonValidator;
import org.opentesting.util.ApplicationContextProvider;
import org.opentesting.util.MappingHelper;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.exceptions.MigrationException;
import org.opentesting.util.exceptions.ValidationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
@RequestMapping("/upload")
public class UploadController {

    private TestManager testManager;

    private TestScheduler testScheduler;

    private TestCaseDTOMigration testCaseDTOMigration;

    private OpenTestingConversion openTestingConversion;

    private JsonValidator jsonValidator;

    public UploadController(ApplicationContextProvider applicationContextProvider) {
        testManager = applicationContextProvider.getBean(TestManager.class);
        testScheduler = applicationContextProvider.getBean(TestScheduler.class);
        testCaseDTOMigration = applicationContextProvider.getBean(TestCaseDTOMigration.class);
        openTestingConversion = applicationContextProvider.getBean(OpenTestingConversion.class);
        jsonValidator = applicationContextProvider.getBean(JsonValidator.class);
    }    

    @Operation(summary = "upload test case (please upload required files first), application/json")
    @PostMapping(value = "/test", 
                consumes = { MediaType.APPLICATION_JSON_VALUE }, 
                produces = MediaType.TEXT_PLAIN_VALUE)
    public ResponseEntity<String> testupload(@RequestBody String testcaseStr, HttpServletResponse response) {
        try {
            // YML & JSON Support
            testcaseStr = MappingHelper.jsonOrYmlToJson(testcaseStr);

            //create DTO and migrate
            TestCaseDTO testcase = null; 
            boolean migratedFrom0dot1 = false;     
            if (!testcaseStr.contains("testapi")) {
                //Version 0.1
                migratedFrom0dot1 = true;
                testcase = testCaseDTOMigration.toLatest(TestCaseDTOapi0dot1.class, testcaseStr);                
            }

            //API Version 1.0
            if (testcaseStr.replace(" ", "").contains("testapi\":\"1.0\"")) {
                List<String> validations = jsonValidator.validateSchema(testcaseStr, "OpenTestApiSchema_v1.0.json", true);
                if (!validations.isEmpty()) {
                    throw new ValidationException(OpenTestingConversion.toString(validations, "; "));
                }
                testcase = testCaseDTOMigration.toLatest(TestCaseDTOapi1.class, testcaseStr);
            }

            //API Version 1.1
            if (testcaseStr.replace(" ", "").contains("testapi\":\"1.1\"")) {
                List<String> validations = jsonValidator.validateSchema(testcaseStr, "OpenTestApiSchema_v1.1.json", true);
                if (!validations.isEmpty()) {
                    throw new ValidationException(OpenTestingConversion.toString(validations, "; "));
                }
                testcase = testCaseDTOMigration.toLatest(TestCaseDTOapi1.class, testcaseStr);
            }

            if (testcase == null) {
                throw new MigrationException("version unknown - you might want to use: testapi\":\"1.1\"");
            }

            if (testcase.getId() == null) {
                throw new ValidationException("id is mandatory");
            }

            String testcasestr = openTestingConversion.object2json(testcase);

            //schedule
            testcase.setUploadts(LocalDateTime.now());
            String result = testScheduler.scheduleTest(testcase);
            log.info("##### upload ##### test case "+testcase.getId()+" planned: "+result);

            //attach test case
            StringBuilder testjson = new StringBuilder();
            testjson.append("your test case:\n"+testcasestr);

            //migration hint
            if (migratedFrom0dot1) {
                testjson.append("\n");
                testjson.append("\nPlease DO use the new migrated test case instead of your old one!");
                testjson.append("\nPlease DO check your replacements, regex might be incorrectly migrated!");
            }

            return new ResponseEntity<>(testjson.toString() + "\n\n" + result, HttpStatus.OK);
        } catch (Exception e) {
            log.error("upload test case failed", e);
            return new ResponseEntity<>(e.getClass().getName()+": "+e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
    @Operation(summary = "upload file for a test case")
    @PostMapping(value = "/file/{testid}/{filename}", 
                consumes = { MediaType.APPLICATION_JSON_VALUE, MediaType.TEXT_PLAIN_VALUE }, 
                produces = MediaType.TEXT_PLAIN_VALUE)
    public ResponseEntity<String> fileupload(@RequestBody String content,
            @Parameter(description = "testid ID test case") @PathVariable String testid,
            @Parameter(description = "filename name of the file") @PathVariable String filename,
            HttpServletResponse response) {

        try {    
            //store            
            testManager.storeFile(testid, filename, content);
            String result = testid+" - "+filename+" stored";
            log.info("##### upload ##### file "+testid+"/"+filename+" stored: "+result);

            return new ResponseEntity<>(result, HttpStatus.OK);
        } catch (Exception e) {
            log.error("upload test case failed", e);
            return new ResponseEntity<>(e.getClass().getName()+": "+e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @Operation(summary = "remove test case")
    @DeleteMapping(value = "/test/{testid}", produces = MediaType.TEXT_PLAIN_VALUE)
    public ResponseEntity<String> testremoval(@Parameter(description = "testid ID test case") @PathVariable String testid,
            HttpServletResponse response) {
        try {

            //remove
            String result = testManager.removeTest(testid);
            log.info("##### upload ##### test case "+testid+" removed: "+result);

            return new ResponseEntity<>(result, HttpStatus.OK);
        } catch (Exception e) {
            log.error("remove test case failed", e);
            return new ResponseEntity<>(e.getClass().getName()+": "+e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

}