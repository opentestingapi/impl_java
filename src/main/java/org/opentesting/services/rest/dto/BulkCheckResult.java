package org.opentesting.services.rest.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseInjectionDTO;

import lombok.Getter;
import lombok.Setter;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * bulk check result object
 */
@Getter
@Setter
@JsonPropertyOrder({ "bulkid", "error", "percentage", "all", "success", "open", "failed", "mandatorySuccess", "allSuccess",
        "targetts", "checks" }) //make it more readable in browser
public class BulkCheckResult {

    private String bulkid;
    private String error;

    private long all = 0;
    private long success = 0;
    private long open = 0;
    private long failed = 0;

    private boolean mandatorySuccess = true;
    private boolean allSuccess = true;

    private LocalDateTime targetts = null;

    //need to place at the end of the json file
    private List<TestCaseInjectionDTO> injections = new ArrayList<>();
    private List<TestCaseCheckDTO> checks = new ArrayList<>();    

    @JsonProperty("percentage")
    public double getPercentage() {
        double percentage = (((double)this.success + (double)this.failed) / this.all)*100;
        return Math.round(percentage)/(double)100;
    }

    /**
     * add check
     * @param check TestCaseCheckDTO
     */
    public void addCheck(TestCaseCheckDTO check) {

        //increase counter
        this.all++;
        if (check.getSuccess() == null) {
            this.open++;
        } else {
            if (check.getSuccess()) this.success++;
            else this.failed++;
        }

        //set flags
        if (check.getSuccess() == null || !check.getSuccess()) {
            this.allSuccess = false;
            if (check.isMandatory()) this.mandatorySuccess = false;
        }

        //set max target ts for open ones
        if (check.getTargetts() != null && check.getSuccess() == null
            && (this.targetts == null || check.getTargetts().isAfter(this.targetts))) {
                this.targetts = check.getTargetts();
        }

        //add check
        this.checks.add(check);
    }

}