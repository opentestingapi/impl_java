package org.opentesting.services.lock;

import org.cache2k.Cache;
import org.cache2k.Cache2kBuilder;
import org.springframework.stereotype.Component;
import org.opentesting.util.ApplicationContextProvider;
import org.opentesting.util.OpenTestingConfig;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

//need to handle locked connections...
@Component
public class Lock {

    private OpenTestingConfig openTestingConfig;

    public Lock(ApplicationContextProvider applicationContextProvider) {
        openTestingConfig = applicationContextProvider.getBean(OpenTestingConfig.class);

        //define cache with 12 hours expiry (unavailability system and so on)
        locks = Cache2kBuilder.of(String.class, String.class)
                .expireAfterWrite(12, TimeUnit.HOURS)
                .build();
    }

    //need to store failed connectors to avoid user locks
    private Cache<String,String> locks;

    /**
     * add lock to cache if enabled
     */
    public void addLock(String lock) {
        if (openTestingConfig.isUselock()) this.locks.put(lock, lock);
    }

    /**
     * remove lock starting with
     */
    public void removeLocksStartingWith(String lockprefix) {
        List<String> toRemove = new ArrayList<>();
        for (String key : this.locks.keys()) {
            if (key.startsWith(lockprefix)) toRemove.add(key);
        }
        for (String key : toRemove) {
            this.locks.remove(key);
        }
    }

    /**
     * check if locks already set
     */
    public boolean isLock(String lock) {
        return this.locks.get(lock) != null;
    }

}
