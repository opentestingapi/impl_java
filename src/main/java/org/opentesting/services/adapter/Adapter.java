package org.opentesting.services.adapter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.opentesting.dto.ResponseDTO;
import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseCustomParameterDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.TestCaseDataExtractionDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.TestCaseRandomDataDTO;
import org.opentesting.dto.TestCaseServiceDTO;
import org.opentesting.dto.TestCaseValidationDTO;
import org.opentesting.services.encryption.Encryption;
import org.opentesting.services.execution.TestAbstractHandler;
import org.opentesting.services.jsonvalidation.JsonValidator;
import org.opentesting.services.jwt.JwtReceiver;
import org.opentesting.services.lock.Lock;
import org.opentesting.services.random.RandomData;
import org.opentesting.util.OpenTestingConfig;
import org.opentesting.util.exceptions.NotFoundException;
import org.opentesting.util.exceptions.ValidationException;
import org.opentesting.util.LogExecutionTime;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.dataformat.javaprop.JavaPropsMapper;

import org.springframework.beans.factory.annotation.Autowired;

import lombok.extern.slf4j.Slf4j;

/**
 * abstract class to be used by every technology-specific implementation
 */
@Slf4j
public abstract class Adapter extends TestAbstractHandler {

    private static final String CHECKFAILED = "check failed:\n";
    private static final String EXPECTED = "<\n expected: >";
    private static final String TARGETEMPTY = " target is empty! IGNORED";

    @Autowired
    protected OpenTestingConfig openTestingConfig;

    @Autowired
    private JwtReceiver jwtReceiver;

    @Autowired
    private Encryption encryption;

    @Autowired
    private Lock lock;

    @Autowired
    private RandomData randomData;

    @Autowired
    private JsonValidator jsonValidator;

    /**
     * used service name in test definition
     */
    public abstract String getServicename(); 

    /**
     * inject data into your adapter
     */
    public abstract boolean inject(String testid, TestCaseInjectionDTO inject);

    /**
     * execute check within your adapter
     */
    public abstract boolean check(String testid, TestCaseCheckDTO check, Object... args);

    /**
     * create required components to execute the checks
     */
    public abstract void createRequiredComponents(TestCaseDTO test);

    /**
     * create required timers at startup, default off
     */
    public List<String> getRequiredTimerCrons() {
        return new ArrayList<>();
    }

    /**
     * defines if timer should validate age only (default: false)
     */
    public boolean timerValidateAgeOnly() {
        return false;
    }

    /**
     * pause method could be overridden
     * @param byLabel
     */
    public void pause(boolean value, String byLabel) { }

    /**
     * service alias method could be overridden
     */
    public List<String> getServicenameAlias() {
        return new ArrayList<>();
    }

    /**
     * service alias method could be overridden
     */
    public List<String> getAllServicenames() {
        List<String> res = new ArrayList<>(getServicenameAlias());
        res.add(this.getServicename());
        return res;
    }    

    /**
     * read file from internal store and replace placeholders with random data
     * @param testid test case ID
     * @param filename filename
     * @param randomdata random data store
     * @return file content
     * @throws NotFoundException
     */
    protected String getFileAndAddTestData(String testid, String filename, TestCaseRandomDataDTO randomdata) throws NotFoundException {                
        return randomData.addRandomData(this.getFile(testid, filename), randomdata);
    }

    /**
     * inject random data into content
     * @param data content
     * @param randomdata random data store
     * @return content
     */
    protected String addRandomData(String data, TestCaseRandomDataDTO randomdata) {                
        return randomData.addRandomData(data, randomdata);
    }

    /**
     * check if checks contain 1 of a list of services
     * @param test test case
     * @param services service names
     * @return existence
     */
    protected boolean doChecksContainServices(TestCaseDTO test, List<String> services) {
        if (test.getChecks() != null) {
            for (TestCaseCheckDTO check : test.getChecks()) {
                if (services.contains(check.getService().getType())) return true;
            }
        }
        return false;
    }

    /**
     * create connection key
     */
    protected String createConnectionKey(String testid, String connectstring, String connectuser, String connectpassword) {
        //test id at the beginning - this is used to remove blocks
        return testid+"#"+connectstring+"#"+connectuser+"#"+connectpassword;
    }    

    /**
     * create the headers map
     * @throws NotFoundException
     */
    @LogExecutionTime
    protected Map<String,String> getHeaders(String testid, String header, TestCaseRandomDataDTO randomdata,
                                            TestCaseServiceDTO service) throws JsonProcessingException, NotFoundException {

        Map<String,String> headerMap = new HashMap<>();
        
        //check if there is a header file
        if (header != null && header.length() > 0) {

            //read the file and replace random data
            String headers = this.getFileAndAddTestData(testid, header, randomdata);

            //parse the JSON
            TypeReference<Map<String,String>> ref = new TypeReference<Map<String,String>>() {};
            Map<String,String> headersmap = openTestingConversion.json2object(headers, ref);

            //replace connectuser and connectpassword
            for (Map.Entry<String,String> entry : headersmap.entrySet()) {
                headerMap.put(entry.getKey(), replaceCustomAndUsernamePassword(entry.getValue(), service));
            }            
        }       

        return headerMap;
    }

    /**
     * replace our placeholders
     */
    protected String replaceCustomAndUsernamePassword(String input, TestCaseServiceDTO service) {
        input = replace("username", service.getUsername(), input);
        input = replace("password", service.getPassword(), input);
        for (TestCaseCustomParameterDTO custom : service.getCustom()) {
            input = replace(custom.getKey(), custom.getStringValue(), input);
        }
        return input;
    }

    /**
     * replace #key# in content with decrypted value
     * @param key key
     * @param value value (can be encrypted)
     * @param content content
     * @return content
     */
    private String replace(String key, String value, String content) {
        if (value != null) return content.replace("#"+key+"#", decryptPassword(value));
        return content.replace("#"+key+"#", "");
    }

    /**
     * add jwt token if required
     */
    @LogExecutionTime
    public Map<String,String> addJwt(String testid, TestCaseServiceDTO service, 
            Map<String,String> headerMap, String key, String prefix) {
                
        String jwtPost = service.getCustom("jwtpost").getStringValue();
        String jwtParam = service.getCustom("jwtparam").getStringValue();
        String jwtHeader = service.getCustom("jwtheader").getStringValue();

        //replace placeholders like #jwtpassword# and #jwtusername#
        for (TestCaseCustomParameterDTO custom : service.getCustom()) {            
            jwtPost = replace(custom.getKey(), custom.getStringValue(), jwtPost);
            jwtParam = replace(custom.getKey(), custom.getStringValue(), jwtParam);
            jwtHeader = replace(custom.getKey(), custom.getStringValue(), jwtHeader);            
        }

        //do auth
        if (jwtPost != null && jwtPost.length() > 0) {            
            //Authorization: "Bearer <insert_your_JWT_here>"
            String token = jwtReceiver.requestToken(testid, jwtPost, jwtParam, jwtHeader);
            if (token != null) {
                headerMap.put(key, prefix + token);
            }
        }

        return headerMap;
    }

    /**
     * add JSON result to random data
     * @param testid test ID
     * @param check check
     * @param randomdata random data
     * @param response json
     * @return random data
     */
    @LogExecutionTime
    public TestCaseRandomDataDTO addCheckDataextraction(String testid, TestCaseCheckDTO check, TestCaseRandomDataDTO randomdata, ResponseDTO response) {
        if (check.getDataextraction() != null && !check.getDataextraction().isEmpty()) {
            //add data using the clean check id
            randomdata = addDataextraction(testid, check.getCheckid(), randomdata,
                    response, check.getDataextraction());
        }
        return randomdata;
    }

    /**
     * add JSON result to random data
     * @param testid test ID
     * @param randomdata random data
     * @param response json
     * @return random data
     */
    @LogExecutionTime
    public TestCaseRandomDataDTO addInjectDataextraction(String testid, TestCaseInjectionDTO injection, TestCaseRandomDataDTO randomdata, ResponseDTO response) {
        if (injection.getDataextraction() != null && !injection.getDataextraction().isEmpty()) {
            //add data using the inject id
            randomdata = addDataextraction(testid, injection.getInjectid(), randomdata,
                    response, injection.getDataextraction());
        }
        return randomdata;
    }

    /**
     * use regex on data extraction
     * @param extract extract definition
     * @param data original data
     * @return regex cleaned data
     */
    protected String getValueDataextraction(TestCaseDataExtractionDTO extract, Object data, String testid) {
        if (extract.getTarget() == null || extract.getTarget().isEmpty()) {
            log.warn(testid+ " " + extract.getAttribute() + TARGETEMPTY);
            return "";
        }
        if (extract.getRegex() == null || extract.getRegex().isEmpty()) return ""+data;
        Pattern pattern = Pattern.compile(extract.getRegex());        
        Matcher matcher = pattern.matcher(""+data);
        if (matcher.find()) return matcher.group();
        return "";
    }

    /**
     * internally add values to random data
     * @param testid test ID
     * @param id check or inject ID
     * @param randomdatadto random data
     * @param response json
     * @return random data
     */
    private TestCaseRandomDataDTO addDataextraction(String testid, String id, TestCaseRandomDataDTO randomdatadto,
        ResponseDTO response, List<TestCaseDataExtractionDTO> extracts) {
        try {
            //parse using properties logic
            List<String> foundOnes = new ArrayList<>();
            JavaPropsMapper mapper = new JavaPropsMapper();
            Properties jsonPayload = mapper.writeValueAsProperties(openTestingConversion.json2JsonNode(response.getPayload()));         
            processDataextracts(extracts, jsonPayload, foundOnes, randomdatadto, response, testid);

            //parse JSON to use simple recursive logic
            Map<String,TestCaseDataExtractionDTO> openOnes = new HashMap<>();
            for (TestCaseDataExtractionDTO de : extracts) {
                if (!foundOnes.contains(de.getAttribute())) openOnes.put(de.getAttribute(), de);
            }

            Map<String, Object> jsonMap = openTestingConversion.json2Map(response.getPayload());           
            randomdatadto = checkRecursive(jsonMap, openOnes, randomdatadto, testid);

            //user hint
            if (!openOnes.isEmpty()) {
                printUserHint(testid, id, jsonPayload, response, openOnes);  
            }

        } catch (Exception e) {
            log.warn(testid+"."+id+" cannot add result to random data: "+e.getMessage(), e);
        }
        
        return randomdatadto;
    }

    /**
     * extract data from property map and headers
     */
    private void processDataextracts(List<TestCaseDataExtractionDTO> extracts, Properties jsonPayload, List<String> foundOnes,
        TestCaseRandomDataDTO randomdatadto, ResponseDTO response, String testid) {
        for (TestCaseDataExtractionDTO de : extracts) {                
            if (de.getSource().equals(TestCaseDataExtractionDTO.SOURCE_PAYLOAD) && jsonPayload.containsKey(de.getAttribute())) {
                foundOnes.add(de.getAttribute());                
                randomdatadto.add(de.getTarget(), getValueDataextraction(de, jsonPayload.get(de.getAttribute()), testid));                 
            }
            if (de.getSource().equals(TestCaseDataExtractionDTO.SOURCE_HEADER) && response.getHeader().containsKey(de.getAttribute())) {
                foundOnes.add(de.getAttribute());                
                randomdatadto.add(de.getTarget(), getValueDataextraction(de, response.getHeader(de.getAttribute()), testid));   
            }
        }
    }

    /**
     * print user hint about not found keys and available ones
     */
    private void printUserHint(String testid, String id, Properties jsonPayload, ResponseDTO response, Map<String,TestCaseDataExtractionDTO> openOnes) {
        log.info(testid+"."+id+" not found keys: "+openOnes.keySet());
        if (jsonPayload.stringPropertyNames() != null) {
            List<String> keys = new ArrayList<>(jsonPayload.stringPropertyNames());  
            Collections.sort(keys);          
            log.info(testid+"."+id+" here are the available payload keys: "+keys);
        }
        if (response.getHeader().keySet() != null) {
            List<String> keys = new ArrayList<>(response.getHeader().keySet());       
            //sort will fail because of null values        
            log.info(testid+"."+id+" here are the available header keys: "+keys);
        }     
    }

    @SuppressWarnings("unchecked")
    private TestCaseRandomDataDTO checkRecursive(Map<String, Object> jsonMap, Map<String,TestCaseDataExtractionDTO> extracts, TestCaseRandomDataDTO randomdatadto, String testid) {

        //add data
        for (Map.Entry<String, Object> entry : jsonMap.entrySet()) {
            if (!(entry.getValue() instanceof Map)) {
                if (extracts.keySet().contains(entry.getKey())) {
                    if (randomdatadto == null) {
                        randomdatadto = new TestCaseRandomDataDTO();
                        randomdatadto.setDatamap(new HashMap<>());
                    }
                    TestCaseDataExtractionDTO extract = extracts.get(entry.getKey());                    
                    randomdatadto.add(extract.getTarget(), getValueDataextraction(extract, entry.getValue(), testid));
                }
            } else {
                //recursion
                randomdatadto.addAll(checkRecursive((Map<String, Object>)entry.getValue(), extracts, randomdatadto, testid).getDatamap());
            }
        }

        return randomdatadto;
    }

    /**
     * decrypt password
     */
    protected String decryptPassword(String password) {
        return encryption.decrypt(password);
    }

    /**
     * add failed Connector to cache
     */
    protected void addFailedConnector(String connector) {
        lock.addLock(connector);
    }

    /**
     * remove failed Connector starting with
     */
    protected void removeFailedConnectorStartingWith(String connectorprefix) {
        lock.removeLocksStartingWith(connectorprefix);
    }

    /**
     * check if connector already failed
     */
    protected boolean isFailedConnector(String connector) {
        return lock.isLock(connector);
    }

    /**
     * check adapter result using the validation objects
     * @return check successful or not
     * @throws NotFoundException
     * @throws ValidationException
     * @throws JsonProcessingException
     */
    protected boolean validateResult(String testid, TestCaseCheckDTO check, TestCaseValidationDTO validation, ResponseDTO result, 
        String logInfo, boolean dolog) throws NotFoundException, ValidationException, JsonProcessingException {

        boolean retvalue = true;

        switch (validation.getType()) {
            case TestCaseValidationDTO.TYPE_CONTAINS:    
                if (!validateContains(testid, check, validation, result, dolog)) retvalue = false;
                break;
            case TestCaseValidationDTO.TYPE_EQUALS:
                if (!validateEquals(testid, check, validation, result, dolog)) retvalue = false;
                break;
            case TestCaseValidationDTO.TYPE_CONTAINSNOT:
                if (!validateContainsNot(testid, check, validation, result, dolog)) retvalue = false;
                break; 
            case TestCaseValidationDTO.TYPE_CONTAINSONEOF:
                retvalue = false;
                if (!validateContainsOneOf(testid, check, validation, result)) retvalue = true;
                break;   
            case TestCaseValidationDTO.TYPE_REGEX:                
                if (!validateRegex(testid, check, validation, result, dolog)) retvalue = false;
                break; 
            case TestCaseValidationDTO.TYPE_JSONSCHEMA:                
                if (!validateJsonSchema(testid, check, validation, result, dolog)) retvalue = false;
                break;
            default:
                log.warn("unknown type: >"+validation.getType()+"<");             
        }

        //add data extraction attributes
        check.setRandomdata(this.addCheckDataextraction(testid, check, check.getRandomdata(), result));

        //check failed
        if (!retvalue) log.info(CHECKFAILED+logInfo);

        return retvalue;
    }

    private boolean validateContains(String testid, TestCaseCheckDTO check, TestCaseValidationDTO validation, 
        ResponseDTO result, boolean dolog) throws NotFoundException {
        for (String response : validation.getResponse()) {
            String expected = this.getFileAndAddTestData(testid, response, check.getRandomdata());
            if (!result.getPayload().contains(expected)) {                
                if (dolog) log.info(testid+"."+check.getInstanceid()+" validateContains:\n actual: >"+result.getPayload()+EXPECTED+expected+"<");
                return false;
            }
        }
        return true;
    }

    private boolean validateEquals(String testid, TestCaseCheckDTO check, TestCaseValidationDTO validation, 
        ResponseDTO result, boolean dolog) throws NotFoundException {
        for (String response : validation.getResponse()) {
            String expected = this.getFileAndAddTestData(testid, response, check.getRandomdata());
            if (!result.getPayload().equals(expected)) {                
                if (dolog) log.info(testid+"."+check.getInstanceid()+" equals:\n actual: >"+result.getPayload()+EXPECTED+expected+"<");
                return false;
            }
        }
        return true;
    }

    private boolean validateContainsNot(String testid, TestCaseCheckDTO check, TestCaseValidationDTO validation, 
        ResponseDTO result, boolean dolog) throws NotFoundException {
        for (String response : validation.getResponse()) {
            String expected = this.getFileAndAddTestData(testid, response, check.getRandomdata());
            if (result.getPayload().contains(expected)) {                
                if (dolog) log.info(testid+"."+check.getInstanceid()+" contains not:\n actual: >"+result.getPayload()+EXPECTED+expected+"<");
                return false;
            }
        }
        return true;
    }

    private boolean validateRegex(String testid, TestCaseCheckDTO check, TestCaseValidationDTO validation, 
        ResponseDTO result, boolean dolog) throws NotFoundException {
        for (String response : validation.getResponse()) {
            String regex = this.getFileAndAddTestData(testid, response, check.getRandomdata());

            //escape the brackets
            regex = regex.replace("}", "\\}");
            regex = regex.replace("{", "\\{");
            regex = regex.replace(")", "\\)");
            regex = regex.replace("(", "\\(");
            regex = regex.replace("]", "\\]");
            regex = regex.replace("[", "\\[");

            Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);
            Matcher matcher = pattern.matcher(result.getPayload());
            if (!matcher.matches()) {          
                if (dolog) log.info(testid+"."+check.getInstanceid()+" regex:\n actual: >"+result.getPayload()+EXPECTED+regex+"<");
                return false;
            }
        }
        return true;
    }

    private boolean validateContainsOneOf(String testid, TestCaseCheckDTO check, TestCaseValidationDTO validation, 
        ResponseDTO result) throws NotFoundException {
        for (String response : validation.getResponse()) {
            String expected = this.getFileAndAddTestData(testid, response, check.getRandomdata());
            if (result.getPayload().contains(expected)) return true;
        }
        return false;
    }

    private boolean validateJsonSchema(String testid, TestCaseCheckDTO check, TestCaseValidationDTO validation, 
        ResponseDTO result, boolean dolog) throws NotFoundException, ValidationException {
        for (String response : validation.getResponse()) {
            String schema = this.getFileAndAddTestData(testid, response, check.getRandomdata());

            List<String> findings = jsonValidator.validateSchema(result.getPayload(), schema, false);
            if (!findings.isEmpty()) {                
                if (dolog) log.info(testid+"."+check.getInstanceid()+" jsonschema:\n actual: >"+result.getPayload()+EXPECTED+schema+"<\n"+findings);
                return false;
            }
        }
        return true;
    }

    /**
     * sort validations by order
     * @return sorted list
     */
    public List<TestCaseValidationDTO> sortValidations(List<TestCaseValidationDTO> input) {
        Collections.sort(input, (a, b) -> Integer.valueOf(a.getOrder()).compareTo(Integer.valueOf(b.getOrder())));
        return input;
    }

    /**
     * get Integer from String input, default is 0
     * @param input String input
     * @return Integer
     */
    protected Integer getInteger(String input) {
        if (input == null || input.isEmpty()) return 0;
        return Integer.parseInt(input);
    }

}