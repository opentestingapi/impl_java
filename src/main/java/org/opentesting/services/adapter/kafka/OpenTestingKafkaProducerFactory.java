package org.opentesting.services.adapter.kafka;

import java.util.Properties;
import java.util.Set;

import org.opentesting.dto.TestCaseCustomParameterDTO;
import org.opentesting.dto.TestCaseServiceDTO;
import org.opentesting.services.encryption.Encryption;
import org.opentesting.util.LogExecutionTime;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import brave.kafka.clients.KafkaTracing;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class OpenTestingKafkaProducerFactory {

    private static final String SECURITY_PROTOCOL = "security.protocol";
    private static final String SASL_MECHANISM = "sasl.mechanism";

    @Autowired
    private Encryption encryption;

    @Autowired
    private KafkaTracing kafkaTracing;

    @Value("${kafka.reconnect.backoff.max.ms}")
    private int reconnectBackoffMaxMs;

    @Value("${kafka.reconnect.backoff.ms}")
    private int reconnectBackoffMs;

    @LogExecutionTime
    public Producer<Object,Object> createProducer(String testid, TestCaseServiceDTO service) {        

        //default properties
        Properties props = new Properties();        
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, service.getConnectstring());
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        props.put(ProducerConfig.RECONNECT_BACKOFF_MS_CONFIG, reconnectBackoffMs);
        props.put(ProducerConfig.RECONNECT_BACKOFF_MAX_MS_CONFIG, reconnectBackoffMaxMs);

        //user and password
        if (service.getUsername() != null && service.getUsername().length() > 0) {
            props.put(SECURITY_PROTOCOL, service.getCustom(SECURITY_PROTOCOL).getValue());
            log.warn(testid+": using "+SECURITY_PROTOCOL+"="+service.getCustom(SECURITY_PROTOCOL).getValue());
            props.put(SASL_MECHANISM, service.getCustom(SASL_MECHANISM).getValue());
            log.warn(testid+": using "+SASL_MECHANISM+"="+service.getCustom(SASL_MECHANISM).getValue());
            String jassconfigPre = service.getCustom("login.module").getValue() + " required username=\"" + service.getUsername() 
            + "\" password=\"";
            props.put("sasl.jaas.config", jassconfigPre + encryption.decrypt(service.getPassword()) + "\";");
            log.warn(testid+": using sasl.jaas.config="+jassconfigPre + "***\";");
        }

        //override with custom ones
        Set<String> kapfaParameters = ProducerConfig.configNames();
        for (TestCaseCustomParameterDTO cust : service.getCustom()) {
            if (kapfaParameters.contains(cust.getKey())) { 
                log.warn(testid+": setting producer property "+cust.getKey()+"="+cust.getValue());
                props.put(cust.getKey(), cust.getValue()); 
            }            
        }         
        
        return kafkaTracing.producer(new KafkaProducer<>(props));
    }
    
}
