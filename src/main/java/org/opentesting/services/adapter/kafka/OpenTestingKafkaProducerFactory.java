package org.opentesting.services.adapter.kafka;

import java.util.Properties;

import org.opentesting.dto.TestCaseServiceDTO;
import org.opentesting.services.encryption.Encryption;
import org.opentesting.util.LogExecutionTime;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import brave.kafka.clients.KafkaTracing;

@Component
public class OpenTestingKafkaProducerFactory {

    @Autowired
    private Encryption encryption;

    @Autowired
    private KafkaTracing kafkaTracing;

    @LogExecutionTime
    public Producer<String,String> createProducer(TestCaseServiceDTO service) {        

        Properties props = new Properties();        
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, service.getConnectstring());
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);

        //user and password
        if (service.getUsername() != null && service.getUsername().length() > 0) {
            props.put("security.protocol", service.getCustom("security.protocol").getValue());
            props.put("sasl.mechanism", service.getCustom("sasl.mechanism").getValue());
            props.put("sasl.jaas.config", service.getCustom("login.module").getValue() + " required username=\"" + service.getUsername() 
                        + "\" password=\"" + encryption.decrypt(service.getPassword()) + "\";");
        }         
        
        return kafkaTracing.producer(new KafkaProducer<>(props));
    }
    
}
