package org.opentesting.services.adapter.kafka;

import java.util.HashMap;
import java.util.Map;

import org.opentesting.services.execution.TestManager;
import org.opentesting.services.prometheus.Prometheus;
import org.opentesting.util.LogExecutionTime;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.listener.ContainerProperties;
import org.springframework.kafka.listener.KafkaMessageListenerContainer;
import org.springframework.stereotype.Controller;

import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
public class OpenTestingKafkaConsumerFactory {

    @Autowired
    private TestManager testPlaner;

    @Autowired
    private Prometheus prometheus;

    private Map<String, KafkaMessageListenerContainer<String, String>> createdConsumers = new HashMap<>();

    @LogExecutionTime
    public void createConsumer(String connectstring, String broker, String topic, String connectuser, String connectpassword, Map<String,String> serviceparam) {
       
        String key = connectstring+"#"+connectuser;
        if (createdConsumers.containsKey(key)) {
            log.info("kafka consumer already exists: "+key);
            return;
        }

        //properties
        Map<String, Object> props = new HashMap<>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, broker);
        props.put(ConsumerConfig.GROUP_ID_CONFIG, serviceparam.get("group.id"));
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);        

        //user and password
        if (connectuser != null && connectuser.length() > 0) {
            props.put("security.protocol", serviceparam.get("security.protocol"));
            props.put("sasl.mechanism", serviceparam.get("sasl.mechanism"));
            props.put("sasl.jaas.config", serviceparam.get("login.module") + " required username=\"" + connectuser + "\" password=\"" + connectpassword + "\";");
        }
  
        //factory
        DefaultKafkaConsumerFactory<String, String> fact = new DefaultKafkaConsumerFactory<>(props);

        //consumer container
        ContainerProperties containerProps = new ContainerProperties(topic);
        containerProps.setMessageListener(new OpenTestingKafkaMessageListener(connectstring, connectuser, testPlaner, key, prometheus));
        KafkaMessageListenerContainer<String, String> container = new KafkaMessageListenerContainer<>(fact, containerProps);

        //start container
        container.start();

        //give it time to start
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            log.warn("sleep interrupted", e);
            // Restore interrupted state...
            Thread.currentThread().interrupt();
        }

        //store
        if (container.isRunning()) createdConsumers.put(key, container);
        log.info("KafkaConsumer created: "+key);
    }

    /**
     * stop consumers
     */
    @LogExecutionTime
    public void stopConsumers() {
        //parallel stop
        createdConsumers.values().parallelStream().forEach(
                con -> {
                    try {
                        con.stop();
                        log.info("KafkaConsumer stopped: "+con.toString());
                    } catch (Exception e) {
                        log.warn("cannot stop consumer", e);
                    }
                }
        );
    }

    /**
     * start consumers
     */
    @LogExecutionTime
    public void startConsumers() {
        //parallel start
        createdConsumers.values().parallelStream().forEach(
                con -> {
                    try {
                        con.start();
                        log.info("KafkaConsumer started: "+con.toString());
                    } catch (Exception e) {
                        log.warn("cannot start consumer", e);
                    }
                }
        );
    }

}