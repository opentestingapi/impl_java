package org.opentesting.services.adapter.kafka;

import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

/**
 * sometimes the consumer is to fast for result2random, as a workaround we will give a fixed "delay" to every message
 */
@Component
@Slf4j
public class DelayedSender {

    @SneakyThrows
    @Async
    public void sendWithDelay(Producer<String, String> producer, ProducerRecord<String, String> kafkarecord, long delay) {

        Thread.sleep(delay);

        // send synchronously
        Future<RecordMetadata> future = producer.send(kafkarecord);
        future.get(30, TimeUnit.SECONDS);

        log.info("kafkarecord produced");
    }
    
}
