package org.opentesting.services.adapter.kafka;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import com.fasterxml.jackson.core.JsonProcessingException;

import org.opentesting.dto.CheckResultDTO;
import org.opentesting.dto.ResponseDTO;
import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseServiceDTO;
import org.opentesting.dto.TraceDTO;
import org.opentesting.services.adapter.Adapter;
import org.opentesting.services.execution.TestCheck;
import org.opentesting.services.prometheus.Prometheus;
import org.opentesting.util.LogExecutionTime;
import org.opentesting.util.OpenTestingConversion;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.header.Header;
import org.springframework.dao.DataAccessException;
import org.springframework.kafka.listener.MessageListener;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class OpenTestingKafkaMessageListener implements MessageListener<String, String> {

    private static final String TOPIC = "topic";

    private String listenerid;
    private String testid;
    private TestCaseServiceDTO service;
    private TestCheck testCheck;
    private String key;
    private Prometheus prometheus;
    private Adapter adapter;    
    private KafkaTrace kafkatrace;

    public OpenTestingKafkaMessageListener(String testid, TestCaseServiceDTO service, TestCheck testCheck, String key, 
            Prometheus prometheus, Adapter adapter, KafkaTrace kafkatrace) {
        this.listenerid = UUID.randomUUID().toString();
        this.testid = testid;
        this.service = service;
        this.testCheck = testCheck;
        this.key = key;
        this.prometheus = prometheus;
        this.adapter = adapter; 
        this.kafkatrace = kafkatrace;       
    }

    @Override
    @LogExecutionTime
    public void onMessage(ConsumerRecord<String, String> data) {

        //read checks
        List<TestCaseCheckDTO> checks = getChecksByTestAndServiceAndTopic(testid, service); 

        //extract Trace info
        final TraceDTO trace = kafkatrace.extractTraceInfo(data);

        //create response object
        ResponseDTO response = new ResponseDTO(data.value());
        Iterator<Header> it = data.headers().iterator();
        while (it.hasNext()) {
            Header h = it.next();
            response.putHeader(h.key(), new String(h.value()));
        }

        //execute checks in parallel
        List<Boolean> results = checks.parallelStream().map(c -> {
            try {
                return testCheck.executeCheck(c, false, adapter, trace, response, Long.valueOf(data.timestamp()));
            } catch (InterruptedException ie) {
                log.error(testid+": Kafka - check execution exception: "+ie.getMessage(), ie);
                Thread.currentThread().interrupt();
                return null;
            } catch (Exception e) {
                log.error(testid+": Kafka - check execution exception: "+e.getMessage(), e);
                return null;
            }
        }).collect(Collectors.toList());

        //prepare result
        CheckResultDTO result = OpenTestingConversion.list2CheckResult(results);        

        //prometheus
        prometheus.incrementExecution("kafkaconsumer", service.getConnectstring()+"#"+service.getCustom(TOPIC).getStringValue()
                                        +"#"+service.getUsername());

        log.info("##### CHECK ##### kafka " + key + " ("+listenerid+"): total "+checks.size()+" / success "+result.getSuccess()
            +" / failed "+result.getFailed()+" / without "+result.getWithout());
    }    

    /**
     * get all checks for a service and connectstring
     * @throws JsonProcessingException
     * @throws DataAccessException
     */
    @LogExecutionTime
    public List<TestCaseCheckDTO> getChecksByTestAndServiceAndTopic(String testid, TestCaseServiceDTO service) {

        List<TestCaseCheckDTO> openKafkaChecks = new ArrayList<>();
        String topic = service.getCustom(TOPIC).getStringValue();

        //filter by topic
        try {
            for (TestCaseCheckDTO check : testCheck.getOpenChecks(testid, service)) {
                if (check.getService().getCustom(TOPIC).getStringValue().equals(topic)) {
                    openKafkaChecks.add(check);                    
                }
            }
        } catch (Exception e) {
            log.error("cannot read open Kafka checks", e);
        }

        return openKafkaChecks;
    }

}
