package org.opentesting.services.adapter.kafka;

import java.util.List;
import java.util.stream.Collectors;

import org.opentesting.dto.CheckResultDTO;
import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.persistence.TestCaseCheckRepository;
import org.opentesting.services.adapter.Adapter;
import org.opentesting.services.execution.TestCheck;
import org.opentesting.services.prometheus.Prometheus;
import org.opentesting.util.LogExecutionTime;
import org.opentesting.util.OpenTestingConversion;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.listener.MessageListener;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class OpenTestingKafkaMessageListener implements MessageListener<String, String> {

    private String connectstring;
    private String connectuser;
    private TestCheck testCheck;
    private String key;
    private Prometheus prometheus;
    private Adapter adapter;
    private TestCaseCheckRepository testCaseCheckRepository;

    public OpenTestingKafkaMessageListener(String connectstring, String connectuser, TestCheck testCheck, String key, 
            Prometheus prometheus, Adapter adapter, TestCaseCheckRepository testCaseCheckRepository) {
        this.connectstring = connectstring;
        this.connectuser = connectuser;
        this.testCheck = testCheck;
        this.key = key;
        this.prometheus = prometheus;
        this.adapter = adapter;
        this.testCaseCheckRepository = testCaseCheckRepository;
    }

    @Override
    @LogExecutionTime
    public void onMessage(ConsumerRecord<String, String> data) {

        //read checks
        List<TestCaseCheckDTO> checks = getChecksByServiceAndConnectstringAndOpen("kafka", connectstring, connectuser);

        //execute checks in parallel
        List<Boolean> results = checks.parallelStream().map(c -> {
            try {
                return testCheck.executeCheck(c, false, adapter, data.value(), Long.valueOf(data.timestamp()));
            } catch (Exception e) {
                log.error("Kafka - check execution exception: "+e.getMessage(), e);
                return null;
            }
        }).collect(Collectors.toList());

        //prepare result
        CheckResultDTO result = OpenTestingConversion.list2CheckResult(results);        

        //prometheus
        prometheus.incrementExecution("kafkaconsumer", connectstring+"#"+connectuser);

        log.info("##### CHECK ##### kafka " + key + ": total "+checks.size()+" / success "+result.getSuccess()
            +" / failed "+result.getFailed()+" / without "+result.getWithout());
    }

    /**
     * get all checks for a service and connectstring
     */
    @LogExecutionTime
    public List<TestCaseCheckDTO> getChecksByServiceAndConnectstringAndOpen(String service, String connectstring, String connectuser) {
        return testCaseCheckRepository.selectByServiceAndConnectstringAndOpen(service, connectstring, connectuser);
    }

}
