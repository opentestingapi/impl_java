package org.opentesting.services.adapter;

import java.util.List;

import org.opentesting.services.adapter.cassandra.Cassandra;
import org.opentesting.services.adapter.jdbc.Jdbc;
import org.opentesting.services.adapter.kafka.Kafka;
import org.opentesting.services.adapter.rest.Rest;
import org.opentesting.services.adapter.s3.S3;
import org.opentesting.util.ApplicationContextProvider;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

import javax.annotation.PostConstruct;

@Component
@Slf4j
public class AdapterResolver {

    private List<Adapter> adapters;

    public AdapterResolver(ApplicationContextProvider applicationContextProvider) {
        adapters = applicationContextProvider.getBeansForType(Adapter.class);
        //test fallback
        if (adapters.isEmpty()) {
            adapters.add(new Cassandra(applicationContextProvider));
            adapters.add(new Jdbc(applicationContextProvider));
            adapters.add(new Kafka(applicationContextProvider));
            adapters.add(new Rest(applicationContextProvider));
            adapters.add(new S3(applicationContextProvider));
        }  
    }

    @PostConstruct
    public void printAdapters() {
        try {
            for (Adapter adapt : adapters) {
                log.info("##### Adapter ##### "+adapt.getServicename());
            }
        } catch (Exception e) {
            log.error("cannot register adapters: "+e.getMessage(), e);
        }
    }

    /**
     * return a defined adapter by it's service name
     */
    public Adapter getAdapter(String adapter) {
        for (Adapter adapt : adapters) {
            if (adapt.getServicename().equals(adapter)) return adapt;
            //alias
            if (adapt.getServicenameAlias().contains(adapter)) return adapt;
        }
        log.warn("Adapter "+adapter+" not found");
        return null;
    }

    /**
     * return all available adapters
     */
    public List<Adapter> getAllAdapter() {
        return adapters;
    }
    
}
