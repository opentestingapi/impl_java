package org.opentesting.services.adapter.s3;

import com.amazonaws.ClientConfiguration;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.client.builder.AwsClientBuilder;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;
import java.nio.charset.StandardCharsets;

@Slf4j
public class S3Connector {

    @Getter
    private S3Config s3Config;

    private AmazonS3 s3Client = null;

    public S3Connector(S3Config s3Config) {
        this.s3Config = s3Config;

        //we can directly try to create a client for it
        init();
    }    

    public void init() {
        AWSCredentials credentials = new BasicAWSCredentials(s3Config.getAccessKey(), s3Config.getSecretAccessKey()); //NOSONAR - using a basic long-term access key for tests is fine
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setSignerOverride("AWSS3V4SignerType");

        String hostname = s3Config.getServiceEndpoint();
        if(!hostname.contains("http://")){
            hostname = "http://" + hostname;
        }
        
        s3Client = AmazonS3ClientBuilder
                .standard()
                .withEndpointConfiguration(
                        new AwsClientBuilder.EndpointConfiguration(
                                hostname, s3Config.getRegion()))
                .withPathStyleAccessEnabled(true)
                .withClientConfiguration(clientConfiguration)
                .withCredentials(new AWSStaticCredentialsProvider(credentials))
                .build();
    }

    /**
     * store file in S3
     * @param key filename
     * @param data content
     */
    public void store(String key, String data, String bucket) {        
        s3Client.putObject(bucket, key, data);
    }

    /**
     * read stored file content
     * @param key
     * @return
     */
    public String read(String key, String bucket) {
        try {
            S3Object s3object = s3Client.getObject(bucket, key);
            S3ObjectInputStream inputStream = s3object.getObjectContent();

            return new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
        } catch (IOException e) {
            log.error(e.getMessage());
        }
        return null;
    }

    /**
     * close the client
     */
    public void close() {
        s3Client.shutdown();
    }

}