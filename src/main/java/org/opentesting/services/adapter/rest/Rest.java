package org.opentesting.services.adapter.rest;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.TestCaseValidationDTO;
import org.opentesting.services.adapter.Adapter;
import org.opentesting.util.LogExecutionTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class Rest extends Adapter {

    @Autowired
    private RequestSender requestSender;    

    @Override
    public String getServicename() {
        return "rest";
    }

    @Override
    @LogExecutionTime
    public boolean inject(String testid, TestCaseInjectionDTO inject) {
        try {
            //connect info            
            String url = this.addRandomData(inject.getService().getConnectstring(), inject.getRandomdata());

            //header need replacement of connectuser, connectpassword, jwtuser, jwtpassword and randomdata
            Map<String, String> headerMap = this.getHeaders(testid, inject.getService().getCustom("header").getValue(), inject.getRandomdata(), inject.getService());

            //add jwt if required
            headerMap = this.addJwt(testid, inject.getService(), headerMap, "Authorization", "Bearer ");

            //send
            String response = null;
            boolean send = false;
            String type = inject.getService().getCustom("type").getValue();
            switch (type.toUpperCase()) {
                case "GET":
                    response = requestSender.send("GET", url, headerMap, null);
                    send = true;
                    break;
                case "POST":
                    //random data replacements for payload
                    String payload = this.getFileAndAddTestData(testid, inject.getSourcefile(), inject.getRandomdata());
                    //log.info(payload); 
                    response = requestSender.send("POST", url, headerMap, payload);
                    send = true;
                    break;
                default:
                    log.warn(type+" not found");
            }
            log.debug("response: "+response);

            //add result2random attributes
            inject.setRandomdata(this.addInjectResult2Random(testid, inject, inject.getRandomdata(), response));

            return send;
        } catch (Exception e) {
            log.error(testid+" "+inject.getInjectid()+" "+inject.getInjectinstanceid()+": inject failed", e);
            return false;
        }
    }    

    @Override
    @LogExecutionTime
    public boolean check(String testid, TestCaseCheckDTO check, Object... args) {
        try {
            //connect info             
            String url = this.addRandomData(check.getService().getConnectstring(), check.getRandomdata());

            //header need replacement of connectuser, connectpassword, jwtuser, jwtpassword and randomdata
            Map<String, String> headerMap = this.getHeaders(testid, check.getService().getCustom("header").getValue(), check.getRandomdata(), check.getService());
            
            //add jwt if required
            headerMap = this.addJwt(testid, check.getService(), headerMap, "Authorization", "Bearer ");

            boolean retvalue = true;
            String getResponse = null;

            //check all validations, sort first
            for (TestCaseValidationDTO validation : sortValidations(check.getValidations())) {

                //send
                String result = "no response";
                String sendInfo = url;
                String type = check.getService().getCustom("type").getValue();
                switch (type.toUpperCase()) {
                    case "GET":
                        //we will not execute the GET multiple times, as payload does not change
                        if (getResponse == null) getResponse = requestSender.send("GET", url, headerMap, null);                        
                        result = getResponse;
                        break;
                    case "POST":
                        //random data replacements for payload
                        String payload = this.getFileAndAddTestData(testid, validation.getRequest(), check.getRandomdata());
                        sendInfo = sendInfo + " " + payload;
                        //log.info(payload);
                        result = requestSender.send("POST", url, headerMap, payload);
                        break;                
                    default:
                        log.warn(type+" not found"); 
                }

                //do validation
                if (!validateResult(testid, check, validation, result, "Rest "+sendInfo)) {
                    retvalue = false;
                }
            }
         
            return retvalue;
        } catch (Exception e) {
            log.error(testid+" "+check.getCheckid()+" "+check.getCheckinstanceid()+": check failed", e);
            return false;
        }
    }   

    @Override
    @LogExecutionTime
    public void createRequiredComponents(TestCaseDTO test) {         
        //nothing to do   
    }   
    
    @Override
    @LogExecutionTime
    public List<String> getRequiredTimerCrons() {
        return Arrays.asList(openTestingConfig.getCheckcron());
    }
    
}
