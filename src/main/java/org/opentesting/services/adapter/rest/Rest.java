package org.opentesting.services.adapter.rest;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.TestCaseRandomDataDTO;
import org.opentesting.services.adapter.Adapter;
import org.opentesting.util.LogExecutionTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class Rest extends Adapter {

    @Autowired
    private RequestSender requestSender;    

    @Override
    public String getServicename() {
        return "rest";
    }

    @Override
    @LogExecutionTime
    public boolean inject(String testid, TestCaseInjectionDTO inject, TestCaseRandomDataDTO randomdata) {
        try {
            //connect info 
            Map<String,String> connection = this.toParameterMap(inject.getConnectstring());
            String url = this.addRandomData(connection.get("url"), randomdata);

            //serviceparam need replacement of connectuser, connectpassword, jwtuser, jwtpassword
            Map<String,String> serviceparam =
                this.replaceUserAndPassword(this.toParameterMap(inject.getServiceparam()), inject.getConnectuser(), inject.getConnectpassword(),
                    inject.getJwtuser(), inject.getJwtpassword());

            //header need replacement of connectuser, connectpassword, jwtuser, jwtpassword and randomdata
            Map<String,String> headerMap = this.getHeaders(testid, serviceparam.get("header"), randomdata,
                inject.getConnectuser(), inject.getConnectpassword(), inject.getJwtuser(), inject.getJwtpassword());

            //add jwt if required
            headerMap = this.addJwt(testid, serviceparam, headerMap, "Authorization", "Bearer ");

            //send
            String response = null;
            boolean send = false;
            switch (connection.get("type").toUpperCase()) {
                case "GET":
                    response = requestSender.send("GET", url, headerMap, null);
                    send = true;
                    break;
                case "POST":
                    //random data replacements for payload
                    String payload = this.readFileAndAddTestData(testid, inject.getSourcefile(), randomdata);
                    //log.info(payload); 
                    response = requestSender.send("POST", url, headerMap, payload);
                    send = true;
                    break;
                default:
                    log.warn("Adapter "+connection.get("type")+" not found");
            }
            log.debug("response: "+response);

            return send;
        } catch (Exception e) {
            log.error(testid+" "+inject.getInjectid()+": inject failed", e);
            return false;
        }
    }    

    @Override
    @LogExecutionTime
    public boolean check(TestCaseCheckDTO check, Object... args) {
        try {
            //connect info 
            Map<String,String> connection = this.toParameterMap(check.getConnectstring());
            String url = this.addRandomData(connection.get("url"), check.getRandomdata());

            //serviceparam need replacement of connectuser, connectpassword, jwtuser, jwtpassword
            Map<String,String> serviceparam =
                this.replaceUserAndPassword(this.toParameterMap(check.getServiceparam()), check.getConnectuser(), check.getConnectpassword(),
                    check.getJwtuser(), check.getJwtpassword());

            //header need replacement of connectuser, connectpassword, jwtuser, jwtpassword and randomdata
            Map<String,String> headerMap = this.getHeaders(check.getTestid(), serviceparam.get("header"), check.getRandomdata(),
                check.getConnectuser(), check.getConnectpassword(), check.getJwtuser(), check.getJwtpassword());
            
            //add jwt if required
            headerMap = this.addJwt(check.getTestid(), serviceparam, headerMap, "Authorization", "Bearer ");

            //send
            String result = "no response";
            String sendInfo = url;
            switch (connection.get("type").toUpperCase()) {
                case "GET":
                    result = requestSender.send("GET", url, headerMap, null);
                    break;
                case "POST":
                    //random data replacements for payload
                    String payload = this.readFileAndAddTestData(check.getTestid(), serviceparam.get("payload"), check.getRandomdata());
                    sendInfo = sendInfo + " " + payload;
                    //log.info(payload);
                    result = requestSender.send("POST", url, headerMap, payload);
                    break;                
                default:
                    log.warn("Adapter "+connection.get("type")+" not found"); 
            }
            
            //random data replacements
            String expected = this.readFileAndAddTestData(check.getTestid(), check.getExpectedfile(), check.getRandomdata());                  

            //expected result check
            boolean retvalue = false;
            switch (check.getExpectedtype()) {
                case "contains":
                    if (result.contains(expected)) retvalue = true;
                    break;
                case "equals":
                    if (result.equals(expected)) retvalue = true;
                    break;        
                default:
                    log.warn("unknown expected type: >"+check.getExpectedtype()+"<");                        
            }

            //add result2random attributes
            check.setRandomdata(this.addCheckResult2Random(check.getTestid(), check, check.getRandomdata(), result));

            //check failed
            if (!retvalue) log.info("Rest check result:\n"+sendInfo+"\n>"+result+"<\n>"+expected+"<");
            
            return retvalue;
        } catch (Exception e) {
            log.error(check.getTestid()+" "+check.getCheckid()+": check failed", e);
            return false;
        }
    }   

    @Override
    @LogExecutionTime
    public void createRequiredComponents(TestCaseDTO test) {         
        //nothing to do   
    }   
    
    @Override
    @LogExecutionTime
    public List<String> getRequiredTimerCrons() {
        return Arrays.asList(e2ETestConfig.getCheckcron());
    }
    
}
