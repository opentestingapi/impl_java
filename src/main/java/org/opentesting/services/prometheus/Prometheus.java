package org.opentesting.services.prometheus;

import java.lang.management.ManagementFactory;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.util.OpenTestingConversion;
import org.springframework.stereotype.Component;

import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Gauge;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Tag;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class Prometheus {

    public static final String concatenator = ".";
    public static final String listconcatenator = "|";
    private static final String prometheus_tests = "tests";
    private static final String prometheus_schedule = "schedule";
    private static final String prometheus_inject = "inject";
    private static final String prometheus_check = "check";
    private static final String prometheus_execution = "execution";

    //Prometheus Registry
    private MeterRegistry meterRegistry;
    private Map<String,Counter> createdCounter = new HashMap<>();  

    //create tests
    private Set<String> activatedtests = new HashSet<>();
    private Set<String> deactivatedtests = new HashSet<>();

    public Prometheus(MeterRegistry meterRegistry) {  
        this.meterRegistry = meterRegistry;

        //create gauge for test cases
        Gauge.builder("e2e"+concatenator+"gauge"+concatenator+prometheus_tests, activatedtests,
            myset -> myset.size())
            .tag("active","true")
            .description("Active Test Cases").register(meterRegistry);
        Gauge.builder("e2e"+concatenator+"gauge"+concatenator+prometheus_tests, deactivatedtests,
            myset -> myset.size())
            .tag("active","false")
            .description("Inactive Test Cases").register(meterRegistry);

        //create gauge for memory and cpu
        Gauge.builder("e2e"+concatenator+"gauge"+concatenator+"usedmemory", ManagementFactory.getMemoryMXBean(),
            mb -> mb.getHeapMemoryUsage().getUsed())        
            .description("Used Memory").register(meterRegistry);        
        Gauge.builder("e2e"+concatenator+"gauge"+concatenator+"maxmemory", ManagementFactory.getMemoryMXBean(),
            mb -> mb.getHeapMemoryUsage().getMax())
            .description("Max Memory").register(meterRegistry);    
        
    }    

    /**
     * return meter registry for test checks  
     */
    public MeterRegistry getMeterRegistry() {
        return this.meterRegistry;
    }

    /**
     * create a new counter if required
     */
    private Counter createCounter(String metric, Iterable<Tag> tags) {
        return Counter.builder("e2e"+concatenator+"counter"+concatenator+metric)   
                .tags(tags)          
                .description("Counter: "+metric)
                .register(meterRegistry);
    }

    /**
     * create the store key
     * @param key name of the metric
     * @param tags use tags
     * @return key
     */
    private String createStoreKey(String key, Iterable<Tag> tags) {
        StringBuffer buf = new StringBuffer();
        buf.append(key);
        for (Tag t : tags) buf.append("#"+t.getKey()+"#"+t.getValue());
        return buf.toString();
    }

    /**
     * increment counter
     * @param key key (used for the name)
     * @param increment long value to increment the value
     * @param tags tags
     */
    public void incrementCounter(String key, long increment, Iterable<Tag> tags) {

        //create unique store key
        String storekey = this.createStoreKey(key, tags);

        //get counter
        Counter c = this.createdCounter.get(storekey);

        //create counter if required
        if (c == null) {
            c = this.createCounter(key, tags);            
            log.info("Prometheus Counter created: "+storekey+", actual size of the map: "+this.createdCounter.size());
        }

        //increment
        c.increment(increment);

        //store
        this.createdCounter.put(storekey, c);
    }

    /**
     * increment counter
     * @param key key (used for the name)
     * @param increment long value to increment the value
     * @param tags tags in key=value format
     */
    public void incrementCounter(String key, long increment, String... tags) {

        //create tags
        List<Tag> tagsList = new ArrayList<>();
        for (String tag : tags) {
            String[] data = tag.split("=");            
            tagsList.add(Tag.of(data[0], data[1]));
        }

        //run default method
        this.incrementCounter(key, increment, tagsList);
    }    

    /**
     * increment execution
     */
    public void incrementExecution(String name, String type) {
        this.incrementCounter(prometheus_execution, 1, "name=_total", "type=_total");
        this.incrementCounter(prometheus_execution, 1, "name="+name, "type=_total");
        this.incrementCounter(prometheus_execution, 1, "name="+name, "type="+type);
    }

    /**
     * increment test metrics
     * @param test TestDTO
     */
    public void incrementTests(TestCaseDTO test) {  
        if (test.isActivation()) {
            this.activatedtests.remove(test.getTestid());
            this.activatedtests.add(test.getTestid());
            this.deactivatedtests.remove(test.getTestid());
        } else {
            this.activatedtests.remove(test.getTestid());
            this.deactivatedtests.remove(test.getTestid());
            this.deactivatedtests.add(test.getTestid());
        }        
    }

    /**
     * create labels list
     * @param labels labels to use
     * @return string representation
     */
    private String createLabels(List<String> labels) {
        return listconcatenator+OpenTestingConversion.toString(labels, listconcatenator)+listconcatenator;
    }

    /**
     * increment schedule metrics
     * @param test TestDTO
     * @param success success
     */
    public void incrementSchedule(TestCaseDTO test, Boolean success) {  

        this.incrementCounter(prometheus_schedule, 1, "testid=_total", "success=_total", 
            "labels=_total");

        String promlabels = createLabels(test.getLabels());

        this.incrementCounter(prometheus_schedule, 1, "testid="+test.getTestid(), "success=_total", 
            "labels="+promlabels);
        this.incrementCounter(prometheus_schedule, 1, "testid="+test.getTestid(), "success="+OpenTestingConversion.toString(success),
            "labels="+promlabels);
    }

    /**
     * increment inject metrics with success or not
     */
    public void incrementInject(String testid, TestCaseInjectionDTO inject, Boolean success, List<String> labels) {

        this.incrementCounter(prometheus_inject, 1, "testid=_total", "success=_total", "service=_total", "injectid=_total", 
            "labels=_total");
        this.incrementCounter(prometheus_inject, 1, "testid=_total", "success="+OpenTestingConversion.toString(success), "service=_total", "injectid=_total",
            "labels=_total");
        this.incrementCounter(prometheus_inject, 1, "testid=_total", "success=_total", "service="+inject.getService(), "injectid=_total",
            "labels=_total");
        this.incrementCounter(prometheus_inject, 1, "testid=_total", "success="+OpenTestingConversion.toString(success), "service="+inject.getService(), "injectid=_total",
            "labels=_total");

        String promlabels = createLabels(labels);

        this.incrementCounter(prometheus_inject, 1, "testid="+testid, "success=_total", "service=_total", "injectid=_total", 
            "labels="+promlabels);
        this.incrementCounter(prometheus_inject, 1, "testid="+testid, "success="+OpenTestingConversion.toString(success), "service=_total", "injectid=_total",
            "labels="+promlabels);
        this.incrementCounter(prometheus_inject, 1, "testid="+testid, "success=_total", "service="+inject.getService(), "injectid=_total", 
            "labels="+promlabels);
        this.incrementCounter(prometheus_inject, 1, "testid="+testid, "success="+OpenTestingConversion.toString(success), "service="+inject.getService(), "injectid=_total",
            "labels="+promlabels);
        this.incrementCounter(prometheus_inject, 1, "testid="+testid, "success=_total", "service=_total", "injectid="+inject.getInjectid(), 
            "labels="+promlabels);
        this.incrementCounter(prometheus_inject, 1, "testid="+testid, "success="+OpenTestingConversion.toString(success), "service=_total", "injectid="+inject.getInjectid(),
            "labels="+promlabels);
    }

    /**
     * increment Check metrics with success or not
     */
    public void incrementCheck(TestCaseCheckDTO check, String cleancheckid, List<String> labels) {

        this.incrementCounter(prometheus_check, 1, "testid=_total", "success=_total", "service=_total", "checkid=_total", 
            "labels=_total");
        this.incrementCounter(prometheus_check, 1, "testid=_total", "success="+OpenTestingConversion.toString(check.getSuccess()), "service=_total", "checkid=_total",
            "labels=_total");
        this.incrementCounter(prometheus_check, 1, "testid=_total", "success=_total", "service="+check.getService(), "checkid=_total", 
            "labels=_total");
        this.incrementCounter(prometheus_check, 1, "testid=_total", "success="+OpenTestingConversion.toString(check.getSuccess()), "service="+check.getService(), "checkid=_total",
            "labels=_total");

        String promlabels = createLabels(labels);

        this.incrementCounter(prometheus_check, 1, "testid="+check.getTestid(), "success=_total", "service=_total", "checkid=_total", 
            "labels="+promlabels);
        this.incrementCounter(prometheus_check, 1, "testid="+check.getTestid(), "success="+OpenTestingConversion.toString(check.getSuccess()), "service=_total", "checkid=_total",
            "labels="+promlabels);
        this.incrementCounter(prometheus_check, 1, "testid="+check.getTestid(), "success=_total", "service="+check.getService(), "checkid=_total", 
            "labels="+promlabels);
        this.incrementCounter(prometheus_check, 1, "testid="+check.getTestid(), "success="+OpenTestingConversion.toString(check.getSuccess()), "service="+check.getService(), "checkid=_total",
            "labels="+promlabels);

        this.incrementCounter(prometheus_check, 1, "testid="+check.getTestid(), "success=_total", "service=_total", "checkid="+cleancheckid,
            "labels="+promlabels);
        this.incrementCounter(prometheus_check, 1, "testid="+check.getTestid(), "success="+OpenTestingConversion.toString(check.getSuccess()), "service=_total", "checkid="+cleancheckid,
            "labels="+promlabels);
    }    
    
}
