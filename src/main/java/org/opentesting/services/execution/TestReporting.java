package org.opentesting.services.execution;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.persistence.TestCaseCheckRepository;
import org.opentesting.persistence.TestCaseFileRepository;
import org.opentesting.persistence.TestCaseInjectionRepository;
import org.opentesting.persistence.TestCaseRepository;
import org.opentesting.util.LogExecutionTime;
import org.opentesting.util.OpenTestingConversion;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * central reporting logic
 */
@Component
public class TestReporting extends TestAbstractHandler {
    
    @Autowired
    private TestCaseFileRepository testCaseFileRepository;

    @Autowired
    private TestCaseCheckRepository testCaseCheckRepository;

    @Autowired
    private TestCaseInjectionRepository testCaseInjectionRepository;

    @Autowired
    private TestCaseRepository testCaseRepository;

    @Autowired
    private OpenTestingConversion openTestingConversion;

    @LogExecutionTime
    public TestCaseDTO getTest(String testid, int lastchecks) {

        //get by ID
        TestCaseDTO test = testCaseRepository.select(testid);

        //extend
        test = this.addInjects(test);
        test = this.addChecks(test, lastchecks);
        test = this.removePasswords(test);
        
        return test;
    }  
    
    /**
     * add injects to the object
     */
    private TestCaseDTO addInjects(TestCaseDTO test) {
        if (test == null) return test;
        test.setInjections(testCaseInjectionRepository.select(test.getTestid()));
        return test;
    }

    /**
     * add checks to the object
     */
    private TestCaseDTO addChecks(TestCaseDTO test, int lastchecks) {
        if (test == null) return test;
        test.setChecks(testCaseCheckRepository.selectLast(test.getTestid(), lastchecks));
        return test;
    }

    @LogExecutionTime
    public String getTestFile(String testid, String filename) {
        return testCaseFileRepository.select(testid, filename);
    } 
    
    @LogExecutionTime
    public List<TestCaseDTO> getTestsByLabel(List<String> labels, int lastchecks) {

        //search by label
        List<TestCaseDTO> tests = testCaseRepository.selectByLabels(labels);

        //extend in parallel
        tests.parallelStream().forEach(
            test -> {
                test = this.addInjects(test);
                test = this.addChecks(test, lastchecks);
                test = this.removePasswords(test);
            }
        );
        
        return tests;
    }

    /**
     * hide passwords
     */
    private TestCaseDTO removePasswords(TestCaseDTO test) {
        if (test == null) return test;
        test.getInjections().stream().forEach(
            inject -> {
                inject.setConnectpassword(null);
                inject.setJwtpassword(null);
            }
        );
        test.getChecks().stream().forEach(
            check -> {
                check.setConnectpassword(null);
                check.setJwtpassword(null);
            }
        );
        return test;
    }

    /**
     * read all checks by bulk ID
     * @param bulkid Bulk ID
     * @return checks
     */
    @LogExecutionTime
    public List<TestCaseCheckDTO> getChecksByBulkId(String bulkid) {
        List<TestCaseCheckDTO> result = testCaseCheckRepository.selectByBulkId(bulkid);
        result.stream().forEach(
                check -> {
                    check.setConnectpassword(null);
                    check.setJwtpassword(null);
                }
        );
        return result;
    }

    /**
     * read original test cases from stored JSON
     */
    @LogExecutionTime
    public List<TestCaseDTO> getOriginalTestCases() throws JsonMappingException, JsonProcessingException {
        List<TestCaseDTO> testcases = new ArrayList<>();
        //we should not do in parallel - this could be a lot of test cases
        for (String jsonTest : testCaseFileRepository.selectByFilename(TESTCASESTORAGE)) {
            testcases.add(openTestingConversion.json2object(jsonTest, TestCaseDTO.class));
        }
        return testcases;
    }

    /**
     * read orignal test case
     * @throws JsonProcessingException
     * @throws JsonMappingException
     */
    @LogExecutionTime
    public TestCaseDTO getOriginalTestCase(String testid) throws JsonMappingException, JsonProcessingException {
        return getOriginalTestCase(testid, testCaseFileRepository, openTestingConversion);
    } 

}