package org.opentesting.services.execution;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseCustomParameterDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.TestCaseServiceDTO;
import org.opentesting.persistence.IndexRepository;
import org.opentesting.util.LogExecutionTime;
import org.opentesting.util.exceptions.NotFoundException;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Component;

/**
 * central reporting logic
 */
@Component
public class TestReporting extends TestAbstractHandler {    

    @LogExecutionTime
    public TestCaseDTO getTest(String testid, int maxchilds) throws JsonMappingException, JsonProcessingException, NotFoundException {

        //get by ID
        TestCaseDTO test = this.getTest(testid);    

        //extend
        if (maxchilds > 0) test = this.addInjectinstances(test, maxchilds);
        if (maxchilds > 0) test = this.addCheckinstances(test, maxchilds);
        test = this.removePasswords(test);
        
        return test;
    }  
    
    /**
     * add injects to the object
     * @throws JsonProcessingException
     * @throws DataAccessException
     */
    private TestCaseDTO addInjectinstances(TestCaseDTO test, int maxchilds) throws DataAccessException, JsonProcessingException {
        if (test == null) return test;
        test.setInjectioninstances(injectRepository.selectLatest(test.getId(), maxchilds));
        return test;
    }

    /**
     * add checks to the object
     * @throws JsonProcessingException
     * @throws DataAccessException
     */
    private TestCaseDTO addCheckinstances(TestCaseDTO test, int maxchilds) throws DataAccessException, JsonProcessingException {
        if (test == null) return test;
        test.setCheckinstances(checkRepository.selectLatest(test.getId(), maxchilds));
        return test;
    }    
    
    @LogExecutionTime
    public List<TestCaseDTO> getTestsByLabel(List<String> labels, int maxchilds) throws JsonMappingException, JsonProcessingException, NotFoundException {

        //search IDs by label (no parallel stream to save resources)
        List<String> testids = new ArrayList<>();
        for (String label : labels) {
            for (String testid : indexRepository.select(IndexRepository.LABELINDEX, label)) {
                if (!testids.contains(testid)) testids.add(testid);
            }
        }

        //read test including extends (no parallel stream to save resources)
        List<TestCaseDTO> tests = new ArrayList<>();
        for (String testid : testids) {
            tests.add(getTest(testid, maxchilds));
        }    
        
        return tests;
    }

    /**
     * hide passwords
     */
    private TestCaseDTO removePasswords(TestCaseDTO test) {
        if (test == null) return test;
        test.getInjections().stream().forEach(
            inject -> {
                removePasswords(inject.getService());
            }
        );
        test.getInjectioninstances().stream().forEach(
            inject -> {
                removePasswords(inject.getService());
            }
        );
        test.getChecks().stream().forEach(
            check -> {
                removePasswords(check.getService());
            }
        );
        test.getCheckinstances().stream().forEach(
            check -> {
                removePasswords(check.getService());
            }
        );
        return test;
    }

    /**
     * set null for passwords
     * @param service service object
     */
    private void removePasswords(TestCaseServiceDTO service) {

        service.setPassword(null);

        //all custom ones containing "password"
        for (TestCaseCustomParameterDTO custom : service.getCustom()) {
            if (custom.getKey().contains("password")) custom.setValue(null);
        }
    }

    /**
     * read all check instances by bulk ID
     * @param bulkid Bulk ID
     * @return checks
     */
    @LogExecutionTime
    public List<TestCaseCheckDTO> getChecksByBulkId(String bulkid) {
        List<String> instanceids = indexRepository.select(IndexRepository.BULKIDINDEXCHECKS, bulkid);

        List<TestCaseCheckDTO> result = new ArrayList<>();
        for (String instanceid : instanceids) {
            TestCaseCheckDTO check = checkRepository.selectByInstanceId(instanceid);
            if (check != null) {
                removePasswords(check.getService());
                result.add(check);
            }
        }        
        return result;
    }  

    /**
     * read all injects inctances by bulk id
     * @param bulkid
     * @return
     */
    public List<TestCaseInjectionDTO> getInjectionsByBulkId(String bulkid) {
        List<String> instanceids = indexRepository.select(IndexRepository.BULKIDINDEXINJECTS, bulkid);

        List<TestCaseInjectionDTO> result = new ArrayList<>();
        for (String instanceid : instanceids) {
            TestCaseInjectionDTO inject = injectRepository.selectByInstanceId(instanceid);
            if (inject != null) {
                removePasswords(inject.getService());
                result.add(inject);
            }
        }        
        return result;
    }     

}