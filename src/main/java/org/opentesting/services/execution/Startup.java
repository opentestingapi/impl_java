package org.opentesting.services.execution;

import java.util.HashSet;
import java.util.Set;

import jakarta.annotation.PostConstruct;

import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.migration.TestCaseDTOMigration;
import org.opentesting.services.adapter.AdapterResolver;
import org.opentesting.services.scheduler.AsynTaskExec;
import org.opentesting.services.scheduler.TimerFactory;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.OpenTestingConfig;
import org.opentesting.util.ApplicationContextProvider;
import org.opentesting.util.LogExecutionTime;

import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

/**
 * startup logic
 */
@Component
@Slf4j
public class Startup extends TestAbstractHandler{

    private TimerFactory timerFactory;

    private OpenTestingConfig openTestingConfig;

    private AsynTaskExec asynTaskExec;

    private TestScheduler testScheduler;

    private TestManager testManager;

    private TestCheck testCheck;

    private AdapterResolver adapterResolver;

    public Startup(ApplicationContextProvider applicationContextProvider) {
        super(applicationContextProvider);
        timerFactory = applicationContextProvider.getBean(TimerFactory.class);
        openTestingConfig = applicationContextProvider.getBean(OpenTestingConfig.class);
        asynTaskExec = applicationContextProvider.getBean(AsynTaskExec.class);
        testScheduler = applicationContextProvider.getBean(TestScheduler.class);
        testManager = applicationContextProvider.getBean(TestManager.class);
        testCheck = applicationContextProvider.getBean(TestCheck.class);
        adapterResolver = applicationContextProvider.getBean(AdapterResolver.class);
    }

    @PostConstruct
    @LogExecutionTime
    public void startup() {
        try {

            //schedule auto-deletion
            timerFactory.createAutodeleteTimer(testManager, asynTaskExec);
            log.info("auto-delete timer created");            

            //schedule startup task
            timerFactory.createStartupTimer(this, asynTaskExec);
            log.info("startup timer created");

            //schedule check validation tasks
            for (String service : adapterResolver.getAllAdapterServiceNames()) {
                for (String cron : openTestingConfig.getCheckcron()) {
                    timerFactory.createCronCheckTimer(service, cron, asynTaskExec, testCheck);
                }
            }
            log.info("check validation timers created");

        } catch (Exception e) {
            log.error("cannot schedule startup task", e);
        }
    }

    /**
     * load packaged test cases after startup and replan stored ones
     */    
    @LogExecutionTime
    @SuppressWarnings("unchecked")
    public void loadTestCases() {
        try {
            log.info("replan database test cases");   
            
            //skip for JUnit tests
            if (!openTestingConfig.isReloadtestcases()) {
                log.warn("skipped loadTestCases()");         
                return;       
            }

            //replan database test cases
            Set<String> allDbTestIds = new HashSet<>();
            for (TestCaseDTO test : this.getTests()) {                

                //reschedule and log (timer need to be recreated)
                log.info(test.getId() + ": " + testScheduler.scheduleTest(test));

                allDbTestIds.add(test.getId());
            }

            log.info("load packaged test cases");

            //read resources files
            ClassLoader classLoader = this.getClass().getClassLoader();
            PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(classLoader);

            //iterator over files
            for (Resource r : resolver.getResources("classpath:tests/*.json")) {

                log.info("scheduling: " + r.getFilename());

                //JSON to DTO
                TestCaseDTO test = (TestCaseDTO) openTestingConversion.json2object(r.getInputStream(), TestCaseDTOMigration.LATEST);

                //check if already in database
                if (!allDbTestIds.contains(test.getId())) {

                    //store required files
                    for (Resource rf : resolver.getResources("classpath:tests/"+test.getId()+"/*.*")) {
                        storeFile(test.getId(), rf.getFilename(), OpenTestingConversion.toString(rf.getInputStream()));
                        log.info(test.getId() + " - " + rf.getFilename() + " stored");
                    }

                    //schedule and log
                    log.info(test.getId() + ": " + testScheduler.scheduleTest(test));
                }                           
            }

            log.info("OpenTesting Startup done");
        } catch (Exception e) {
            log.error("cannot load packaged test cases", e);
        }
    }    
    
}