package org.opentesting.services.execution;

import java.util.HashSet;
import java.util.Set;

import javax.annotation.PostConstruct;

import org.opentesting.services.execution.dto.TestCaseDTO;
import org.opentesting.services.execution.scheduler.AsynTaskExec;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.OpenTestingConfig;
import org.opentesting.util.LogExecutionTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.stereotype.Controller;

import lombok.extern.slf4j.Slf4j;

/**
 * startup logic
 */
@Controller
@Slf4j
public class Startup {

    @Autowired
    private TimerFactory timerFactory;

    @Autowired
    private OpenTestingConfig e2ETestConfig;

    @Autowired
    private AsynTaskExec asynTaskExec;

    @Autowired
    private TestManager testPlaner;

    @Autowired
    private OpenTestingConversion e2EConversion;

    @PostConstruct
    @LogExecutionTime
    public void startup() {
        try {

            //schedule auto-deletion
            timerFactory.createAutodeleteTimer(testPlaner, asynTaskExec);
            log.info("auto-delete timer created");

            //skip for JUnit tests
            if (!e2ETestConfig.isReloadtestcases()) {
                log.warn("skipped reloadTestCases()");
                return;
            }

            //schedule startup task
            timerFactory.createStartupTimer(this, asynTaskExec);
            log.info("startup timer created");
        } catch (Exception e) {
            log.error("cannot schedule startup task", e);
        }
    }

    /**
     * load packaged test cases after startup and replan stored ones
     */    
    @LogExecutionTime
    public void loadTestCases() {
        try {
            log.info("replan database test cases");            

            //replan database test cases
            Set<String> allDbTestIds = new HashSet<>();
            for (TestCaseDTO test : testPlaner.getTestsWithInjects()) {

                //read original test case and override injections (because of time-to-live)
                TestCaseDTO testorig = testPlaner.getOriginalTestCase(test.getTestid());
                testorig.setInjections(test.getInjections());

                //reschedule and log (timer need to be recreated)
                log.info(testorig.getTestid() + ": " + testPlaner.scheduleTest(testorig));

                allDbTestIds.add(testorig.getTestid());
            }

            log.info("load packaged test cases");

            //read resources files
            ClassLoader classLoader = this.getClass().getClassLoader();
            PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(classLoader);

            //iterator over files
            for (Resource r : resolver.getResources("classpath:tests/*.json")) {

                log.info("scheduling: " + r.getFilename());

                //JSON to DTO
                TestCaseDTO test = e2EConversion.json2object(r.getInputStream(), TestCaseDTO.class);

                //check if already in database
                if (!allDbTestIds.contains(test.getTestid())) {

                    //store required files
                    for (Resource rf : resolver.getResources("classpath:tests/"+test.getTestid()+"/*.*")) {
                        testPlaner.storeFile(test.getTestid(), rf.getFilename(), OpenTestingConversion.toString(rf.getInputStream()));
                        log.info(test.getTestid() + " - " + rf.getFilename() + " stored");
                    }

                    //schedule and log
                    log.info(test.getTestid() + ": " + testPlaner.scheduleTest(test));
                }                           
            }

            log.info("OpenTesting Startup done");
        } catch (Exception e) {
            log.error("cannot load packaged test cases", e);
        }
    }
    
}