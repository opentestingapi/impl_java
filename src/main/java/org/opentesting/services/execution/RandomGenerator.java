package org.opentesting.services.execution;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

import org.opentesting.services.execution.dto.TestCaseRandomDataDTO;
import org.opentesting.services.execution.dto.TestCaseRandomGeneratorDTO;
import org.opentesting.services.execution.dto.TestCaseReplacementDTO;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.LogExecutionTime;

import org.springframework.stereotype.Controller;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
public class RandomGenerator {

    private Random rand = new SecureRandom();

    /**
     * generate random data
     */
    @LogExecutionTime
    public TestCaseRandomDataDTO create(TestCaseRandomGeneratorDTO input) {  

        //check valid input
        if (input == null || input.getReplacements() == null) return null; 

        Map<String,String> data = new HashMap<>();
        
        //parallel is no required
        for (TestCaseReplacementDTO rdto : input.getReplacements()) {
            data.put(rdto.getReplacement(), generateRandomValue(rdto));
        }

        return new TestCaseRandomDataDTO(data);
    }

    /**
     * creates the random value based on definition
     */
    private String generateRandomValue(TestCaseReplacementDTO input) {

        String value = "";

        //use value list
        if (input.getOptionlist() != null && input.getOptionlist().size() > 0) {
            //obtain a number between [0 - optionssize].            
            int n = rand.nextInt(input.getOptionlist().size());
            value = input.getOptionlist().get(n);
        }

        //use UUID
        if (input.isUseuuid()) {
            value = UUID.randomUUID().toString();
        }

        //use custom list
        if (input.getCustom() != null && input.getCustom().length() > 0) {
            value = generateRandomString(input.getCustom(), input.getCustomlength());
        }

        //use date
        if (input.getDateformat() != null && input.getDateformat().length() > 0) {
            LocalDateTime date = LocalDateTime.now().plusSeconds(OpenTestingConversion.toSeconds(input.getDateaddition()));
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(input.getDateformat());
            value = date.format(formatter);
        }

        //suffix?
        if (input.isSuffixactualms()) {
            String actualms = "" + System.currentTimeMillis();
            if (input.getSuffixlength() < 0) {
                log.warn("suffix length below zero - ignoring");
            } else if (input.getSuffixlength() >= actualms.length()) {
                String extension = "" + actualms;
                int extensionsize = actualms.length();
                while (input.getSuffixlength() > extensionsize) {
                    actualms = "" + System.currentTimeMillis();
                    extension = extension + actualms;
                    extensionsize = extensionsize + actualms.length();
                }
                value = value + extension.substring(0, input.getSuffixlength());
            } else {
                //use hash to shorten it because of cron timer (low numbers are near to each other)
                String extension = "" + actualms.hashCode() + actualms.hashCode();
                value = value + extension.substring(0, input.getSuffixlength());
            }
        }

        return value;
    }

    /**
     * generate a random char[], based on `input`
     */
    private String generateRandomString(String input, int size) {

        if (input == null || input.length() <= 0)
            throw new IllegalArgumentException("invalid custom input");
        if (size < 1) return "";

        StringBuilder result = new StringBuilder(size);
        for (int i = 0; i < size; i++) {
            // produce a random order
            int index = rand.nextInt(input.length());
            result.append(input.charAt(index));
        }
        return shuffleString(result.toString());
    }

    /**
     * for final value, make it more random
     */
    private String shuffleString(String input) {
        List<String> result = Arrays.asList(input.split(""));
        Collections.shuffle(result);
        // java 8
        return result.stream().collect(Collectors.joining());
    }
    
}
