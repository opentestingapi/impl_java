package org.opentesting.services.execution.scheduler;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

import org.opentesting.services.execution.Startup;
import org.opentesting.services.execution.TestManager;
import org.opentesting.services.execution.TimerFactory;
import org.opentesting.services.execution.dto.CheckResultDTO;
import org.opentesting.services.execution.dto.TestCaseCheckDTO;
import org.opentesting.services.execution.dto.TestCaseInjectionDTO;
import org.opentesting.services.prometheus.Prometheus;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.LogExecutionTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Controller;

import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
public class AsynTaskExec {

    @Autowired
    private Prometheus prometheus;

    /**
     * async method executed from timer
     */
    @Async
    @LogExecutionTime
    public void timerInject(String testid, String injectid,
                            String timerid, TimerFactory timerFactory, TestManager testPlaner) {
        try {            

            //load data from database
            TestCaseInjectionDTO inject = testPlaner.getInject(testid, timerid);

            //in case the DTO is null we can cancel ourselfs (new upload happened)
            if (inject == null) {
                timerFactory.cancelInjectionTimer(timerid);
                log.info("E2EInjectTask "+testid+" - inject null - "+timerid+" canceled");
                return;
            }

            //if deactivated we can skip
            if (!inject.isActivation()) {
                log.info("E2EInjectTask "+testid+"."+inject.getInjectid()+" - "+timerid+" deactivated");
                return;
            }

            //calculate expired ones
            long seconds = OpenTestingConversion.toSeconds(inject.getTimetolive());
            LocalDateTime mindate = LocalDateTime.now().plusSeconds(-seconds);
            boolean ttlExpired = inject.getCreatets().isBefore(mindate);

            //in case the DTO is outdated we can cancel ourselfs (new upload happened)
            if (ttlExpired) {
                timerFactory.cancelInjectionTimer(timerid);
                return;
            }

            //inject
            testPlaner.executeInject(testid, inject, timerid, "", null);

            //increment Prometheus
            prometheus.incrementExecution("timerinject", inject.getService());

        } catch (Exception e) {
            log.error("E2EInjectTask execution failed: "+testid+" - "+injectid+" - "+timerid, e);
        }
    }

    /**
     * async method executed from timer
     */
    @Async
    @LogExecutionTime
    public void timerCheck(List<String> services, TestManager testPlaner) {
        try {           

            //load data from database
            List<TestCaseCheckDTO> checks = testPlaner.getChecksByServiceAndOpen(services);           

            // execute checks in parallel
            List<Boolean> results = checks.parallelStream().map(c -> {
                try {
                    //kafka max wait time check timer should check age only
                    if (c.getService().equalsIgnoreCase("kafka")) {
                        return testPlaner.executeCheck(c, true);  
                    }
                    return testPlaner.executeCheck(c, false);                    
                } catch (Exception e) {
                    log.error("E2ECheckTask execution failed: "+c.getCheckid(), e);
                    return null;
                }
            }).collect(Collectors.toList());

            //prepare result
            CheckResultDTO result = OpenTestingConversion.list2CheckResult(results);
            
            //increment Prometheus
            prometheus.incrementExecution("timercheck", OpenTestingConversion.toString(services, "#"));

            log.info("##### CHECK TOTAL ##### " + services + ": total "+checks.size()+" / success "+result.getSuccess()
                +" / failed "+result.getFailed()+" / without "+result.getWithout());

        } catch (Exception e) {
            log.error("E2ECheckTask execution failed: "+services, e);
        }
    }

    /**
     * async method to initially load the test cases
     */
    @Async
    @LogExecutionTime
    public void startup(Startup startup) {
        try {
            //load data from database
            startup.loadTestCases();
        } catch (Exception e) {
            log.error("loadTestCases failed", e);
        }
    }
    
    /**
     * auto-delete old data
     */
    @LogExecutionTime
    public void autodelete(TestManager testPlaner) {
        try {
            //autodelete
            testPlaner.autodelete();
        } catch (Exception e) {
            log.error("autodelete failed", e);
        }
    }

}