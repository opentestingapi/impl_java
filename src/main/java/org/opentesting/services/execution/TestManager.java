package org.opentesting.services.execution;

import java.time.LocalDateTime;

import org.opentesting.persistence.IndexRepository;
import org.opentesting.services.adapter.AdapterResolver;
import org.opentesting.services.adapter.kafka.OpenTestingKafkaConsumer;
import org.opentesting.services.pause.Pause;
import org.opentesting.util.OpenTestingConfig;
import org.opentesting.util.ApplicationContextProvider;
import org.opentesting.util.LogExecutionTime;

import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

/**
 * central planing / management logic
 */
@Component
@Slf4j
public class TestManager extends TestAbstractHandler {    
   
    private OpenTestingConfig openTestingConfig;

    private OpenTestingKafkaConsumer openTestingKafkaConsumer;

    public TestManager(ApplicationContextProvider applicationContextProvider) {
        super(applicationContextProvider);        
        openTestingConfig = applicationContextProvider.getBean(OpenTestingConfig.class);            
        openTestingKafkaConsumer = applicationContextProvider.getBean(OpenTestingKafkaConsumer.class);
    }

    /**
     * remove test id
     */
    @LogExecutionTime
    public String removeTest(String testid) {

        //remove Kafka consumer
        openTestingKafkaConsumer.closeConsumer(testid);

        StringBuilder st = new StringBuilder();
        indexRepository.deleteByValue(IndexRepository.LABELINDEX, testid);
        st.append("index deleted");
        injectRepository.deleteByTestId(testid);
        st.append(", injects deleted");
        checkRepository.deleteByTestId(testid);
        st.append(", checks deleted");
        keyValueRepository.deleteByTestId(testid);
        st.append(", files deleted");
        testRepository.delete(testid);
        st.append(", test deleted");
        return st.toString();
    }  

    /**
     * pause injects and checks
     * @param byLabel by label or for all
     */
    @LogExecutionTime
    public void pause(boolean value, String byLabel) {

        //unique handling
        if (byLabel == null || byLabel.isEmpty() || byLabel.isBlank())  byLabel = Pause.ALLPAUSELABEL;

        //set pause
        pause.pause(value, byLabel);

        //adapter should know it
        final String finalLabel = byLabel;
        AdapterResolver adapterResolver = applicationContextProvider.getBean(AdapterResolver.class);
        adapterResolver.getAllAdapter().parallelStream().forEach(
                adapter -> adapter.pause(value, finalLabel)                
        );
    }

    /**
     * auto-delete old data
     */
    @LogExecutionTime
    public void autodelete() {

        LocalDateTime maxAge = LocalDateTime.now().minusDays(openTestingConfig.getAutodelete());

        //cleanup old database checks
        checkRepository.deleteOlderThan(maxAge);

        //cleanup old database injects
        injectRepository.deleteOlderThan(maxAge);

        //cleanup old bulk ID index
        indexRepository.deleteOlderThan(IndexRepository.BULKIDINDEXCHECKS, maxAge);
        indexRepository.deleteOlderThan(IndexRepository.BULKIDINDEXINJECTS, maxAge);

        log.info("autodelete ("+openTestingConfig.getAutodelete()+" days) done");
    } 

}