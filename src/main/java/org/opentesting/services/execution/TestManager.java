package org.opentesting.services.execution;

import java.time.LocalDateTime;

import org.opentesting.persistence.TestCaseCheckRepository;
import org.opentesting.persistence.TestCaseFileRepository;
import org.opentesting.persistence.TestCaseInjectionRepository;
import org.opentesting.persistence.TestCaseRepository;
import org.opentesting.services.adapter.Adapter;
import org.opentesting.services.adapter.AdapterResolver;
import org.opentesting.services.pause.Pause;
import org.opentesting.services.scheduler.AsynTaskExec;
import org.opentesting.services.scheduler.TimerFactory;
import org.opentesting.util.OpenTestingConfig;
import org.opentesting.util.LogExecutionTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

/**
 * central planing / management logic
 */
@Component
@Slf4j
public class TestManager extends TestAbstractHandler {    
    
    @Autowired
    private TestCaseCheckRepository testCaseCheckRepository;

    @Autowired
    private TestCaseInjectionRepository testCaseInjectionRepository;

    @Autowired
    private TestCaseRepository testCaseRepository;

    @Autowired
    private TestCaseFileRepository testCaseFileRepository;

    @Autowired
    private TimerFactory timerFactory;

    @Autowired
    private AdapterResolver adapterResolver;     

    @Autowired
    private OpenTestingConfig e2ETestConfig;

    @Autowired
    private AsynTaskExec asynTaskExec;   

    @Autowired
    private Pause pause;

    @Autowired
    private TestCheck testCheck;

     /**
     * adapters might need timers
     */
    public void scheduleAdapterTimers() {
        try {
            for (Adapter adap : adapterResolver.getAllAdapter()) {
                for (String cron : adap.getRequiredTimerCrons()) {
                    timerFactory.createCheckTimer(adap.getAllServicenames(), cron, adap, asynTaskExec, testCheck);
                }
            }
        } catch (Exception e) {
            log.error("scheduleAdapterTimers failed with exception", e);
        }
    }

    /**
     * remove test id
     */
    @LogExecutionTime
    public String removeTest(String testid) {
        StringBuffer st = new StringBuffer();
        testCaseCheckRepository.deleteByTestId(testid);
        st.append("checks deleted");
        testCaseInjectionRepository.deleteByTestId(testid);
        st.append(", injects deleted");
        testCaseRepository.delete(testid);
        st.append(", test deleted");
        testCaseFileRepository.deleteByTestId(testid);
        st.append(", files deleted");
        return st.toString();
    }       

    /**
     * pause injects and checks
     * @param byLabel by label or for all
     */
    @LogExecutionTime
    public void pause(boolean value, String byLabel) {

        //set pause
        pause.pause(value, byLabel);

        //adapter should know it
        final String finalLabel = byLabel;
        adapterResolver.getAllAdapter().parallelStream().forEach(
                adapter -> {
                    adapter.pause(value, finalLabel);
                }
        );
    }

    /**
     * auto-delete old data
     */
    @LogExecutionTime
    public void autodelete() {

        LocalDateTime maxAge = LocalDateTime.now().minusDays(e2ETestConfig.getAutodelete());

        //cleanup database checks (files, injects, tests still required)
        testCaseCheckRepository.deleteOlderThan(maxAge);

        log.info("autodelete ("+e2ETestConfig.getAutodelete()+" days) done");
    }    

}