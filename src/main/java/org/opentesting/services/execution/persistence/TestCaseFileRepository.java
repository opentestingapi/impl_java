package org.opentesting.services.execution.persistence;

import javax.annotation.PostConstruct;

import org.opentesting.util.LogExecutionTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;

import lombok.extern.slf4j.Slf4j;

import java.util.List;

@Controller
@Slf4j
public class TestCaseFileRepository {

    private static final String TABLENAME = "testcasefile";
    private static final String[] SQLS = {"create table if not exists "+TABLENAME+" (testid VARCHAR(1000) NOT NULL)"
        ,"alter table "+TABLENAME+" add if not exists filename VARCHAR(1000)"
        ,"alter table "+TABLENAME+" add if not exists filecontent text"
    };

    @Autowired
    private JdbcTemplate jdbcTemplate;    

    @PostConstruct
    @LogExecutionTime
    public void prepareDB() {
        for (String sql : SQLS) {
            try {
                log.info("execute: "+sql);
                jdbcTemplate.execute(sql);
            } catch (Exception e) {
                log.warn("warning preparing internal database", e);
            }
        }
    }

    @LogExecutionTime
    public void insert(String testid, String filename, String content) {
        delete(testid, filename);
        String sql = "insert into "+TABLENAME+" (testid, filename, filecontent) VALUES (?, ?, ?)";
        jdbcTemplate.update(sql, testid, filename, content);
    }

    @LogExecutionTime
    public void delete(String testid, String filename) {
        String sql = "delete from "+TABLENAME+" where testid = ? and filename = ?";
        jdbcTemplate.update(sql, testid, filename);
    }

    @LogExecutionTime
    public String select(String testid, String filename) {
        String sql = "select filecontent from "+TABLENAME+" where testid = ? and filename = ?";      
        //because of old timers we have to handle 0 rows result
        return DataAccessUtils.singleResult(jdbcTemplate.query(sql, (rs, rowNum) -> rs.getString("filecontent"), testid, filename));
    }

    @LogExecutionTime
    public void deleteByTestId(String testid) {
        String sql = "delete from "+TABLENAME+" where testid = ?";
        jdbcTemplate.update(sql, testid);
    }

    @LogExecutionTime
    public List<String> selectByFilename(String filename) {
        String sql = "select filecontent from "+TABLENAME+" where filename = ?";
        return jdbcTemplate.query(sql, (rs, rowNum) -> rs.getString("filecontent"), filename);
    }

}
