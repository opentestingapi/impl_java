package org.opentesting.services.execution;

import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.TestCaseRandomDataDTO;
import org.opentesting.persistence.TestCaseCheckRepository;
import org.opentesting.persistence.TestCaseFileRepository;
import org.opentesting.util.LogExecutionTime;
import org.opentesting.util.OpenTestingConversion;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public abstract class TestAbstractHandler {

    public static final String TESTCASESTORAGE = "internal_e2e_testcase_store.json";

    /**
     * create required check instances
     */
    @LogExecutionTime
    protected void createAndStoreChecks(List<String> checks, TestCaseRandomDataDTO randomdata, TestCaseDTO test, String bulkid, 
                                        String parentcheck, String traceid, TestCaseCheckRepository testCaseCheckRepository) {
        long now = System.currentTimeMillis();
        if (parentcheck == null) parentcheck = "#";
        if (checks != null) {
            final TestCaseRandomDataDTO finalRandomdata = randomdata;
            String finalParentcheck = parentcheck;
            checks.parallelStream().forEach(
                    checkString -> {

                        //check recursion checks
                        if (finalParentcheck.equals(checkString)) {
                            log.warn("infinite loop detected - check " + checkString + " not stored");
                            return;
                        }

                        //search check
                        TestCaseCheckDTO check = null;
                        for (TestCaseCheckDTO ch : test.getChecks()) {
                            if (ch.getCheckid().equals(checkString)) {
                                check = ch;
                                break;
                            }
                        }

                        //check recursion sub-checks
                        if (check.getChecks() != null && check.getChecks().contains(finalParentcheck)) {
                            log.warn("infinite loop detected - check "+checkString+" not executed");
                             return;
                        }

                        //if available persiste new one
                        if (check != null && check.isActivation()) {

                            //add additional data to id
                            check.setCheckid(check.getCheckid() + "_" + now);
                            check.setRandomdata(finalRandomdata);
                            check.setBulkid(bulkid);
                            check.setTraceid(traceid);

                            //create
                            testCaseCheckRepository.insert(test.getTestid(), check);
                        }
                    }
            );
        }
    } 

    /**
     * transfer success object to text
     * @param success Boolean
     * @return String
     */
    protected String translateResult(Boolean success) {
        if (success == null) return "without";
        if (success) return "success";
        return "failed";
    }

    /**
     * read original test case from stored JSON
     */
    @LogExecutionTime
    public TestCaseDTO getOriginalTestCase(String testid, TestCaseFileRepository testCaseFileRepository, OpenTestingConversion openTestingConversion) throws JsonMappingException, JsonProcessingException {
        String jsonTest = testCaseFileRepository.select(testid, TESTCASESTORAGE);
        if (jsonTest == null || jsonTest.length() < 1) return null;
        return openTestingConversion.json2object(jsonTest, TestCaseDTO.class);
    }     
    
}