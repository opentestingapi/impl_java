package org.opentesting.services.scheduler;

import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.ScheduledFuture;

import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.services.adapter.Adapter;
import org.opentesting.services.execution.Startup;
import org.opentesting.services.execution.TestCheck;
import org.opentesting.services.execution.TestInjection;
import org.opentesting.services.execution.TestManager;
import org.opentesting.util.ApplicationContextProvider;
import org.opentesting.util.LogExecutionTime;

import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.support.CronTrigger;
import org.springframework.stereotype.Component;

import jakarta.annotation.PreDestroy;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class TimerFactory { 

    private TaskScheduler taskScheduler;

    public TimerFactory(ApplicationContextProvider applicationContextProvider) {
        taskScheduler = applicationContextProvider.getBean(TaskScheduler.class);
    }    

    //1 timerid could have multiple futures
    private Map<String, List<ScheduledFuture<?>>> injecttimerstore = new HashMap<>();

    //all timer store
    private Set<ScheduledFuture<?>> alltimerstore = new HashSet<>();
    
    @LogExecutionTime
    public String createInjectionTimer(String testid, TestCaseInjectionDTO inject, Adapter adapter, 
            AsynTaskExec asynTaskExec, TestInjection testInjection) {

        //create unique ID
        String timerid = UUID.randomUUID().toString();
        inject.setTimerid(timerid);

        //create timer - all should have th same timerid
        long counter = 0;
        for (String cron : inject.getCron()) {
            counter++;
            createInjectCronTimer(testid, inject.getInjectid(), timerid, cron, adapter, asynTaskExec, testInjection);
        }

        if (counter > 0) log.info("Timer(s) "+timerid+" created: "+counter); 
        return timerid;    
    }

    private void createInjectCronTimer(String testid, String injectid, String timerid, String cron,
            Adapter adapter, AsynTaskExec asynTaskExec, TestInjection testInjection) {

        //create task
        E2EInjectTask task = new E2EInjectTask(testid, injectid, timerid, asynTaskExec, adapter, testInjection);

        //create cron trigger
        CronTrigger cronTrigger = new CronTrigger(cron);

        //schedule task
        ScheduledFuture<?> timertask = taskScheduler.schedule(task, cronTrigger);

        //store
        List<ScheduledFuture<?>> timerlist = injecttimerstore.get(timerid);
        if (timerlist == null) timerlist = new ArrayList<>();
        timerlist.add(timertask);
        injecttimerstore.put(timerid, timerlist);
        alltimerstore.add(timertask);
    } 
    
    @LogExecutionTime
    public void cancelInjectionTimer(String timerid) {

        //cancel parallel 
        long size = injecttimerstore.get(timerid).size();
        injecttimerstore.get(timerid).forEach(
            timer -> timer.cancel(false)            
        );

        if (size > 0) log.info("Timer(s) "+timerid+" canceled: "+size);
    }    
    
    @LogExecutionTime
    public void createCronCheckTimer(String service, String cron, AsynTaskExec asynTaskExec, 
            TestCheck testCheck) {

        //create task
        E2ECheckMaxwaittimeValidationTask task = new E2ECheckMaxwaittimeValidationTask(service, asynTaskExec, testCheck);

        //create cron trigger
        CronTrigger cronTrigger = new CronTrigger(cron);

        //schedule task and store
        alltimerstore.add(taskScheduler.schedule(task, cronTrigger));        
    }    

    @LogExecutionTime
    public void createStartupTimer(Startup startup, AsynTaskExec asynTaskExec) {           

        //create task
        E2EStartupTask task = new E2EStartupTask(asynTaskExec, startup);  

        //schedule task with 15 sec delay
        taskScheduler.schedule(task, Instant.now().plusSeconds(15)); 
    }

    @PreDestroy
    private void close() {
        alltimerstore.parallelStream().forEach(
            timer -> timer.cancel(false)
        );
    }

    @LogExecutionTime
    public void createAutodeleteTimer(TestManager testPlaner, AsynTaskExec asynTaskExec) {

        //create task
        E2EAutodeleteTask task = new E2EAutodeleteTask(asynTaskExec, testPlaner);

        //schedule once a hour
        taskScheduler.scheduleAtFixedRate(task,  Duration.ofHours(1));
    }

}