package org.opentesting.persistence;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.annotation.PostConstruct;

import org.opentesting.util.OpenTestingConversion;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.util.LogExecutionTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class TestCaseRepository {

    private static final String TABLENAME = "testcase";
    private static final String[] SQLS = {"create table if not exists "+TABLENAME+" (testid VARCHAR(1000) NOT NULL)"
        ,"alter table "+TABLENAME+" add if not exists activation boolean"
        ,"alter table "+TABLENAME+" add if not exists labels VARCHAR(1000)"
        ,"alter table "+TABLENAME+" add if not exists description VARCHAR(1000)"
    };

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @PostConstruct
    @LogExecutionTime
    public void prepareDB() {
        for (String sql : SQLS) {
            try {
                log.info("execute: "+sql);
                jdbcTemplate.execute(sql);
            } catch (Exception e) {
                log.warn("warning preparing internal database", e);
            }
        }
    }

    @LogExecutionTime
    public void insert(TestCaseDTO testcase) {

        //delete old one
        delete(testcase.getTestid());
        
        //sort labels to enable search and process unmodifyable lists
        List<String> labels = new ArrayList<>(testcase.getLabels());
        Collections.sort(labels);
        testcase.setLabels(labels);

        //insert
        String sql = "insert into "+TABLENAME+" (testid, activation, description, labels) VALUES (?, ?, ?, ?)";
        jdbcTemplate.update(sql, testcase.getTestid(), testcase.isActivation(), testcase.getDescription(),
                OpenTestingConversion.toStringDatabase(testcase.getLabels()));
    }

    @LogExecutionTime
    public void delete(String testid) {
        String sql = "delete from "+TABLENAME+" where testid = ?";
        jdbcTemplate.update(sql, testid);
    }

    @LogExecutionTime
    public TestCaseDTO select(String testid) {
        String sql = "select * from "+TABLENAME+" where testid = ?";      
        return DataAccessUtils.singleResult(jdbcTemplate.query(sql, (rs, rowNum) -> 
            getFromRS(rs), testid));
    }

    private TestCaseDTO getFromRS(ResultSet rs) throws SQLException {
        //without child data
        return new TestCaseDTO(rs.getString("testid"), OpenTestingConversion.toBooleanFromDatabase(rs, "activation"),
                rs.getString("description"), OpenTestingConversion.toListFromDatabase(rs.getString("labels"))
                , null, null);
    }

    public List<TestCaseDTO> selectByLabels(List<String> labels) {

        if (labels.size() < 1) return new ArrayList<>();

        //sort labels to enable search
        Collections.sort(labels);

        //create search string
        StringBuffer buf = new StringBuffer();
        buf.append("%");
        for (String label : labels) {
            buf.append(OpenTestingConversion.concatenator+label+OpenTestingConversion.concatenator+"%");
        }        

        //search
        String sql = "select * from "+TABLENAME+" where labels like ?";  
        return jdbcTemplate.query(sql, (rs, rowNum) -> getFromRS(rs), buf.toString());
    }

    public List<TestCaseDTO> selectAll() {
        String sql = "select * from "+TABLENAME;  
        return jdbcTemplate.query(sql, (rs, rowNum) -> getFromRS(rs));
    }
    
}