package org.opentesting.persistence;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.PostConstruct;

import org.opentesting.util.LogExecutionTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Component
public class IndexRepository extends AbstractRepository {

    public static final String LABELINDEX = "labelindex";
    public static final String BULKIDINDEXCHECKS = "bulkidindexchecks";
    public static final String BULKIDINDEXINJECTS = "bulkidindexinjects";

    private static final String TABLENAME = "indexstore";
    private static final String[] SQLS = {CREATETABLE+TABLENAME+" (indexname VARCHAR(1000) NOT NULL)"
        ,ALTERTABLE+TABLENAME+ADDIFNOTEXISTS+"key VARCHAR(1000)"
        ,ALTERTABLE+TABLENAME+ADDIFNOTEXISTS+"value VARCHAR(1000)"
        ,ALTERTABLE+TABLENAME+ADDIFNOTEXISTS+"insertts timestamp"
    };

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @PostConstruct
    @LogExecutionTime
    public void prepareDB() {
        prepareDBinternal(SQLS);   
    }

    @LogExecutionTime
    public void insert(String indexname, String key, String value) {
        delete(indexname, key, value);
        jdbcTemplate.update(INSERTINTO+TABLENAME+" (indexname, key, value, insertts) VALUES (?, ?, ?, ?)", 
            indexname, key, value, LocalDateTime.now());
    }

    @LogExecutionTime
    public void delete(String indexname, String key, String value) {
        jdbcTemplate.update(DELETEFROM+TABLENAME+" where indexname = ? and key = ? and value = ?", indexname, key, value);
    }

    @LogExecutionTime
    public void deleteByKey(String indexname, String key) {
        jdbcTemplate.update(DELETEFROM+TABLENAME+" where indexname = ? and key = ?", indexname, key);
    }

    @LogExecutionTime
    public void deleteByValue(String indexname, String value) {
        jdbcTemplate.update(DELETEFROM+TABLENAME+" where indexname = ? and value = ?", indexname, value);
    }

    @LogExecutionTime
    public List<String> select(String indexname, String key) {
        return jdbcTemplate.query(
            SELECTVALUE+TABLENAME+" where indexname = ? and key = ?", 
            (rs, rowNum) -> rs.getString("value"), indexname, key);
    }

    @LogExecutionTime
    public void deleteOlderThan(String indexname, LocalDateTime maxAge) {
        jdbcTemplate.update(DELETEFROM+TABLENAME+" where indexname = ? and insertts < ?", indexname, maxAge);
    }
    
}