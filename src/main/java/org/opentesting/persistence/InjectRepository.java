package org.opentesting.persistence;

import java.sql.ResultSet;
import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.PostConstruct;

import com.fasterxml.jackson.core.JsonProcessingException;

import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.migration.TestCaseInjectionDTOMigration;
import org.opentesting.util.LogExecutionTime;
import org.opentesting.util.OpenTestingConversion;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class InjectRepository {

    private static final String TABLENAME = "injectstore";
    private static final String[] SQLS = {"create table if not exists "+TABLENAME+" (testid VARCHAR(1000) NOT NULL)"
        ,"alter table "+TABLENAME+" add if not exists injectid VARCHAR(1000)"
        ,"alter table "+TABLENAME+" add if not exists injectinstanceid VARCHAR(1000)"
        ,"alter table "+TABLENAME+" add if not exists version VARCHAR(100)"
        ,"alter table "+TABLENAME+" add if not exists value text"
        ,"alter table "+TABLENAME+" add if not exists insertts timestamp"
    };

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private OpenTestingConversion openTestingConversion;

    @Autowired
    private TestCaseInjectionDTOMigration testCaseInjectDTOMigration;

    @PostConstruct
    @LogExecutionTime
    public void prepareDB() {
        for (String sql : SQLS) {
            try {
                log.info("execute: "+sql);
                jdbcTemplate.execute(sql);
            } catch (Exception e) {
                log.warn("warning preparing internal database", e);
            }
        }
    }

    @LogExecutionTime
    public void insert(String testid, TestCaseInjectionDTO inject) throws DataAccessException, JsonProcessingException {
        delete(testid, inject.getInjectid());
        String sql = "insert into "+TABLENAME+" (testid, injectid, injectinstanceid, version, value, insertts) VALUES (?, ?, ?, ?, ?, ?)";
        jdbcTemplate.update(sql, testid, inject.getInjectid(), inject.getInjectinstanceid(), 
        inject.getVersion(), openTestingConversion.object2json(inject), LocalDateTime.now());
    }

    @LogExecutionTime
    public void delete(String testid, String injectid) {
        String sql = "delete from "+TABLENAME+" where testid = ? and injectid = ?";
        jdbcTemplate.update(sql, testid, injectid);
    }

    @LogExecutionTime
    public void deleteByTestId(String testid) {
        String sql = "delete from "+TABLENAME+" where testid = ?";
        jdbcTemplate.update(sql, testid);
    }

    @LogExecutionTime
    public List<TestCaseInjectionDTO> select(String testid) throws DataAccessException, JsonProcessingException {
        String sql = "select version, value from "+TABLENAME+" where testid = ?";
        List<TestCaseInjectionDTO> res = jdbcTemplate.query(sql, (rs, rowNum) -> fromRS(rs), testid);
        return OpenTestingConversion.filterNull(res);
    }

    @LogExecutionTime
    public List<TestCaseInjectionDTO> selectLatest(String testid, int max) throws DataAccessException, JsonProcessingException {
        String sql = "select version, value from "+TABLENAME+" where testid = ? order by insertts desc limit ?";
        List<TestCaseInjectionDTO> res = jdbcTemplate.query(sql, (rs, rowNum) -> fromRS(rs), testid, max);
        return OpenTestingConversion.filterNull(res);
    }

    @LogExecutionTime
    public List<TestCaseInjectionDTO> select(String testid, String injectid) throws DataAccessException, JsonProcessingException {
        String sql = "select version, value from "+TABLENAME+" where testid = ? and injectid = ?";
        List<TestCaseInjectionDTO> res = jdbcTemplate.query(sql, (rs, rowNum) -> fromRS(rs), testid);
        return OpenTestingConversion.filterNull(res);
    }

    private TestCaseInjectionDTO fromRS(ResultSet rs) {
        try {
            return testCaseInjectDTOMigration.toLatest(rs.getString("version"), rs.getString("value"));
        } catch (Exception e) {
            log.error("cannot read/migrate TestCaseInjectionDTO", e);
            return null;
        }
    } 

    @LogExecutionTime
    public void deleteOlderThan(LocalDateTime maxAge) {
        String sql = "delete from "+TABLENAME+" where insertts < ?";
        jdbcTemplate.update(sql, maxAge);
    }

    public TestCaseInjectionDTO selectByInstanceId(String instanceid) {
        return null;
    }
    
}