package org.opentesting.persistence;

import java.time.LocalDateTime;
import java.util.List;

import jakarta.annotation.PostConstruct;

import org.opentesting.util.ApplicationContextProvider;
import org.opentesting.util.LogExecutionTime;
import org.opentesting.util.exceptions.NotFoundException;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.stereotype.Component;

@Component
public class KeyValueRepository extends AbstractRepository {

    private static final String TABLENAME = "keyvaluestore";
    private static final String[] SQLS = {CREATETABLE+TABLENAME+DEFAULTCOLUMN
        ,ALTERTABLE+TABLENAME+ADDIFNOTEXISTS+"kvrkey VARCHAR(1000)"
        ,ALTERTABLE+TABLENAME+ADDIFNOTEXISTS+"data text"
        ,ALTERTABLE+TABLENAME+ADDIFNOTEXISTS+"insertts timestamp"
    };

    public KeyValueRepository(ApplicationContextProvider applicationContextProvider) {
        super(applicationContextProvider);        
    }

    @PostConstruct
    @LogExecutionTime
    public void prepareDB() {
        prepareDBinternal(SQLS);   
    }

    @LogExecutionTime
    public void insert(String testid, String key, String value) {
        delete(testid, key);
        jdbcTemplate.update(INSERTINTO+TABLENAME+" (testid, kvrkey, data, insertts) VALUES (?, ?, ?, ?)", 
            testid, key, value, LocalDateTime.now());
    }

    @LogExecutionTime
    public void delete(String testid, String key) {
        jdbcTemplate.update(DELETEFROM+TABLENAME+" where testid = ? and kvrkey = ?", testid, key);
    }

    @LogExecutionTime
    public void deleteByTestId(String testid) {
        jdbcTemplate.update(DELETEFROM+TABLENAME+" where testid = ?", testid);
    }

    @LogExecutionTime
    public String select(String testid, String key) throws NotFoundException {
        if (key == null || key.isEmpty()) return "";
        //because of old timers we have to handle 0 rows result
        List<String> res = jdbcTemplate.query(
            SELECTDATA+TABLENAME+" where testid = ? and kvrkey = ?", 
            (rs, rowNum) -> rs.getString("data"), testid, key);
        if (res == null || res.isEmpty()) throw new NotFoundException(testid+" "+key);
        return DataAccessUtils.singleResult(res);
    }    

    @LogExecutionTime
    public List<String> selectByKey(String key) {
        return jdbcTemplate.query(
            SELECTDATA+TABLENAME+" where kvrkey = ?", 
            (rs, rowNum) -> rs.getString("data"), key);
    }    
    
}