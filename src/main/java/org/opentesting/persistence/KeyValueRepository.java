package org.opentesting.persistence;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.PostConstruct;

import org.opentesting.util.LogExecutionTime;
import org.opentesting.util.exceptions.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class KeyValueRepository {

    private static final String TABLENAME = "keyvaluestore";
    private static final String[] SQLS = {"create table if not exists "+TABLENAME+" (testid VARCHAR(1000) NOT NULL)"
        ,"alter table "+TABLENAME+" add if not exists key VARCHAR(1000)"
        ,"alter table "+TABLENAME+" add if not exists value text"
        ,"alter table "+TABLENAME+" add if not exists insertts timestamp"
    };

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @PostConstruct
    @LogExecutionTime
    public void prepareDB() {
        for (String sql : SQLS) {
            try {
                log.info("execute: "+sql);
                jdbcTemplate.execute(sql);
            } catch (Exception e) {
                log.warn("warning preparing internal database", e);
            }
        }
    }

    @LogExecutionTime
    public void insert(String testid, String key, String value) {
        delete(testid, key);
        String sql = "insert into "+TABLENAME+" (testid, key, value, insertts) VALUES (?, ?, ?, ?)";
        jdbcTemplate.update(sql, testid, key, value, LocalDateTime.now());
    }

    @LogExecutionTime
    public void delete(String testid, String key) {
        String sql = "delete from "+TABLENAME+" where testid = ? and key = ?";
        jdbcTemplate.update(sql, testid, key);
    }

    @LogExecutionTime
    public void deleteByTestId(String testid) {
        String sql = "delete from "+TABLENAME+" where testid = ?";
        jdbcTemplate.update(sql, testid);
    }

    @LogExecutionTime
    public String select(String testid, String key) throws NotFoundException {
        String sql = "select value from "+TABLENAME+" where testid = ? and key = ?";      
        //because of old timers we have to handle 0 rows result
        List<String> res = jdbcTemplate.query(sql, (rs, rowNum) -> rs.getString("value"), testid, key);
        if (res.size() < 1) throw new NotFoundException("value not found: "+testid+", "+key);
        return DataAccessUtils.singleResult(res);
    }    

    @LogExecutionTime
    public List<String> selectByKey(String key) {
        String sql = "select value from "+TABLENAME+" where key = ?";
        return jdbcTemplate.query(sql, (rs, rowNum) -> rs.getString("value"), key);
    }    
    
}