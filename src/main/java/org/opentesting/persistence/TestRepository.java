package org.opentesting.persistence;

import java.sql.ResultSet;
import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.PostConstruct;

import com.fasterxml.jackson.core.JsonProcessingException;

import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.migration.TestCaseDTOMigration;
import org.opentesting.util.LogExecutionTime;
import org.opentesting.util.OpenTestingConversion;
import org.opentesting.util.exceptions.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class TestRepository extends AbstractRepository {

    private static final String TABLENAME = "teststore";
    private static final String[] SQLS = {CREATETABLE+TABLENAME+DEFAULTCOLUMN
        ,ALTERTABLE+TABLENAME+ADDIFNOTEXISTS+"version VARCHAR(100)"
        ,ALTERTABLE+TABLENAME+ADDIFNOTEXISTS+"value text"
        ,ALTERTABLE+TABLENAME+ADDIFNOTEXISTS+"insertts timestamp"
    };

    @Autowired
    private OpenTestingConversion openTestingConversion;

    @Autowired
    private TestCaseDTOMigration testCaseDTOMigration;

    @PostConstruct
    @LogExecutionTime
    public void prepareDB() {
        prepareDBinternal(SQLS);   
    }

    @LogExecutionTime
    public void insert(TestCaseDTO test) throws DataAccessException, JsonProcessingException {
        delete(test.getId()); //replace...
        jdbcTemplate.update(INSERTINTO+TABLENAME+" (testid, version, value, insertts) VALUES (?, ?, ?, ?)", 
            test.getId(), test.getVersion(), openTestingConversion.object2json(test), LocalDateTime.now());
    }

    @LogExecutionTime
    public void delete(String testid) {
        jdbcTemplate.update(DELETEFROM+TABLENAME+" where testid = ?", testid);
    }    

    private TestCaseDTO fromRS(ResultSet rs) {
        try {
            return testCaseDTOMigration.toLatest(rs.getString("version"), rs.getString("value"));
        } catch (Exception e) {
            log.error("cannot read/migrate TestCaseDTO", e);
            return null;
        }
    }  
    
    @LogExecutionTime
    public void deleteOlderThan(LocalDateTime maxAge) {
        jdbcTemplate.update(DELETEFROM+TABLENAME+" where insertts < ?", maxAge);
    }

    @LogExecutionTime
    public TestCaseDTO select(String testid) throws NotFoundException {
        List<TestCaseDTO> res = jdbcTemplate.query(
            SELECTVERSIONVALUE+TABLENAME+" where testid = ?", 
            (rs, rowNum) -> fromRS(rs), testid);
            if (res == null || res.isEmpty()) throw new NotFoundException(testid);
        return DataAccessUtils.singleResult(res);
    }
    
    @LogExecutionTime
    public List<TestCaseDTO> selectAll() {
        return jdbcTemplate.query(
            SELECTVERSIONVALUE+TABLENAME, 
            (rs, rowNum) -> fromRS(rs));
    }  
    
}