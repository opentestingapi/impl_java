{
    "id" : "my_whatever_positive_test",
    "testapi": 1.0,
    "active" : true,
    "description" : "functional description of the test case",
    "labels" : ["department-myDepartment1", "stage-integration", "team-aTeam"],
    "injections" : [
     {
        "injectid" : "inject-mq-1",
        "description" : "my example inject with mq",
        "cron" : [ "* 1 * * * ?", "10 * * * * ?" ],
        "active" : true,
        "service" : {
          "type": "ibmmq",
          "connectstring": "myserver",
          "username": "user",
          "password": "password",
          "custom": [
             {
                "key": "queuename",
                "value": "myqueuename"
             }
          ]
        },        
        "sourcefile" : "source_mq_1.json",
        "timetolive": "5d",
        "checks" : [ "check-kafka-1", "check-oracle-1" ]
     }, {
        "injectid" : "inject-rest-1",
        "description" : "my example inject with rest",
        "cron" : [ "* 2 * * * ?", "20 * * * * ?" ],
        "active" : true,
        "service" : {
          "type": "rest",
          "connectstring": "myendpointurl",
          "username": "user",
          "password": "password",
          "custom": [
            {
              "key": "type",
              "value": "POST"
            },
            {
              "key": "header",
              "value": "source_rest_headers_1.json"
            },
            {
              "key": "jwtuser",
              "value": "jwtuser"
            },
            {
              "key": "jwtpassword",
              "value": "jwtpassword"
            },
            {
              "key": "jwtpost",
              "value": "jwtposturl"
            },
            {
              "key": "jwtparam",
              "value": "jwtparameters"
            },
            {
              "key": "jwtheader",
              "value": "jwtheaders"
            }
          ]
        },  
        "sourcefile" : "source_rest_1.json",
        "timetolive": "5d",
        "checks" : [ "check-rest-1" ],
        "replacements" : [
          {
             "key": "#replaceme1#",
             "value": [
                {
                   "order": 1,
                   "type": "list",
                   "value": "rep11|rep12|rep13"
                }
             ]
           },
           {
              "key": "#replaceme2#",
              "value": [
                 {
                    "order": 1,
                    "type": "list",
                    "value": "rep21|rep22|rep23|rep24"
                 },
                 {
                    "order": 2,
                    "type": "now",
                    "value": "Q"
                 }
              ],
              "maxlength": 10
            },
            {
              "key": "#replaceme3#",
              "value": [
                 {
                    "order": 3,
                    "type": "regex",
                    "value": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
                 }
              ]
            },
            {
             "key": "#replaceme4#",
             "value": [
                {
                   "order": 4,
                   "type": "regex",
                   "value": "[0-9a-z]{10}"
                }
             ],
             "maxlength": 10
           },
           {
             "key": "#replaceme5#",
             "value": [
                {
                   "order": 5,
                   "type": "now",
                   "value": "yyyy-MM-dd HH:mm:ss",
                   "param": "-1m"
                }
             ],
             "maxlength": 10
           }
          ]
      }, {
        "injectid" : "inject-kafka-1",
        "description" : "my example inject with kafka",
        "cron" : [ "* 3 * * * ?", "30 * * * * ?" ],
        "active" : true,
        "service" : {
          "type": "kafka",
          "connectstring": "kafka-broker:9092",
          "username": "user",
          "password": "password",
          "custom": [
             {
                "key": "topic",
                "value": "mytopicname"
             },
             {
                "key": "header",
                "value": "source_kafka_headers_1.json"
             },
             {
               "key": "jwtuser",
               "value": "source_rest_headers_1.json"
             },
             {
               "key": "jwtpassword",
               "value": "source_rest_headers_1.json"
             },
             {
               "key": "jwtpost",
               "value": "jwtposturl"
             },
             {
               "key": "jwtparam",
               "value": "jwtparameters"
             },
             {
               "key": "jwtheader",
               "value": "jwtheaders"
             }
          ]
        },        
        "timetolive": "5d",
        "checks" : [ "check-kafka-1", "check-kafka-2", "check-cassandra-1" ],
        "replacements" : [
          {
            "key": "#replaceme1#",
            "value": [
               {
                  "order": 1,
                  "type": "inheritfrom",
                  "value": "inject-rest-1"
               }
            ]
          }
        ]
     }
    ],
    "checks": [
     {
        "checkid" : "check-kafka-1",
        "description" : "my example check with kafka",
        "active" : true,
        "service" : {
          "type": "kafka",
          "connectstring": "kafka-broker:9092",
          "username": "",
          "password": "",
          "custom": [
             {
                "key": "topic",
                "value": "mytopicname1"
             },
             {
                "key": "group.id",
                "value": "e2etests"
             }
          ]
       },
       "validations": [
          {
             "order": 1,
             "request": "",
             "response": [ "check_kafka_1.json" ],
             "type": "contains"
          }
       ],
        "maxwaittime" : "1h",
        "mandatory" : true,
        "injects" : [ "inject-mq-1" ]
     }, {
        "checkid" : "check-kafka-2",
        "description" : "my 2nd example check with kafka",
        "active" : true,
        "service" : {
          "type": "kafka",
          "connectstring": "kafka-broker:9092",
          "username": "",
          "password": "",
          "custom": [
             {
                "key": "topic",
                "value": "mytopicname2"
             },
             {
                "key": "group.id",
                "value": "e2etests"
             }
          ]
       },
       "validations": [
          {
             "order": 1,
             "request": "",
             "response": [ "check_kafka_2.json" ],
             "type": "contains"
          }
       ],
        "maxwaittime" : "1h",
        "mandatory" : false
     }, {
        "checkid" : "check-cassandra-1",
        "description" : "my example check with cassandra",
        "active" : true,
        "service" : {
          "type": "cassandra",
          "connectstring": "cassandra-db:9042",
          "username": "user",
          "password": "password"
        },
        "validations": [
          {
             "order": 1,
             "request": "check_cassandra_param_1.cql",
             "response": [ "check_cassandra_1.json" ],
             "type": "equals"
          }
        ],        
        "maxwaittime" : "1h",
        "mandatory" : true
     }, {
        "checkid" : "check-oracle-1",
        "description" : "my example check with oracle",
        "active" : true,
        "service" : {
          "type": "jdbc",
          "connectstring": "connectstring",
          "username": "user",
          "password": "password"
        },
        "validations": [
        {
          "order": 1,
          "request": "check_oracle_param_1.sql",
          "response": [ "check_oracle_1.json" ],
          "type": "equals"
        }],        
        "maxwaittime" : "1h",
        "mandatory" : false
     }, {
        "checkid" : "check-rest-1",
        "description" : "my example check with rest",
        "active" : true,
        "service" : {
          "type": "rest",
          "connectstring": "myendpointurl",
          "username": "user",
          "password": "password",
          "custom": [
            {
              "key": "type",
              "value": "POST"
            },
            {
              "key": "header",
              "value": "check_rest_headers_1.json"
            },
            {
              "key": "jwtuser",
              "value": "source_rest_headers_1.json"
            },
            {
              "key": "jwtpassword",
              "value": "source_rest_headers_1.json"
            },
            {
              "key": "jwtpost",
              "value": "jwtposturl"
            },
            {
              "key": "jwtparam",
              "value": "jwtparameters"
            },
            {
              "key": "jwtheader",
              "value": "jwtheaders"
            }
          ]
        },
        "validations": [
          {
              "order": 1,
              "request": "check_rest_payload_1.json",
              "response": [ "check_rest_1.json" ],
              "type": "equals"
          }
        ], 
        "maxwaittime" : "1h",
        "mandatory" : false,
        "checks" : [ "check-oracle-1" ],
        "result2random" : [ "attribute1", "attribute2" ]
      }
    ]
  }