package org.opentesting;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

import org.opentesting.dto.TestCaseDTO;
import org.opentesting.services.rest.DummyController;
import org.opentesting.services.rest.ReportingController;
import org.opentesting.services.rest.TemplateController;
import org.opentesting.services.rest.UploadController;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.junit.Assert;

import lombok.extern.slf4j.Slf4j;

/**
 * Rest Service Tests - this one will test planer, adapters and timer classes, too 
 */
@SpringBootTest
@Slf4j
class RestTests extends TestDataGenerator {

	@Autowired
	private DummyController dummyController;

	@Autowired
	private ReportingController reportingController;

	@Autowired
	private TemplateController templateController;

	@Autowired
	private UploadController uploadController;

	@Test
	void testDummyGet() {		

		Object result = dummyController.get(null, null);

		Assert.assertNotNull(result);
		
		log.info("##### testDummyGet done #####");
	}	

	@Test
	void testDummyPost() {		

		Object result = dummyController.post(null, "", null);

		Assert.assertNotNull(result);
		
		log.info("##### testDummyPost done #####");
	}	

	@Test
	void testReportingGet() {		

		ResponseEntity<TestCaseDTO> result = reportingController.get("1", 100, null);

		Assert.assertEquals(result.getStatusCode().value(), HttpStatus.NOT_FOUND.value());
		
		log.info("##### testReportingGet done #####");
	}	

	@Test
	void testReportingGetFile() {	
		
		ResponseEntity<String> result = reportingController.getFile("1", "1", null);

		Assert.assertEquals(result.getStatusCode().value(), HttpStatus.NOT_FOUND.value());
		
		log.info("##### testReportingGetFile done #####");
	}
	
	@Test
	void testReportingSearch() {	
		
		ResponseEntity<List<TestCaseDTO>> result = reportingController.search("hallo", 100, null);

		assertOK(result, "testReportingSearch");
		
		log.info("##### testReportingSearch done #####");
	}	

	@Test
	void testTemplateTestcase() {	
		
		Resource result = templateController.testcase(null);

		Assert.assertNotNull(result);
		
		log.info("##### testTemplateTestcase done #####");
	}

	@Test
	void testTemplateDashboard() {	
		
		Resource result = templateController.dashboard(null);

		Assert.assertNotNull(result);
		
		log.info("##### testTemplateDashboard done #####");
	}

	@Test
	void testUploadTestCases() throws IOException {		

		for (String tc : getTestCases()) {

			//upload files
			if ((new File(getTestCaseDir()+tc)).listFiles() != null) {
				for (File f : (new File(getTestCaseDir()+tc)).listFiles()) {
					ResponseEntity<String> result = uploadController.fileupload(Files.readString(Paths.get(f.getAbsolutePath())), tc, f.getName(), null);
					Assert.assertNotNull(result);
				}	
			}
			
			//upload test case
			ResponseEntity<String> result = uploadController.testupload(Files.readString(Paths.get(getTestCaseDir()+tc+".json")), null);
			Assert.assertNotNull(result);

		}			
		
		log.info("##### testUploadTestCases done #####");
	}

	private void assertOK(ResponseEntity result, String method) {
		Assert.assertEquals(result.getStatusCode().value(), HttpStatus.OK.value());
	}

}
