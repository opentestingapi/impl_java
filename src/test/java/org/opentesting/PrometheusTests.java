package org.opentesting;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.services.prometheus.Prometheus;
import org.opentesting.util.OpenTestingConversion;

import java.util.List;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.junit.Assert;

import io.micrometer.core.instrument.Meter;
import lombok.extern.slf4j.Slf4j;

/**
 * Prometheus Service Tests
 */
@SpringBootTest
@Slf4j
class PrometheusTests extends TestDataGenerator {

	@Autowired
	private Prometheus prometheus;

	@Autowired
	private OpenTestingConversion e2EConversion;

	private boolean checkMeters(String name) {
		for (Meter meter : prometheus.getMeterRegistry().getMeters()) {
			if (meter.getId().getName().startsWith("e2e.")) {
				String json = "";
				try {
					json = e2EConversion.object2json(meter);
				} catch (Exception e) {
					log.error("transformation failed", e);
				}
				//System.out.println(json);
				if (json.contains(name)) return true; 
			}
		}		
		return false;
	}

	@Test
	void testIncrementCheck() {		

		//create Counter
		TestCaseCheckDTO check = this.createCheck("mycheckid");
		prometheus.incrementCheck("testid", check, List.of("bar", "foo"));

		Assert.assertTrue(checkMeters("mycheckid"));
		
		log.info("##### testIncrementCheck done #####");
	}

	@Test
	void testIncrementCounter() {

		prometheus.incrementCounter("hallo", 1);

		Assert.assertTrue(checkMeters("hallo"));
		
		log.info("##### incrementCounter done #####");
	}

	@Test
	void testIncrementExecution() {

		prometheus.incrementExecution("testexec", "testtype");

		Assert.assertTrue(checkMeters("testexec"));
		
		log.info("##### incrementExecution done #####");
	}

	@Test
	void testIncrementInject() {		

		TestCaseInjectionDTO inject = this.createInject();
		prometheus.incrementInject("test123", inject, true, null);

		Assert.assertTrue(checkMeters(inject.getInjectid()));
		
		log.info("##### incrementInject done #####");
	}

	@Test
	void testIncrementSchedule() {		

		TestCaseDTO test = this.createEmptyTest();
		prometheus.incrementSchedule(test, true);

		Assert.assertTrue(checkMeters(test.getId()));
		
		log.info("##### incrementSchedule done #####");
	}

	@Test
	void testIncrementTests() {		

		TestCaseDTO test = this.createEmptyTest();
		prometheus.incrementTests(test);

		Assert.assertTrue(checkMeters(test.getId()));
		
		log.info("##### incrementTests done #####");
	}

}
