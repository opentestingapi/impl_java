package org.opentesting;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseRandomDataDTO;
import org.opentesting.dto.TestCaseRandomGeneratorDTO;
import org.opentesting.dto.TestCaseReplacementDTO;
import org.opentesting.services.adapter.cassandra.Cassandra;
import org.opentesting.services.random.RandomGenerator;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.util.Assert;

import java.util.ArrayList;
import java.util.List;

/**
 * Random Tests
 */
@SpringBootTest
@Slf4j
public class RandomTests extends TestDataGenerator {

    @Autowired
    private RandomGenerator randomGenerator;

    @Autowired
    private Cassandra cassandra;

    @Autowired
    private ObjectMapper objectmapper;

    @Test
    void testList() {

        List<TestCaseReplacementDTO> replacements = new ArrayList<>();
        TestCaseReplacementDTO rep = new TestCaseReplacementDTO();
        rep.setReplacement("#testlist#");
        List<String> values = List.of("aaa", "bbb", "ccc");
        rep.setOptionlist(values);
        replacements.add(rep);
        TestCaseRandomGeneratorDTO gen = new TestCaseRandomGeneratorDTO();
        gen.setReplacements(replacements);

        TestCaseRandomDataDTO result = randomGenerator.create(gen);

        String value = result.getRandomdata().get("#testlist#");
        Assert.isTrue(value.length() == 3 && values.contains(value), "generated value invalid");
    }

    @Test
    void testUuid() {

        List<TestCaseReplacementDTO> replacements = new ArrayList<>();
        TestCaseReplacementDTO rep = new TestCaseReplacementDTO();
        rep.setReplacement("#testuuid#");
        rep.setUseuuid(true);
        replacements.add(rep);
        TestCaseRandomGeneratorDTO gen = new TestCaseRandomGeneratorDTO();
        gen.setReplacements(replacements);

        TestCaseRandomDataDTO result = randomGenerator.create(gen);

        String value = result.getRandomdata().get("#testuuid#");
        Assert.isTrue(value.length() == 36, "generated value invalid");
    }

    @Test
    void testCustom() {

        List<TestCaseReplacementDTO> replacements = new ArrayList<>();
        TestCaseReplacementDTO rep = new TestCaseReplacementDTO();
        rep.setReplacement("#testcustom#");
        String custom = "abcdefghijklmnopqrstuvwxyz0123456789!@#&()–[{}]:;',?/*";
        rep.setCustom(custom);
        rep.setCustomlength(10);
        replacements.add(rep);
        TestCaseRandomGeneratorDTO gen = new TestCaseRandomGeneratorDTO();
        gen.setReplacements(replacements);

        TestCaseRandomDataDTO result = randomGenerator.create(gen);

        String value = result.getRandomdata().get("#testcustom#");
        Assert.isTrue(value.length() == 10, "generated value invalid");

        for (String mychar : value.split("")) {
            Assert.isTrue(custom.contains(mychar), "generated value invalid");
        }
    }

    @Test
    void testSuffix() {

        List<TestCaseReplacementDTO> replacements = new ArrayList<>();
        TestCaseReplacementDTO rep = new TestCaseReplacementDTO();
        rep.setReplacement("#testsuffix#");
        List<String> values = List.of("aaa", "bbb", "ccc");
        rep.setOptionlist(values);
        rep.setSuffixactualms(true);
        rep.setSuffixlength(107);
        replacements.add(rep);
        TestCaseRandomGeneratorDTO gen = new TestCaseRandomGeneratorDTO();
        gen.setReplacements(replacements);

        TestCaseRandomDataDTO result = randomGenerator.create(gen);

        String value = result.getRandomdata().get("#testsuffix#");
        System.out.println(value);
        Assert.isTrue(value.length() == 110, "generated value invalid");
    }

    @Test
    void testSuffix2() {

        List<TestCaseReplacementDTO> replacements = new ArrayList<>();
        TestCaseReplacementDTO rep = new TestCaseReplacementDTO();
        rep.setReplacement("#testsuffix#");
        List<String> values = List.of("aaa", "bbb", "ccc");
        rep.setOptionlist(values);
        rep.setSuffixactualms(true);
        rep.setSuffixlength(-6);
        replacements.add(rep);
        TestCaseRandomGeneratorDTO gen = new TestCaseRandomGeneratorDTO();
        gen.setReplacements(replacements);

        TestCaseRandomDataDTO result = randomGenerator.create(gen);

        String value = result.getRandomdata().get("#testsuffix#");
        Assert.isTrue(value.length() == 3, "generated value invalid");
    }

    @Test
    void testresult2random() {
        String response = "{\"ausleitungerfolgt\": true, \"nachrichtmetadaten\": {\"annahmezeitpunkt\": \"2021-09-22 05:24:40.159Z\", \"abflugdatum\": \"2021-09-23\", \"abfluguhrzeit\": null, \"abflugutcoffset\": null, \"abflugflughafen\": \"CDG\", \"ankunftflughafen\": \"HAM\", \"ausleitungerfolgt\": true, \"fehlercodes\": [\"RDVGK02006\"], \"flugnummer\": \"0aeca167-ae4e-4d57-ac7f-6bd3321c06c6\", \"nachrichtformat\": \"PNRGOV\", \"nachrichtformatversion\": \"11.1\", \"dateneingangskanal\": \"MQß\", \"datenlieferant\": \"VP\", \"datenquelle\": \"LH\", \"rohdatenspeicherid\": \"RS-7f46920b-a618-45be-ae24-4654146e610b\", \"rohdaten\": null, \"datenlieferungid\": \"DL-5948bf82-4e36-3a4f-8ca9-d0b379505ff0ß\", \"datenversandzeitpunkt\": \"2021-09-22 05:24:40.000Z\", \"pushtyp\": \"PNR-48\"}}";
        String testid = "test1";
        TestCaseCheckDTO check = createCheck("testcheck1");
		check.setSuccess(null);
        List<String> r2r = new ArrayList<>();
        r2r.add("datenlieferungid");
        check.setResult2random(r2r);
        TestCaseReplacementDTO rep = new TestCaseReplacementDTO();
        rep.setReplacement("#testsuffix#");
        List<String> values = List.of("aaa", "bbb", "ccc");
        rep.setOptionlist(values);
        rep.setSuffixactualms(true);
        rep.setSuffixlength(-6);
        List<TestCaseReplacementDTO> replacements = new ArrayList<>();
        replacements.add(rep);
        TestCaseRandomGeneratorDTO gen = new TestCaseRandomGeneratorDTO();
        gen.setReplacements(replacements);
        TestCaseRandomDataDTO randomdata = randomGenerator.create(gen);

        try {
            log.info(objectmapper.writeValueAsString(check));
            log.info(objectmapper.writeValueAsString(randomdata));
        } catch (JsonProcessingException e) {            
            e.printStackTrace();
        }

        randomdata = cassandra.addCheckResult2Random(testid, check, randomdata, response);

        try {
            log.info(objectmapper.writeValueAsString(randomdata));
        } catch (JsonProcessingException e) {            
            e.printStackTrace();
        }

        Assert.isTrue(randomdata.getRandomdata().containsKey("#testcheck1.datenlieferungid#"), "datenlieferungid not added");
    }

}
