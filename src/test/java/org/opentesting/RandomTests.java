package org.opentesting;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.TestCaseRandomDataDTO;
import org.opentesting.dto.TestCaseReplacementValueDTO;
import org.opentesting.dto.api1_0.TestCaseReplacementDTOapi1_0;
import org.opentesting.dto.api1_0.TestCaseReplacementValueDTOapi1_0;
import org.opentesting.services.adapter.cassandra.Cassandra;
import org.opentesting.services.random.RandomData;
import org.opentesting.util.OpenTestingConversion;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.curiousoddman.rgxgen.RgxGen;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.util.Assert;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * Random Tests
 */
@SpringBootTest
@Slf4j
public class RandomTests extends TestDataGenerator {

    @Autowired
    private RandomData randomData;

    @Autowired
    private Cassandra cassandra;

    @Autowired
    private ObjectMapper objectmapper;

    @Test
    @SneakyThrows
    void testList() {
        
        TestCaseReplacementValueDTOapi1_0 rep = new TestCaseReplacementValueDTOapi1_0();
        rep.setType(TestCaseReplacementValueDTO.TYPE_LIST);
        String valueList = "aaa|bbb|ccc";
        rep.setValue(valueList);        

        TestCaseReplacementDTOapi1_0 repl = new TestCaseReplacementDTOapi1_0("#testlist#", List.of(rep), 3);
        TestCaseInjectionDTO inject = this.createInject();
        inject.setReplacements(List.of(repl));        

        String value = randomData.getRandomData("test1", inject).get("#testlist#");
        log.info(value.length()+" "+value+" "+valueList);
        Assert.isTrue(value.length() == 3 && valueList.contains(value), "generated value invalid");
    }    

    @Test
    @SneakyThrows
    void testNow() {

        TestCaseReplacementValueDTOapi1_0 rep = new TestCaseReplacementValueDTOapi1_0();
        rep.setType(TestCaseReplacementValueDTO.TYPE_NOW);
        String valueFormat = "yyyy-MM-dd HH:mm";
        rep.setValue(valueFormat);  
        String param = "+1d";  
        rep.setParam(param);

        TestCaseReplacementDTOapi1_0 repl = new TestCaseReplacementDTOapi1_0("#testformat#", List.of(rep), 50);
        TestCaseInjectionDTO inject = this.createInject();
        inject.setReplacements(List.of(repl));        

        String value = randomData.getRandomData("1", inject).get("#testformat#");

        LocalDateTime target = LocalDateTime.now().plusSeconds(OpenTestingConversion.toSeconds(param)); 
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(valueFormat);
        String targetvalue = target.format(formatter);

        log.info(value+" "+targetvalue);
        Assert.isTrue(value.equals(targetvalue), "generated value invalid");
    }

    @Test
    @SneakyThrows
    void testInheritfrom() {

        TestCaseReplacementValueDTOapi1_0 rep = new TestCaseReplacementValueDTOapi1_0();
        rep.setType(TestCaseReplacementValueDTO.TYPE_LIST);
        String valueList = "aaa|bbb|ccc";
        rep.setValue(valueList);        

        TestCaseReplacementDTOapi1_0 repl = new TestCaseReplacementDTOapi1_0("#testinherit#", List.of(rep), 3);
        TestCaseInjectionDTO inject = this.createInject();
        inject.setInjectid("inject1");
        inject.setReplacements(List.of(repl)); 

        TestCaseReplacementValueDTOapi1_0 rep2 = new TestCaseReplacementValueDTOapi1_0();
        rep2.setType(TestCaseReplacementValueDTO.TYPE_INHERITFROM);
        rep2.setValue("inject1");
        
        TestCaseReplacementDTOapi1_0 repl2 = new TestCaseReplacementDTOapi1_0("#testinherit#", List.of(rep2), 3);
        TestCaseInjectionDTO inject2 = this.createInject();
        inject2.setInjectid("inject2");
        inject2.setReplacements(List.of(repl2)); 

        String value = randomData.getRandomData("test1", inject).get("#testinherit#");
        String value2 = randomData.getRandomData("test1", inject2).get("#testinherit#");

        log.info(value+" "+value2);
        Assert.isTrue(value.equals(value2), "inherit value invalid");
    }

    @Test
    @SneakyThrows
    void testRegex() {

        TestCaseReplacementValueDTOapi1_0 rep = new TestCaseReplacementValueDTOapi1_0();
        rep.setType(TestCaseReplacementValueDTO.TYPE_REGEX);
        //UUID
        String regex = "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}";
        rep.setValue(regex);    

        RgxGen rgxGen = new RgxGen(rep.getValue());
        String prevalue = rgxGen.generate();

        TestCaseReplacementDTOapi1_0 repl = new TestCaseReplacementDTOapi1_0("#testregex#", List.of(rep), 100);
        TestCaseInjectionDTO inject = this.createInject();
        inject.setReplacements(List.of(repl));        

        String value = randomData.getRandomData("test1", inject).get("#testregex#");

        log.info(UUID.randomUUID().toString());
        log.info(prevalue);
        log.info(value);
        log.info(regex);
        Assert.isTrue(prevalue.matches(regex), "regex prevalue invalid");
        Assert.isTrue(value.matches(regex), "regex value invalid");
    }

    @Test
    @SneakyThrows
    void testFile() {

        String testid = "test1";
        String filename = "samplefile.txt";

        TestCaseReplacementValueDTOapi1_0 rep = new TestCaseReplacementValueDTOapi1_0();
        rep.setType(TestCaseReplacementValueDTO.TYPE_FILE);        
        rep.setValue(filename);
        
        StringBuffer samplefile = new StringBuffer();
        samplefile.append("testval1\n");
        samplefile.append("testval2\n");
        samplefile.append("testval3\n");
        randomData.storeFile(testid, filename, samplefile.toString());

        TestCaseReplacementDTOapi1_0 repl = new TestCaseReplacementDTOapi1_0("#testfile#", List.of(rep), 3);
        TestCaseInjectionDTO inject = this.createInject();
        inject.setReplacements(List.of(repl));        

        String value = randomData.getRandomData(testid, inject).get("#testfile#");

        Assert.isTrue(samplefile.toString().contains(value), "file value invalid");
    }

    @Test
    @SneakyThrows
    void testresult2random() {

        String response = "{\"ausleitungerfolgt\": true, \"nachrichtmetadaten\": {\"annahmezeitpunkt\": \"2021-09-22 05:24:40.159Z\", \"abflugdatum\": \"2021-09-23\", \"abfluguhrzeit\": null, \"abflugutcoffset\": null, \"abflugflughafen\": \"CDG\", \"ankunftflughafen\": \"HAM\", \"ausleitungerfolgt\": true, \"fehlercodes\": [\"RDVGK02006\"], \"flugnummer\": \"0aeca167-ae4e-4d57-ac7f-6bd3321c06c6\", \"nachrichtformat\": \"PNRGOV\", \"nachrichtformatversion\": \"11.1\", \"dateneingangskanal\": \"MQß\", \"datenlieferant\": \"VP\", \"datenquelle\": \"LH\", \"rohdatenspeicherid\": \"RS-7f46920b-a618-45be-ae24-4654146e610b\", \"rohdaten\": null, \"datenlieferungid\": \"DL-5948bf82-4e36-3a4f-8ca9-d0b379505ff0ß\", \"datenversandzeitpunkt\": \"2021-09-22 05:24:40.000Z\", \"pushtyp\": \"PNR-48\"}}";
        String testid = "test1";
        TestCaseCheckDTO check = createCheck("testcheck1");
		check.setSuccess(null);
        List<String> r2r = new ArrayList<>();
        r2r.add("datenlieferungid");
        check.setResult2random(r2r);

        TestCaseRandomDataDTO randomdata = new TestCaseRandomDataDTO();

        try {
            log.info(objectmapper.writeValueAsString(check));
            log.info(objectmapper.writeValueAsString(randomdata));
        } catch (JsonProcessingException e) {            
            e.printStackTrace();
        }

        randomdata = cassandra.addCheckResult2Random(testid, check, randomdata, response);

        try {
            log.info(objectmapper.writeValueAsString(randomdata));
        } catch (JsonProcessingException e) {            
            e.printStackTrace();
        }

        Assert.isTrue(randomdata.getRandomdata().containsKey("#testcheck1.datenlieferungid#"), "datenlieferungid not added");
    }

}
