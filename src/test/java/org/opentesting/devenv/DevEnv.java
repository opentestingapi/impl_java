package org.opentesting.devenv;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.assertj.core.util.Arrays;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.containers.Container.ExecResult;

import org.opentesting.devenv.containers.*;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

/**
 * Example Development Environment
 */
@Slf4j
@SuppressWarnings({"rawtypes"})
public class DevEnv {

    /**
     * - Docker and Podman use different networkmodes 
     * - Linux and Windows use different Sockets
     */
    //private static final String NETWORKMODE = "bridge"; //Docker
    private static final String NETWORKMODE = "slirp4netns"; //Podman
    //private static final String DOCKERSOCKET = "unix:///var/run/docker.sock"; //Unix Docker
    private static final String DOCKERSOCKET = "unix:///run/user/1001/podman/podman.sock"; //Unix Podman, please replace 1001 with your UID
    //private static final String DOCKERSOCKET = "tcp://localhost:2375"; //Windows Docker #1
    //private static final String DOCKERSOCKET = "npipe:////./pipe/docker_engine"; //Windows Docker #2

    //memory values
    public static final long MB256 = 256*1024*1024;
    public static final long MB512 = 512*1024*1024;
    public static final long MB1024 = 1024*1024*1024;
    public static final long MB2048 = 2048*1024*1024;

    //store running containers
    public static List<GenericContainer> containers = new ArrayList<>();   

    @SneakyThrows
    public static void main(String[] args) {        

        //set socket
        updateEnv("DOCKER_HOST", DOCKERSOCKET);       

        //here we will add all required containers
        log.info("creating containers...");

        //Cassandra
        create(Cassandra.getInstance(NETWORKMODE));  
        create(CassandraInit.getInstance());
        
        //Grafana
        create(Grafana.getInstance(MB512)); //will use host network to get access to other containers
        create(GrafanaInit.getInstance());

        //Kafka        
        create(Kafka.getInstance(NETWORKMODE, MB1024));
        create(KafkaInit.getInstance());
        //create(KafkaUi.getInstance(MB1024)); //will use host network to get access to Kafka container

        //Keycloak
        create(Keycloak.getInstance(NETWORKMODE, MB1024));

        //Opentesting
        //create(Opentesting.getInstance(MB1024)); //will use host network to get access to other containers

        //Oracle
        create(Oracle.getInstance(NETWORKMODE));

        //Postgres
        create(Postgres.getInstance(NETWORKMODE, MB512));

        //Prometheus
        create(Prometheus.getInstance(MB512));

        //Zipkin
        create(Zipkin.getInstance(NETWORKMODE, MB256));
        
        //start parallel
        log.info("starting containers...");
        containers.parallelStream().forEach(cont -> start(cont));

        //keep it running
        log.info("###################################################");
        log.info("Startup done - please stop after usage using Ctrl+C");
        log.info("###################################################");
        while (true) {

            //container, do not call getRunning as it will throw broken pipe errors
            StringBuilder sb = new StringBuilder();    
            containers.stream().forEach(cont -> sb.append(cont.getClass().getSimpleName()+", "));             
            log.info(sb.toString());            

            Thread.sleep(60000);            
        }
    }

    private static void create(GenericContainer cont) {
        containers.add(cont);
        log.info(cont.getClass().getSimpleName()+" created");        
    }

    private static void start(GenericContainer cont) {
        cont.start();
        log.info(cont.getClass().getSimpleName()+" started");
    }

    public static GenericContainer get(Class clazz) {
        for (GenericContainer cont : containers) {
            if (cont.getClass().getSimpleName().equals(clazz.getSimpleName())) return cont;
        }
        throw new RuntimeException(clazz+" not found");
    }
    
    @SneakyThrows
    private static void execCommand(GenericContainer cont, String... command) {   
        log.info(cont.getClass().getSimpleName()+" executing: "+Arrays.asList(command));
        ExecResult res = cont.execInContainer(command);
        log.info(cont.getClass().getSimpleName()+" initialized (Exit "+res.getExitCode()+"):");
        log.info("Stdout: "+res.getStdout());
        log.info("Stderr: "+res.getStderr());        
    }

    @SuppressWarnings({ "unchecked" })
    public static void updateEnv(String name, String val) throws ReflectiveOperationException {
        Map<String, String> env = System.getenv();
        Field field = env.getClass().getDeclaredField("m");
        field.setAccessible(true);
        ((Map<String, String>) field.get(env)).put(name, val);
    }
    
}