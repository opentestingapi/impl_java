package org.opentesting.devenv;

import java.util.ArrayList;
import java.util.List;

import org.testcontainers.containers.GenericContainer;
import org.testcontainers.utility.TestcontainersConfiguration;
import org.opentesting.common.Sleeper;
import org.opentesting.devenv.containers.*;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

/**
 * Example Development Environment
 */
@Slf4j
@SuppressWarnings({"rawtypes"})
public class DevEnv {

    //memory values
    public static final long MB256 = 256*1024*1024;
    public static final long MB512 = 512*1024*1024;
    public static final long MB1024 = 1024*1024*1024;
    public static final long MB2048 = 2048*1024*1024;

    //store running containers
    public static List<GenericContainer> containers = new ArrayList<>();   

    @SneakyThrows
    public static void init(boolean isSystemtest){

        ConfigureDevEnv configure = new ConfigureDevEnv();  

        //set socket if detected
        TestcontainersConfiguration.getInstance().updateUserConfig("docker.host", configure.getDockersocket());

        //here we will add all required containers
        log.info("creating containers...");

        //Cassandra
        create(Cassandra.getInstance(configure.getNetworkmode()));  
        create(CassandraInit.getInstance());
        
        //Grafana (not required for systemtests)
        //if (!isSystemtest) create(Grafana.getInstance()); //will use host network to get access to other containers
        //if (!isSystemtest) create(GrafanaInit.getInstance());

        //Kafka        
        create(Kafka.getInstance(configure.getNetworkmode(), MB1024));
        create(KafkaInit.getInstance());
        //if (!isSystemtest) create(KafkaUi.getInstance()); //will use host network to get access to Kafka container, not required for systemtests

        //Keycloak
        create(Keycloak.getInstance(configure.getNetworkmode(), MB1024));

        //Opentesting (not required for systemtests)
        //if (!isSystemtest) create(Opentesting.getInstance()); //will use host network to get access to other containers

        //Oracle
        create(Oracle.getInstance(configure.getNetworkmode()));

        //Postgres
        create(Postgres.getInstance(configure.getNetworkmode(), MB512));

        //S3 (MinIO)
        create(MinioS3.getInstance(configure.getNetworkmode(), MB512));

        //Prometheus (not required for systemtests)
        //if (!isSystemtest) create(Prometheus.getInstance());

        //Sonarqube (not required for systemtests)
        //if (!isSystemtest) create(Sonarqube.getInstance(configure.getNetworkmode()));

        //Zipkin (not required for systemtests)
        //if (!isSystemtest) create(Zipkin.getInstance(configure.getNetworkmode(), MB256));
        
        //start parallel
        log.info("starting containers...");
        containers.parallelStream().forEach(cont -> start(cont));

        //keep it running
        log.info("###################################################");
        log.info("Startup Testenvironment Done");
        log.info("###################################################"); 
    }

    @SneakyThrows
    public static void main(String[] args) {   

        init(false);
            
        log.info("Stop after usage using Ctrl+C");
        log.info("###################################################");

        while (true) {

            //container, do not call getRunning as it will throw broken pipe errors
            StringBuilder sb = new StringBuilder();    
            containers.stream().forEach(cont -> sb.append(cont.getClass().getSimpleName()+", "));             
            log.info(sb.toString());            

            Sleeper.sleep(60000);            
        }
    }

    /**
     * stop containers
     */
    public static void stop() {
        containers.stream().forEach(cont -> cont.stop());     
    }

    private static void create(GenericContainer cont) {
        containers.add(cont);
        log.info(cont.getClass().getSimpleName()+" created");        
    }

    private static void start(GenericContainer cont) {
        cont.start();
        log.info(cont.getClass().getSimpleName()+" started");
    }
    
}