package org.opentesting.devenv.containers;

import org.testcontainers.containers.GenericContainer;
import org.testcontainers.images.builder.ImageFromDockerfile;
import org.testcontainers.utility.DockerImageName;

public class Opentesting extends GenericContainer<Opentesting> {

    public static final String IMAGE = "ghcr.io/opentestingapi/opentesting";

    private static GenericContainer<Opentesting> instance = null;

    @SuppressWarnings("resource") //testcontainers will do an automatic cleanup
    public static GenericContainer<Opentesting> getInstance(long memory) {

        if (instance == null) {
            instance = new Opentesting(DockerImageName.parse(IMAGE))
                .withCreateContainerCmdModifier(cmd -> cmd.withName("testcontainers_opentesting"))
                .withCreateContainerCmdModifier(cmd -> cmd.getHostConfig().withMemory(memory))
                .withEnv("JAVA_TOOL_OPTIONS", "-XX:MaxRAMPercentage=75.0")
                .withNetworkMode("host") //we do need access to other containers, we should use host network
                .withReuse(false);

            //add fixed port 
            ((Opentesting) instance).configurePorts(50000, 50000);
        }

        return instance;
    }

    public Opentesting(ImageFromDockerfile withFileFromClasspath) {
        super(withFileFromClasspath);
    }

    public Opentesting(DockerImageName dockerImageName) {
        super(dockerImageName);
    }

    public void configurePorts(int hostPort, int containerPort) {
        super.addFixedExposedPort(hostPort, containerPort);        
    }
    
}