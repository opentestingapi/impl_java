package org.opentesting.devenv.containers;

import org.testcontainers.containers.GenericContainer;
import org.testcontainers.images.builder.ImageFromDockerfile;
import org.testcontainers.utility.DockerImageName;

public class Keycloak extends GenericContainer<Keycloak> {

    public static final String IMAGE = "quay.io/keycloak/keycloak";

    private static GenericContainer<Keycloak> instance = null;

    @SuppressWarnings("resource") //testcontainers will do an automatic cleanup
    public static GenericContainer<Keycloak> getInstance(String networkmode, long memory) {

        if (instance == null) {
            instance = new Keycloak(DockerImageName.parse(IMAGE))
                .withCreateContainerCmdModifier(cmd -> cmd.withName("testcontainers_keycloak_"+System.currentTimeMillis()))
                .withCreateContainerCmdModifier(cmd -> cmd.getHostConfig().withMemory(memory))
                .withEnv("KEYCLOAK_ADMIN", "admin")
                .withEnv("KEYCLOAK_ADMIN_PASSWORD", "admin")
                .withCommand("start-dev")
                .withNetworkMode(networkmode)
                .withReuse(false);                

            //add fixed port
            ((Keycloak) instance).configurePorts(8080, 8080);
        }

        return instance;
    }

    public Keycloak(ImageFromDockerfile withFileFromClasspath) {
        super(withFileFromClasspath);
    }

    public Keycloak(DockerImageName dockerImageName) {
        super(dockerImageName);
    }

    public void configurePorts(int hostPort, int containerPort) {
        super.addFixedExposedPort(hostPort, containerPort);        
    }
    
}