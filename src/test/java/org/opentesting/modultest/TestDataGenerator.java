package org.opentesting.modultest;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.TestCaseDataExtractionDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.TestCaseRandomDataDTO;
import org.opentesting.dto.TestCaseReplacementValueDTO;
import org.opentesting.dto.TestCaseValidationDTO;
import org.opentesting.dto.api1.TestCaseCheckDTOapi1;
import org.opentesting.dto.api1.TestCaseCustomParameterDTOapi1;
import org.opentesting.dto.api1.TestCaseDTOapi1;
import org.opentesting.dto.api1.TestCaseDataExtractionDTOapi1;
import org.opentesting.dto.api1.TestCaseInjectionDTOapi1;
import org.opentesting.dto.api1.TestCaseReplacementDTOapi1;
import org.opentesting.dto.api1.TestCaseReplacementValueDTOapi1;
import org.opentesting.dto.api1.TestCaseServiceDTOapi1;
import org.opentesting.dto.api1.TestCaseValidationDTOapi1;

/**
 * generate data for tests
 */
public class TestDataGenerator {

    private static final String TESTFOLDER = "opentesting/systemtests/";

    private Random random = new SecureRandom();

    protected TestCaseDTO createEmptyTest() {

        TestCaseDTO tc = new TestCaseDTOapi1();
        tc.setTestapi("1.0");   
        tc.setId("testid1"); 
        tc.setDescription("testdesc");
        tc.setLabels(List.of("bar", "foo")); 
        return tc;
    }    

    protected TestCaseInjectionDTO createInject() {

        String timerid = "12345";        
        
        TestCaseReplacementValueDTOapi1 val = new TestCaseReplacementValueDTOapi1();
        val.setOrder(1);
        val.setType(TestCaseReplacementValueDTO.TYPE_LIST);
        val.setValue("aaaa|bbbb");
        
        TestCaseReplacementDTOapi1 rg = new TestCaseReplacementDTOapi1();
        rg.setKey("#hallo#");
        rg.setMaxlength(3);
        rg.setValue(List.of(val));

        TestCaseInjectionDTO inject = new TestCaseInjectionDTOapi1();
        inject.setInjectid("inject1");
        inject.setCron(List.of("10 * * * * * ?"));
        inject.setService(createService());
        inject.setSourcefile("source.json");
        inject.setChecks(List.of("check1"));
        inject.setReplacements(List.of(rg));
        inject.setTimerid(timerid);
        inject.setInstanceid(timerid+"_"+random.nextInt());
        inject.setStartts(LocalDateTime.now());
        inject.setSchedulets(LocalDateTime.now());
        return inject;
    }  

    protected TestCaseServiceDTOapi1 createService() {
        
        TestCaseCustomParameterDTOapi1 c = new TestCaseCustomParameterDTOapi1("topic", "mytopic");
        
        TestCaseServiceDTOapi1 service = new TestCaseServiceDTOapi1();
        service.setConnectstring("kafka-broker");
        service.setType("kafka");
        service.setPassword("password");
        service.setUsername("username");
        service.setCustom(List.of(c));
        return service;
    }

    protected TestCaseCheckDTO createCheck(String checkid) {

        String testid = "testid";

		Map<String, String> randomdata = new HashMap<String, String>();
		randomdata.put("#hallo#", "Hallo Welt!");
        TestCaseRandomDataDTO r = new TestCaseRandomDataDTO();
        r.setDatamap(randomdata);

        TestCaseValidationDTOapi1 val = new TestCaseValidationDTOapi1();
        val.setOrder(1);
        val.setRequest("requestfile");
        val.setResponse(List.of("responsefile"));
        val.setType(TestCaseValidationDTO.TYPE_CONTAINS);
        
		TestCaseCheckDTO check = new TestCaseCheckDTOapi1();
        check.setCheckid(checkid);
        check.setService(createService());
        check.setValidations(List.of(val));
        check.setInjects(List.of("dummy-inject-1"));
        check.setChecks(List.of("dummy-check-1"));

        //add old style of extract data
        check.setResult2random(List.of("attribute1"));

        //add new style of extract data
        TestCaseDataExtractionDTOapi1 de = new TestCaseDataExtractionDTOapi1();
        de.setAttribute("attribute2");
        de.setSource(TestCaseDataExtractionDTO.SOURCE_PAYLOAD);
        de.setTarget(checkid+".myattribute2");
        check.addDataextraction(de);

        check.setInstanceid(checkid+"_"+random.nextInt());
        check.setTestid(testid);
        check.setStartts(LocalDateTime.now());
        check.setTargetts(LocalDateTime.now().plusMinutes(5));
        check.setRandomdata(r);
        return check;
    }  
    
    protected List<String> getTestCases() {
        List<String> tests = new ArrayList<>();
		ClassLoader classLoader = TestDataGenerator.class.getClassLoader();
		File file = new File(classLoader.getResource(TESTFOLDER).getFile());
		for (File folder : file.listFiles()) {
			if (folder.isDirectory()) tests.add(folder.getName());
		}
		Collections.sort(tests);
		return tests;
    }

    protected String readFile(String file) throws IOException {
        ClassLoader classLoader = TestDataGenerator.class.getClassLoader();
        URL resource = classLoader.getResource(TESTFOLDER + file);
        File fileObj = new File(resource.getFile());
        return Files.readString(fileObj.toPath());
    }

    protected String getTestCaseDir() {
        return TESTFOLDER;
    }

}
