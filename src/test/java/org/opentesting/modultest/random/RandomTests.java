package org.opentesting.modultest.random;

import org.opentesting.dto.ResponseDTO;
import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDataExtractionDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.TestCaseRandomDataDTO;
import org.opentesting.dto.TestCaseReplacementValueDTO;
import org.opentesting.dto.api1.TestCaseDataExtractionDTOapi1;
import org.opentesting.dto.api1.TestCaseReplacementDTOapi1;
import org.opentesting.dto.api1.TestCaseReplacementValueDTOapi1;
import org.opentesting.modultest.TestDataGenerator;
import org.opentesting.services.adapter.cassandra.Cassandra;
import org.opentesting.services.random.RandomData;
import org.opentesting.util.OpenTestingConversion;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.curiousoddman.rgxgen.RgxGen;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.junit.Assert;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * Random Tests
 */
@SpringBootTest
@Slf4j
class RandomTests extends TestDataGenerator {

    @Autowired
    private RandomData randomData;

    @Autowired
    private Cassandra cassandra;

    @Autowired
    private ObjectMapper objectmapper;

    @Test
    @SneakyThrows
    void testClone() {
        TestCaseInjectionDTO injectDto = this.createInject();
        String jsonSource = objectmapper.writeValueAsString(injectDto);
        TestCaseInjectionDTO injectDtoCopy = objectmapper.readValue(jsonSource, TestCaseInjectionDTO.class);
        Assert.assertEquals(injectDtoCopy.getInjectid(), injectDto.getInjectid());
    }

    @Test
    @SneakyThrows
    void testList() {
        
        TestCaseReplacementValueDTOapi1 rep = new TestCaseReplacementValueDTOapi1();
        rep.setType(TestCaseReplacementValueDTO.TYPE_LIST);
        String valueList = "aaa|bbb|ccc";
        rep.setValue(valueList);        

        TestCaseReplacementDTOapi1 repl = new TestCaseReplacementDTOapi1();
        repl.setKey("#testlist#");
        repl.setMaxlength(3);
        repl.setValue(List.of(rep));
        TestCaseInjectionDTO inject = this.createInject();
        inject.setReplacements(List.of(repl));        

        String value = randomData.getRandomData("test1", inject).get("#testlist#");
        log.info(value.length()+" "+value+" "+valueList);
        Assert.assertTrue(value.length() == 3 && valueList.contains(value));
    }    

    @Test
    @SneakyThrows
    void testNow() {

        TestCaseReplacementValueDTOapi1 rep = new TestCaseReplacementValueDTOapi1();
        rep.setType(TestCaseReplacementValueDTO.TYPE_NOW);
        String valueFormat = "yyyy-MM-dd HH:mm";
        rep.setValue(valueFormat);  
        String param = "+1d";  
        rep.setParam(param);

        TestCaseReplacementDTOapi1 repl = new TestCaseReplacementDTOapi1();
        repl.setKey("#testformat#");
        repl.setMaxlength(50);
        repl.setValue(List.of(rep));
        TestCaseInjectionDTO inject = this.createInject();
        inject.setReplacements(List.of(repl));        

        String value = randomData.getRandomData("1", inject).get("#testformat#");

        LocalDateTime target = LocalDateTime.now().plusSeconds(OpenTestingConversion.toSeconds(param)); 
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(valueFormat);
        String targetvalue = target.format(formatter);

        log.info(value+" "+targetvalue);
        Assert.assertEquals(value, targetvalue);
    }

    @Test
    @SneakyThrows
    void testInheritfrom() {

        TestCaseReplacementValueDTOapi1 rep = new TestCaseReplacementValueDTOapi1();
        rep.setType(TestCaseReplacementValueDTO.TYPE_LIST);
        String valueList = "aaa|bbb|ccc";
        rep.setValue(valueList);        

        TestCaseReplacementDTOapi1 repl = new TestCaseReplacementDTOapi1();
        repl.setKey("#testinherit#");
        repl.setMaxlength(3);
        repl.setValue(List.of(rep));
        TestCaseInjectionDTO inject = this.createInject();
        inject.setInjectid("inject1");
        inject.setReplacements(List.of(repl)); 

        TestCaseReplacementValueDTOapi1 rep2 = new TestCaseReplacementValueDTOapi1();
        rep2.setType(TestCaseReplacementValueDTO.TYPE_INHERITFROM);
        rep2.setValue("inject1");
        
        TestCaseReplacementDTOapi1 repl2 = new TestCaseReplacementDTOapi1();
        repl2.setKey("#testinherit#");
        repl2.setMaxlength(3);
        repl2.setValue(List.of(rep2));
        TestCaseInjectionDTO inject2 = this.createInject();
        inject2.setInjectid("inject2");
        inject2.setReplacements(List.of(repl2)); 

        String value = randomData.getRandomData("test1", inject).get("#testinherit#");
        String value2 = randomData.getRandomData("test1", inject2).get("#testinherit#");

        log.info(value+" "+value2);
        Assert.assertEquals(value, value2);
    }

    @Test
    @SneakyThrows
    void testRegex() {

        TestCaseReplacementValueDTOapi1 rep = new TestCaseReplacementValueDTOapi1();
        rep.setType(TestCaseReplacementValueDTO.TYPE_REGEX);
        //UUID
        //String regex = "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}";
        String regex = "[- A-Z]{15}";
        //String regex = "[ABCDEFGHIJKLMNOPQRSTUVWXYZ- ]{6}";
        //String regex = "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}";
        rep.setValue(regex);    

        RgxGen rgxGen = new RgxGen(rep.getValue());
        String prevalue = rgxGen.generate();

        TestCaseReplacementDTOapi1 repl = new TestCaseReplacementDTOapi1();
        repl.setKey("#testregex#");
        repl.setMaxlength(100);
        repl.setValue(List.of(rep));
        TestCaseInjectionDTO inject = this.createInject();
        inject.setReplacements(List.of(repl));        

        String value = randomData.getRandomData("test1", inject).get("#testregex#");

        log.info(UUID.randomUUID().toString());
        log.info(prevalue);
        log.info(value);
        log.info(regex);
        Assert.assertTrue(prevalue.matches(regex));
        Assert.assertTrue(value.matches(regex));
    }

    @Test
    @SneakyThrows
    void testFile() {

        String testid = "test1";
        String filename = "samplefile.txt";

        TestCaseReplacementValueDTOapi1 rep = new TestCaseReplacementValueDTOapi1();
        rep.setType(TestCaseReplacementValueDTO.TYPE_FILE);        
        rep.setValue(filename);
        
        StringBuffer samplefile = new StringBuffer();
        samplefile.append("testval1\n");
        samplefile.append("testval2\n");
        samplefile.append("testval3\n");
        randomData.storeFile(testid, filename, samplefile.toString());

        TestCaseReplacementDTOapi1 repl = new TestCaseReplacementDTOapi1();
        repl.setKey("#testfile#");
        repl.setMaxlength(8);
        repl.setValue(List.of(rep));
        TestCaseInjectionDTO inject = this.createInject();
        inject.setReplacements(List.of(repl));        

        String value = randomData.getRandomData(testid, inject).get("#testfile#");

        Assert.assertTrue(samplefile.toString().contains(value));
    }

    @Test
    @SneakyThrows
    void testresult2random() {

        ResponseDTO response = new ResponseDTO("{\"ausleitungerfolgt\": true, \"nachrichtmetadaten\": {\"annahmezeitpunkt\": \"2021-09-22 05:24:40.159Z\"}}");
        String testid = "test1";
        TestCaseCheckDTO check = createCheck("testcheck1");
		check.setSuccess(null);
        List<String> r2r = new ArrayList<>();
        r2r.add("ausleitungerfolgt");
        r2r.add("nachrichtmetadaten.annahmezeitpunkt");
        check.setResult2random(r2r);

        TestCaseRandomDataDTO randomdata = new TestCaseRandomDataDTO();

        try {
            log.info(objectmapper.writeValueAsString(check));
            log.info(objectmapper.writeValueAsString(randomdata));
        } catch (JsonProcessingException e) {            
            e.printStackTrace();
        }

        randomdata = cassandra.addCheckDataextraction(testid, check, randomdata, response);

        try {
            log.info(objectmapper.writeValueAsString(randomdata));
        } catch (JsonProcessingException e) {            
            e.printStackTrace();
        }

        Assert.assertTrue(randomdata.getDatamap().containsKey("#testcheck1.ausleitungerfolgt#"));
        Assert.assertTrue(randomdata.getDatamap().containsKey("#testcheck1.nachrichtmetadaten.annahmezeitpunkt#"));
    }

    @Test
    @SneakyThrows
    void testDataextraction() {

        ResponseDTO response = new ResponseDTO("{\"ausleitungerfolgt\": true, \"nachrichtmetadaten\": {\"annahmezeitpunkt\": \"2021-09-22 05:24:40.159Z\", \"abflugdatum\": \"2021-09-23\", \"abfluguhrzeit\": null, \"abflugutcoffset\": null, \"abflugflughafen\": \"CDG\", \"ankunftflughafen\": \"HAM\", \"ausleitungerfolgt\": true, \"fehlercodes\": [\"RDVGK02006\"], \"flugnummer\": \"0aeca167-ae4e-4d57-ac7f-6bd3321c06c6\", \"nachrichtformat\": \"PNRGOV\", \"nachrichtformatversion\": \"11.1\", \"dateneingangskanal\": \"MQß\", \"datenlieferant\": \"VP\", \"datenquelle\": \"LH\", \"rohdaten\": \"test\", \"datenlieferungid\": \"5948bf82-4e36-3a4f-8ca9-d0b379505ff0ß\", \"datenversandzeitpunkt\": \"2021-09-22 05:24:40.000Z\"}}");
        String headerval = "hallo";
        response.putHeader("testheader", headerval);
        
        String testid = "test1";
        String checkid = "testcheck1";
        TestCaseCheckDTO check = createCheck(checkid);
		check.setSuccess(null);

        check.setResult2random(null);
        check.setDataextraction(new ArrayList<>());

        TestCaseDataExtractionDTOapi1 de = new TestCaseDataExtractionDTOapi1();
        de.setAttribute("datenlieferungid");
        de.setSource(TestCaseDataExtractionDTO.SOURCE_PAYLOAD);
        de.setTarget("#"+checkid+".datenlieferungid#");
        check.addDataextraction(de);

        TestCaseDataExtractionDTOapi1 de2 = new TestCaseDataExtractionDTOapi1();
        de2.setAttribute("nachrichtmetadaten.rohdaten");
        de2.setSource(TestCaseDataExtractionDTO.SOURCE_PAYLOAD);
        de2.setTarget("#"+checkid+".nachrichtmetadaten.rohdaten#");
        check.addDataextraction(de2);

        TestCaseDataExtractionDTOapi1 de3 = new TestCaseDataExtractionDTOapi1();
        de3.setAttribute("testheader");
        de3.setSource(TestCaseDataExtractionDTO.SOURCE_HEADER);
        de3.setTarget("---"+checkid+".testheader---");
        check.addDataextraction(de3);

        TestCaseRandomDataDTO randomdata = new TestCaseRandomDataDTO();

        try {
            log.info(objectmapper.writeValueAsString(check));
            log.info(objectmapper.writeValueAsString(randomdata));
        } catch (JsonProcessingException e) {            
            e.printStackTrace();
        }

        randomdata = cassandra.addCheckDataextraction(testid, check, randomdata, response);

        try {
            log.info(objectmapper.writeValueAsString(randomdata));
        } catch (JsonProcessingException e) {            
            e.printStackTrace();
        }

        Assert.assertTrue(randomdata.getDatamap().containsKey("#testcheck1.datenlieferungid#"));
        Assert.assertTrue(randomdata.getDatamap().containsKey("#testcheck1.nachrichtmetadaten.rohdaten#"));
        Assert.assertTrue(randomdata.getDatamap().containsKey("---testcheck1.testheader---"));
        Assert.assertEquals(randomdata.getDatamap().get("---testcheck1.testheader---"), headerval);
    }

}
