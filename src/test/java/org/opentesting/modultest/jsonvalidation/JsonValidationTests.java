package org.opentesting.modultest.jsonvalidation;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

import org.junit.Assert;
import org.junit.jupiter.api.Test;
import org.opentesting.modultest.TestDataGenerator;
import org.opentesting.services.jsonvalidation.JsonValidator;
import org.opentesting.util.MappingHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * test example test cases
 */
@SpringBootTest
@Slf4j
class JsonValidationTests extends TestDataGenerator {

    @Autowired
	private JsonValidator jsonValidator;

    @Test
    @SneakyThrows
    void validateExamples() {
        for (String tc : getTestCases()) {
            String testFile = tc + "/test.json";

            String content;
            ClassLoader classLoader = JsonValidationTests.class.getClassLoader();
            if(classLoader.getResource(getTestCaseDir()+ testFile) != null) {            
                content = readFile(testFile);                
            } else {
                testFile = tc + "/test.yml";
                content = MappingHelper.jsonOrYmlToJson(readFile(testFile));
            }   
            
            if (content.replace(" ", "").contains("testapi\":\"1.0\"")) {
                List<String> res = jsonValidator.validateSchema(content, "OpenTestApiSchema_v1.0.json", true);
                res.stream().forEach(str -> log.info(str));
                Assert.assertTrue(res.isEmpty());
            }
            
            //1.1 should be compatible and work for all
            List<String> res = jsonValidator.validateSchema(content, "OpenTestApiSchema_v1.1.json", true);
            res.stream().forEach(str -> log.info(str));
            Assert.assertTrue(res.isEmpty());
        }
    }    
    
}