package org.opentesting.modultest.check;



import org.junit.jupiter.api.Test;
import org.opentesting.dto.ResponseDTO;
import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.dto.api1.TestCaseCheckDTOapi1;
import org.opentesting.dto.api1.TestCaseValidationDTOapi1;
import org.opentesting.persistence.KeyValueRepository;
import org.opentesting.services.adapter.Adapter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

import org.junit.Assert;

/**
 * Validation Tests
 */
@SpringBootTest
@Slf4j
public class CheckTests extends Adapter {

    @Autowired
	private KeyValueRepository keyValueRepository;

    @Test
	@SneakyThrows
	void testRegex() {

        String testid = "1";
        TestCaseCheckDTOapi1 check = new TestCaseCheckDTOapi1();
        check.setInstanceid("123");
        TestCaseValidationDTOapi1 validation = new TestCaseValidationDTOapi1();
        validation.setType("regex");
        validation.setResponse(List.of("response1"));
        keyValueRepository.insert(testid, "response1", "{\"test\":\".*\",\"test2\":\".*\"}");
        String logInfo = "";
        boolean dolog = true;

        ResponseDTO result = new ResponseDTO("{\"test\":\"test\",\"test2\":\"test2\"}"); 
        boolean res = this.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertTrue(res);

        result = new ResponseDTO("{\"test\":\"test\",\"testaaaa2\":\"test2\"}"); 
        res = this.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertFalse(res);

        keyValueRepository.insert(testid, "response1", "(\"test\":\".*\",\"test2\":\".*\")");

        result = new ResponseDTO("(\"test\":\"test\",\"test2\":\"test2\")"); 
        res = this.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertTrue(res);

        result = new ResponseDTO("(\"test\":\"test\",\"testaaaa2\":\"test2\")"); 
        res = this.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertFalse(res);

        keyValueRepository.insert(testid, "response1", "[\"test\":\".*\",\"test2\":\".*\"]");

        result = new ResponseDTO("[\"test\":\"test\",\"test2\":\"test2\"]"); 
        res = this.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertTrue(res);

        result = new ResponseDTO("[\"test\":\"test\",\"testaaaa2\":\"test2\"]"); 
        res = this.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertFalse(res);

		log.info("##### testRegex done #####");
    }

    @Test
	@SneakyThrows
	void testJsonSchema() {

        String testid = "2";
        TestCaseCheckDTOapi1 check = new TestCaseCheckDTOapi1();
        check.setInstanceid("123");
        TestCaseValidationDTOapi1 validation = new TestCaseValidationDTOapi1();
        validation.setType("jsonschema");
        validation.setResponse(List.of("response2"));
        keyValueRepository.insert(testid, "response2", "{\"$schema\": \"http://json-schema.org/draft-04/schema#\", \"type\": \"object\", \"properties\": {\"test\": {\"type\": \"string\"}, \"test2\": {\"type\": \"string\"}}, \"required\": [\"test\", \"test2\"]}");
        String logInfo = "";
        boolean dolog = true;

        ResponseDTO result = new ResponseDTO("{\"test\":\"test\",\"test2\":\"test2\"}"); 
        boolean res = this.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertTrue(res);

        result = new ResponseDTO("{\"test\":\"test\",\"test2\":\"test2\",\"test3\":\"test3\"}"); 
        res = this.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertTrue(res);

        result = new ResponseDTO("{\"test\":\"test\"}");
        res = this.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertFalse(res);

		log.info("##### testJsonSchema done #####");
    }

    @Override
    public String getServicename() {        
        throw new UnsupportedOperationException("Unimplemented method 'getServicename'");
    }

    @Override
    public boolean inject(String testid, TestCaseInjectionDTO inject) {        
        throw new UnsupportedOperationException("Unimplemented method 'inject'");
    }

    @Override
    public boolean check(String testid, TestCaseCheckDTO check, Object... args) {        
        throw new UnsupportedOperationException("Unimplemented method 'check'");
    }

    @Override
    public void createRequiredComponents(TestCaseDTO test) {        
        throw new UnsupportedOperationException("Unimplemented method 'createRequiredComponents'");
    }
    
}