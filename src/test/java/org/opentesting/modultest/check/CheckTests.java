package org.opentesting.modultest.check;

import org.junit.jupiter.api.Test;
import org.opentesting.dto.ResponseDTO;
import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseRandomDataDTO;
import org.opentesting.dto.api1.TestCaseCheckDTOapi1;
import org.opentesting.dto.api1.TestCaseDataExtractionDTOapi1;
import org.opentesting.dto.api1.TestCaseValidationDTOapi1;
import org.opentesting.persistence.KeyValueRepository;
import org.opentesting.services.adapter.jdbc.Jdbc;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

import org.junit.Assert;

/**
 * Validation Tests
 */
@SpringBootTest
@Slf4j
public class CheckTests {

    @Autowired
	private KeyValueRepository keyValueRepository;

    @Autowired
	private Jdbc adapter;

    @Test
	@SneakyThrows
	void testRegex() {

        String testid = "1";
        TestCaseCheckDTOapi1 check = new TestCaseCheckDTOapi1();
        check.setInstanceid("123");
        TestCaseValidationDTOapi1 validation = new TestCaseValidationDTOapi1();
        validation.setType("regex");
        validation.setResponse(List.of("response1"));
        keyValueRepository.insert(testid, "response1", "\\{\"test\":\".*\",\"test2\":\".*\"\\}");
        String logInfo = "";
        boolean dolog = true;

        ResponseDTO result = new ResponseDTO("{\"test\":\"test\",\"test2\":\"test2\"}"); 
        boolean res = adapter.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertTrue(res);

        result = new ResponseDTO("{\"test\":\"test\",\"testaaaa2\":\"test2\"}"); 
        res = adapter.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertFalse(res);

        keyValueRepository.insert(testid, "response1", "\\(\"test\":\".*\",\"test2\":\".*\"\\)");

        result = new ResponseDTO("(\"test\":\"test\",\"test2\":\"test2\")"); 
        res = adapter.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertTrue(res);

        result = new ResponseDTO("(\"test\":\"test\",\"testaaaa2\":\"test2\")"); 
        res = adapter.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertFalse(res);

        keyValueRepository.insert(testid, "response1", "\\[\"test\":\".*\",\"test2\":\".*\"\\]");

        result = new ResponseDTO("[\"test\":\"test\",\"test2\":\"test2\"]"); 
        res = adapter.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertTrue(res);

        result = new ResponseDTO("[\"test\":\"test\",\"testaaaa2\":\"test2\"]"); 
        res = adapter.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertFalse(res);

		log.info("##### testRegex done #####");
    }

    @Test
	@SneakyThrows
	void testJsonSchema() {

        String testid = "2";
        TestCaseCheckDTOapi1 check = new TestCaseCheckDTOapi1();
        check.setInstanceid("123");
        TestCaseValidationDTOapi1 validation = new TestCaseValidationDTOapi1();
        validation.setType("jsonschema");
        validation.setResponse(List.of("response2"));
        keyValueRepository.insert(testid, "response2", "{\"$schema\": \"http://json-schema.org/draft-04/schema#\", \"type\": \"object\", \"properties\": {\"test\": {\"type\": \"string\"}, \"test2\": {\"type\": \"string\"}}, \"required\": [\"test\", \"test2\"]}");
        String logInfo = "";
        boolean dolog = true;

        ResponseDTO result = new ResponseDTO("{\"test\":\"test\",\"test2\":\"test2\"}"); 
        boolean res = adapter.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertTrue(res);

        result = new ResponseDTO("{\"test\":\"test\",\"test2\":\"test2\",\"test3\":\"test3\"}"); 
        res = adapter.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertTrue(res);

        result = new ResponseDTO("{\"test\":\"test\"}");
        res = adapter.validateResult(testid, check, validation, result, logInfo, dolog);
        Assert.assertFalse(res);

		log.info("##### testJsonSchema done #####");
    }

    @Test
	@SneakyThrows
	void testRegexDataextraction() {
        TestCaseDataExtractionDTOapi1 de = new TestCaseDataExtractionDTOapi1();        
        de.setRegex("st.*");  
        de.setTarget("#dummy#"); //mandatory
        String result = adapter.getValueDataextraction(de, "test2", "1");
        Assert.assertEquals("st2", result);

        de = new TestCaseDataExtractionDTOapi1();        
        de.setRegex(".*all");  
        de.setTarget("#dummy#"); //mandatory       
        result = adapter.getValueDataextraction(de, "hallo", "1");
        Assert.assertEquals("hall", result);
    }

    @Test
	@SneakyThrows
	void testEmptyResponseDataextraction() {
        TestCaseDataExtractionDTOapi1 de = new TestCaseDataExtractionDTOapi1(); 
        de.setAttribute("testheader");      
        de.setSource("header"); 
        de.setTarget("#testheader#"); //mandatory
        String testid = "myid";
        TestCaseCheckDTO check = new TestCaseCheckDTOapi1();
        check.addDataextraction(de);
        check.setCheckid("aaa");
        TestCaseRandomDataDTO randomdata = new TestCaseRandomDataDTO();

        //missing payload
        ResponseDTO response = new ResponseDTO(null);
        response.putHeader("testheader", "hallo");
        adapter.addCheckDataextraction(testid, check, randomdata, response);        
        Assert.assertEquals("hallo", randomdata.get("#testheader#"));
    
        //random payload
        response = new ResponseDTO("1234567890");
        response.putHeader("testheader", "hallo");
        adapter.addCheckDataextraction(testid, check, randomdata, response);        
        Assert.assertEquals("hallo", randomdata.get("#testheader#"));
    }    
    
}