package org.opentesting;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.opentesting.services.execution.dto.TestCaseCheckDTO;
import org.opentesting.services.execution.dto.TestCaseDTO;
import org.opentesting.services.execution.dto.TestCaseInjectionDTO;
import org.opentesting.services.execution.persistence.TestCaseCheckRepository;
import org.opentesting.services.execution.persistence.TestCaseFileRepository;
import org.opentesting.services.execution.persistence.TestCaseInjectionRepository;
import org.opentesting.services.execution.persistence.TestCaseRepository;
import org.opentesting.util.OpenTestingConversion;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.util.Assert;

import lombok.extern.slf4j.Slf4j;

/**
 * Backend Tests
 */
@SpringBootTest
@Slf4j
class BackendTests extends TestDataGenerator {

	@Autowired
	private TestCaseRepository testCaseRepository;

	@Autowired
	private TestCaseInjectionRepository testCaseInjectionRepository;

	@Autowired
	private TestCaseCheckRepository testCaseCheckRepository;

	@Autowired
	private TestCaseFileRepository testCaseFileRepository;

	@Test
	void testTestCaseRepo() {
		//database will sort labels, please take care in this test
		TestCaseDTO tc = createEmptyTest();

		testCaseRepository.insert(tc);
		TestCaseDTO tc2 = testCaseRepository.select(tc.getTestid());
		testCaseRepository.delete(tc.getTestid());

		Assert.isTrue(OpenTestingConversion.toStringDatabase(tc.getLabels()).equals(OpenTestingConversion.toStringDatabase(tc2.getLabels())), "labels incorrect");
		log.info("##### testTestCaseRepo done #####");
	}

	@Test
	void testTestCaseInjectionRepo() {

		String testid = "test123";
	
		List<TestCaseInjectionDTO> tcis = new ArrayList<>();		
		TestCaseInjectionDTO inject = createInject();

		tcis.add(inject);

		testCaseInjectionRepository.insert(testid, tcis);		
		TestCaseInjectionDTO tci2 = testCaseInjectionRepository.selectByIdAndTimer(testid, inject.getTimerid());
		testCaseInjectionRepository.deleteByTestId(testid);

		Assert.isTrue(!tci2.isActivation(), "injection incorrect");
		Assert.isTrue(tci2.getTimerid().equals(inject.getTimerid()), "injection incorrect");
		Assert.isTrue(tci2.getRandomgenerator().getReplacements().get(0).getOptionlist().size() == 2, "randomgenerator incorrect");
		log.info("##### testTestCaseInjectionRepo done #####");
	}

	@Test
	void testTestCaseCheckRepo() {

		TestCaseCheckDTO check = createCheck("testcheck");
		check.setSuccess(null);

		testCaseCheckRepository.insert(check.getTestid(), check);
		TestCaseCheckDTO check2 = testCaseCheckRepository.selectByCheckId(check.getCheckid());
		testCaseCheckRepository.deleteByCheckId(check.getCheckid());
		testCaseCheckRepository.deleteByTestId(check.getTestid());
		
		Assert.isTrue(LocalDateTime.now().isAfter(check2.getStartts()), LocalDateTime.now()+" > "+check2.getStartts());
		Assert.isTrue(LocalDateTime.now().isBefore(check2.getTargetts()), LocalDateTime.now()+" < "+check2.getTargetts());
		Assert.isTrue(check2.getRandomdata().getRandomdata().get("#hallo#").equals("Hallo Welt!"), "random data failed");
		Assert.isTrue(check2.getBulkid().equals(check.getBulkid()), "bulkid failed");
		Assert.isTrue(check2.getSuccess() == null, "success flag failed");
		Assert.isTrue(check.getInjects().get(0).equals(check2.getInjects().get(0)), "injects incorrect");
		Assert.isTrue(check.getChecks().get(0).equals(check2.getChecks().get(0)), "checks incorrect");
		Assert.isTrue(check.getResult2random().get(0).equals(check2.getResult2random().get(0)), "result2inject incorrect");
		log.info("##### testTestCaseCheckRepo done #####");
	}

	@Test
	void testTestCaseFileRepo() {
		String testid = "testid";
		String filename = "testid.json";
		String content = "{ \"key\" = \"value\" }";
		testCaseFileRepository.insert(testid, filename, content);
		String content2 = testCaseFileRepository.select(testid, filename);
		testCaseFileRepository.delete(testid, filename);
		testCaseFileRepository.deleteByTestId(testid);
		Assert.isTrue(content.equals(content2), "filecontent incorrect");
		log.info("##### testTestCaseFileRepo done #####");
	}

}
