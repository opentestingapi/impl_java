package org.opentesting;

import java.time.LocalDateTime;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.services.execution.TestManager;
import org.opentesting.util.OpenTestingConversion;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import org.junit.Assert;

/**
 * Backend Tests
 */
@SpringBootTest
@Slf4j
class BackendTests extends TestDataGenerator {

	@Autowired
	private TestManager testManager;

	@Autowired
	private OpenTestingConversion openTestingConversion;

	@Test
	@SneakyThrows
	void testTestCaseRepo() {
		//database will sort labels, please take care in this test
		TestCaseDTO tc = createEmptyTest();
		testManager.storeTest(tc);

		TestCaseDTO tc2 = testManager.getTest(tc.getId());
		testManager.removeTest(tc.getId());

		Assert.assertEquals(OpenTestingConversion.toStringDatabase(tc.getLabels()), OpenTestingConversion.toStringDatabase(tc2.getLabels()));
		log.info("##### testTestCaseRepo done #####");
	}

	@Test
	@SneakyThrows
	void testTestCaseInjectionRepo() {
	
		TestCaseDTO tc = createEmptyTest();
		TestCaseInjectionDTO inject = this.createInject();
		tc.setInjectioninstances(List.of(inject));
		testManager.storeTest(tc);

		TestCaseDTO tc2 = testManager.getTest(tc.getId());
		testManager.removeTest(tc.getId());
		TestCaseInjectionDTO tci2 = tc2.getInjectioninstances().get(0);

		log.info(openTestingConversion.object2json(tci2));

		Assert.assertTrue(tci2.isActive());
		Assert.assertEquals(tci2.getTimerid(), inject.getTimerid());
		Assert.assertEquals(tci2.getReplacements().size(), inject.getReplacements().size());
		log.info("##### testTestCaseInjectionRepo done #####");
	}

	@Test
	@SneakyThrows
	void testTestCaseCheckRepo() {

		TestCaseDTO tc = createEmptyTest();
		TestCaseCheckDTO check = this.createCheck("check1");
		tc.setCheckinstances(List.of(check));
		testManager.storeTest(tc);

		TestCaseDTO tc2 = testManager.getTest(tc.getId());
		testManager.removeTest(tc.getId());
		TestCaseCheckDTO check2 = tc2.getCheckinstances().get(0);
		
		Assert.assertTrue(LocalDateTime.now().isAfter(check2.getStartts()));
		Assert.assertTrue(LocalDateTime.now().isBefore(check2.getTargetts()));
		Assert.assertEquals("Hallo Welt!", check2.getRandomdata().getDatamap().get("#hallo#"));
		Assert.assertEquals(check2.getBulkid(), check.getBulkid());
		Assert.assertNull(check2.getSuccess());
		Assert.assertEquals(check.getInjects().get(0), check2.getInjects().get(0));
		Assert.assertEquals(check.getChecks().get(0), check2.getChecks().get(0));
		Assert.assertEquals(check.getResult2random().get(0), check2.getResult2random().get(0));
		Assert.assertEquals(check.getTraceid(), check2.getTraceid());
		log.info("##### testTestCaseCheckRepo done #####");
	}

	@Test
	@SneakyThrows
	void testTestCaseFileRepo() {
		String testid = "testid1";
		String filename = "testid.json";
		String content = "{ \"key\" = \"value\" }";
		testManager.storeFile(testid, filename, content);
		String content2 = testManager.getFile(testid, filename);
		testManager.removeTest(testid);
		Assert.assertEquals(content, content2);
		log.info("##### testTestCaseFileRepo done #####");
	}

}
