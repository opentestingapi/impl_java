package org.opentesting.systemtest;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.boot.test.context.SpringBootTest;
import org.opentesting.common.Sleeper;
import org.opentesting.devenv.DevEnv;
import org.opentesting.systemtest.util.OpenTestingApiTester;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)
@Slf4j
class OpenTestingSystemTest extends OpenTestingApiTester {

	private static final String TESTFOLDER = "opentesting/systemtests/";
	private static final String TESTFOLDER2FAIL = "opentesting/tofail/";

	@BeforeAll
	@SneakyThrows
	private static void beforeAll() {

		// init development environment
		DevEnv.init(true);		

		// lets initialize opentesting
		init();

		// wait for initializer
		Sleeper.sleep(120000);
	}

	@AfterAll
	@SneakyThrows
	private static void afterAll() {

		log.info("###############################");

		for(OTATestResult otaTestResult : getTestResults()){
			log.info(otaTestResult.getResult() + "\t" +
					otaTestResult.getTestName()+ "." +
					otaTestResult.getCheckName() + "\t" +
					"test2fail="+otaTestResult.getShouldFail() + "\t" +
					otaTestResult.getDescription());
		}

		// print summary
		log.info("###############################");		
		log.info("mandatory passed:   " + isSummary_mandatoryPassed());
		log.info("all passed:         " + isSummary_allPassed());
		log.info("checks total:        " + getSummary_all());
		log.info("checks passed:      " + getSummary_passed());
		log.info("checks missed:       " + getSummary_missed());
		log.info("###############################");	
		
		// stop containers
		DevEnv.stop();
	}

	@ParameterizedTest
	@MethodSource("getTestCases")
	@SneakyThrows
	void test(String testcase) {

		log.info("###############################");
		log.info("Test: "+testcase);
		log.info("###############################");

		//execute test
		assertTrue(testcase+": fail", testDefault( TESTFOLDER+testcase+"/", false));
	}

	/**
	 * get all system tests
	 * @return test cases
	 */
	static List<String> getTestCases() {
		List<String> tests = new ArrayList<>();
		ClassLoader classLoader = OpenTestingSystemTest.class.getClassLoader();
		File file = new File(classLoader.getResource(TESTFOLDER).getFile());
		for (File folder : file.listFiles()) {
			if (folder.isDirectory()) tests.add(folder.getName());
		}
		Collections.sort(tests);
		return tests;
		//return Arrays.asList("dataextraction_001");
	}

	@ParameterizedTest
	@MethodSource("getTestCases2Fail")
	@SneakyThrows
	void test2Fail(String testcase) {

		log.info("###############################");
		log.info("Test2Fail: "+testcase);
		log.info("###############################");

		//execute test
		assertFalse(testcase+": fail", testDefault( TESTFOLDER2FAIL+testcase+"/", true));
	}

	/**
	 * all testcases to fail
	 * @return list of test cases
	 */
	static List<String> getTestCases2Fail() {
		List<String> tests = new ArrayList<>();
		ClassLoader classLoader = OpenTestingSystemTest.class.getClassLoader();
		File file = new File(classLoader.getResource(TESTFOLDER2FAIL).getFile());
		for (File folder : file.listFiles()) {
			if (folder.isDirectory()) tests.add(folder.getName());
		}
		Collections.sort(tests);
		return tests;
		//return Arrays.asList("dataextraction_001");
	}

	/**
	 * execute a defined one
	 */
	//@Test
	@SneakyThrows
	void test() {
		//assertTrue("test1: fail", testDefault( TESTFOLDER+"test1/", false));
		assertFalse("test1: fail", testDefault("opentesting/tofail/rest_tofail_001_yml/", true));
	}

	/**
	 * keep the environment running
	 * @throws InterruptedException
	 */
	//@Test
	void sleep() throws InterruptedException {		
		Sleeper.sleep(100000000);
	}

}