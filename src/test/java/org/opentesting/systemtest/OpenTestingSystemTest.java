package org.opentesting.systemtest;

import lombok.SneakyThrows;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.boot.test.context.SpringBootTest;
import org.opentesting.devenv.DevEnv;
import org.opentesting.systemtest.util.OpenTestingApiTester;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.assertTrue;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)
class OpenTestingSystemTest extends OpenTestingApiTester {

	private static final String TESTFOLDER = "opentesting/systemtests/";

	@BeforeAll
	@SneakyThrows
	private static void beforeAll() {

		// Please uncomment for local Podman usage and add host.testcontainers.internal to your /etc/hosts file
    	DevEnv.updateEnv("DOCKER_HOST", "unix:///run/user/1001/podman/podman.sock");   

		// lets start opentesting
		init();
	}

	@ParameterizedTest
	@MethodSource("getTestCases")
	@SneakyThrows
	void test(String testcase) {
		assertTrue(testcase+": fail", testDefault( TESTFOLDER+testcase+"/"));
	}

	/**
	 * Diese Methode liest alle vorhandenen Systemtests
	 * @return Liste mit dem Systemtest-Ordnern
	 */
	static List<String> getTestCases() {
		List<String> tests = new ArrayList<>();
		ClassLoader classLoader = OpenTestingSystemTest.class.getClassLoader();
		File file = new File(classLoader.getResource(TESTFOLDER).getFile());
		for (File folder : file.listFiles()) {
			if (folder.isDirectory()) tests.add(folder.getName());
		}
		Collections.sort(tests);
		return tests;
	}

	/**
	 * Dieser Test kann verwendet werden um einen expliziten Test durchzufuehren
	 */
	//@Test
	@SneakyThrows
	void test1() {
		assertTrue("test1: fail", testDefault( TESTFOLDER+"test1/"));
	}

	/**
	 * Dieser Test kann verwendet werden um die JUnit Testumgebung am Laufen zu halten
	 * @throws InterruptedException
	 */
	//@Test
	void sleep() throws InterruptedException {		
		Thread.sleep(100000000);
	}

}