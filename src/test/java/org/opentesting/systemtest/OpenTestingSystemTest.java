package org.opentesting.systemtest;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.boot.test.context.SpringBootTest;
import org.opentesting.common.Sleeper;
import org.opentesting.devenv.DevEnv;
import org.opentesting.systemtest.util.OpenTestingApiTester;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.assertTrue;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)
@Slf4j
class OpenTestingSystemTest extends OpenTestingApiTester {

	private static final String TESTFOLDER = "opentesting/systemtests/";

	@BeforeAll
	@SneakyThrows
	private static void beforeAll() {

		// init development environment
		DevEnv.init();

		// wait for initializer
		Sleeper.sleep(120000);

		// lets initialize opentesting
		init();
	}

	@AfterAll
	@SneakyThrows
	private static void afterAll() {

		// print summary
		log.info("###############################");		
		log.info("mandatory success:   " + isSummary_mandatorySuccess());
		log.info("all success:         " + isSummary_allSuccess());
		log.info("checks total:        " + getSummary_all());
		log.info("checks success:      " + getSummary_success());
		log.info("checks failed:       " + getSummary_failed());
		log.info("###############################");		
	}

	@ParameterizedTest
	@MethodSource("getTestCases")
	@SneakyThrows
	void test(String testcase) {

		log.info("###############################");
		log.info("Test: "+testcase);
		log.info("###############################");

		//execute test
		assertTrue(testcase+": fail", testDefault( TESTFOLDER+testcase+"/"));
	}

	/**
	 * Diese Methode liest alle vorhandenen Systemtests
	 * @return Liste mit dem Systemtest-Ordnern
	 */
	static List<String> getTestCases() {
		List<String> tests = new ArrayList<>();
		ClassLoader classLoader = OpenTestingSystemTest.class.getClassLoader();
		File file = new File(classLoader.getResource(TESTFOLDER).getFile());
		for (File folder : file.listFiles()) {
			if (folder.isDirectory()) tests.add(folder.getName());
		}
		Collections.sort(tests);
		return tests;
		//return Arrays.asList("kafka_001");
	}

	/**
	 * Dieser Test kann verwendet werden um einen expliziten Test durchzufuehren
	 */
	//@Test
	@SneakyThrows
	void test1() {
		assertTrue("test1: fail", testDefault( TESTFOLDER+"test1/"));
	}

	/**
	 * Dieser Test kann verwendet werden um die JUnit Testumgebung am Laufen zu halten
	 * @throws InterruptedException
	 */
	//@Test
	void sleep() throws InterruptedException {		
		Sleeper.sleep(100000000);
	}

}